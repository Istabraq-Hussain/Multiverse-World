#usda 1.0
(
    defaultPrim = "apartment_root"
    metersPerUnit = 1
    upAxis = "Z"
)

def Xform "apartment_root"
{
    def Xform "envelope_root"
    {
        matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (8.85, 1.75, 0, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]

        def Xform "wall1"
        {
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, -0.2, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Xform "wall1_visual_0" (
                prepend references = @./../meshes/usd/visual/SM_Wall_01.usda@</SM_Wall_01>
            )
            {
                matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]

                over "SM_Wall_01" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    rel material:binding = </_materials/M_Metal_Dark_003>

                    over "M_Basic_Wall" (
                        prepend apiSchemas = ["MaterialBindingAPI"]
                    )
                    {
                        rel material:binding = </_materials/M_Basic_Wall>
                    }

                    over "M_Plastic_White" (
                        prepend apiSchemas = ["MaterialBindingAPI"]
                    )
                    {
                        rel material:binding = </_materials/M_Plastic_White>
                    }

                    over "M_Metal_Dark_003" (
                        prepend apiSchemas = ["MaterialBindingAPI"]
                    )
                    {
                        rel material:binding = </_materials/M_Metal_Dark_003>
                    }
                }
            }

            def Xform "wall1_collision_0" (
                prepend apiSchemas = ["PhysicsMassAPI"]
            )
            {
                point3f physics:centerOfMass = (0, 0, 0)
                float physics:density = 100
                float3 physics:diagonalInertia = (-72135.96, -41676.785, 203121.33)
                float physics:mass = 2558.1082
                quatf physics:principalAxes = (0.35040486, -0.1501339, 0.20298775, 0.90192693)
                matrix4d xformOp:transform = ( (9.38022, 0, 0, 0), (0, 0.06425, 0, 0), (0, 0, 1.52585, 0), (0.505224, -1.81425, 1.73439, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]

                def Cube "Cube" (
                    prepend apiSchemas = ["PhysicsCollisionAPI"]
                )
                {
                    float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                    bool physics:collisionEnabled = 1
                    color3f[] primvars:displayColor = [(1, 0, 0)]
                    float[] primvars:displayOpacity = [0.5]
                }
            }
        }

        def Xform "wall2"
        {
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, -0.2, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Xform "wall2_visual_0" (
                prepend references = @./../meshes/usd/visual/SM_Wall_02.usda@</SM_Wall_02>
            )
            {
                matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]

                over "SM_Wall_02" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    rel material:binding = </_materials/M_Plastic_White>

                    over "M_Basic_Wall" (
                        prepend apiSchemas = ["MaterialBindingAPI"]
                    )
                    {
                        rel material:binding = </_materials/M_Basic_Wall>
                    }

                    over "M_Plastic_White" (
                        prepend apiSchemas = ["MaterialBindingAPI"]
                    )
                    {
                        rel material:binding = </_materials/M_Plastic_White>
                    }
                }
            }

            def Xform "wall2_collision_0" (
                prepend apiSchemas = ["PhysicsMassAPI"]
            )
            {
                point3f physics:centerOfMass = (0, 0, 0)
                float physics:density = 100
                float3 physics:diagonalInertia = (-88065.45, -42120.72, 212310.69)
                float physics:mass = 5132.0215
                quatf physics:principalAxes = (0.32270175, -0.13353294, 0.20288987, 0.91480505)
                matrix4d xformOp:transform = ( (0.094776, 0, 0, 0), (0, 2.48345, 0, 0), (0, 0, 1.52585, 0), (-8.875, 0.713447, 1.73439, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]

                def Cube "Cube" (
                    prepend apiSchemas = ["PhysicsCollisionAPI"]
                )
                {
                    float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                    bool physics:collisionEnabled = 1
                    color3f[] primvars:displayColor = [(1, 0, 0)]
                    float[] primvars:displayOpacity = [0.5]
                }
            }
        }

        def Xform "wall3"
        {
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, -0.2, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Xform "wall3_visual_0" (
                prepend references = @./../meshes/usd/visual/SM_Wall_03.usda@</SM_Wall_03>
            )
            {
                matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]

                over "SM_Wall_03" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    rel material:binding = </_materials/M_Plastic_White>

                    over "M_Basic_Wall" (
                        prepend apiSchemas = ["MaterialBindingAPI"]
                    )
                    {
                        rel material:binding = </_materials/M_Basic_Wall>
                    }

                    over "M_Plastic_White" (
                        prepend apiSchemas = ["MaterialBindingAPI"]
                    )
                    {
                        rel material:binding = </_materials/M_Plastic_White>
                    }
                }
            }

            def Xform "wall3_collision_0" (
                prepend apiSchemas = ["PhysicsMassAPI"]
            )
            {
                point3f physics:centerOfMass = (0, 0, 0)
                float physics:density = 100
                float3 physics:diagonalInertia = (-26616.057, -16690.39, 86490.195)
                float physics:mass = 1585.5151
                quatf physics:principalAxes = (-0.06796537, 0.021040155, -0.042775206, 0.9965482)
                matrix4d xformOp:transform = ( (4.23677, 0, 0, 0), (0, 0.06425, 0, 0), (0, 0, 1.52585, 0), (-4.63823, 3.27776, 1.73439, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]

                def Cube "Cube" (
                    prepend apiSchemas = ["PhysicsCollisionAPI"]
                )
                {
                    float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                    bool physics:collisionEnabled = 1
                    color3f[] primvars:displayColor = [(1, 0, 0)]
                    float[] primvars:displayOpacity = [0.5]
                }
            }

            def Xform "wall3_collision_1" (
                prepend apiSchemas = ["PhysicsMassAPI"]
            )
            {
                point3f physics:centerOfMass = (0, 0, 0)
                float physics:density = 100
                float3 physics:diagonalInertia = (-26616.057, -16690.39, 86490.195)
                float physics:mass = 1585.5151
                quatf physics:principalAxes = (-0.06796537, 0.021040155, -0.042775206, 0.9965482)
                matrix4d xformOp:transform = ( (4.1443, 0, 0, 0), (0, 0.06425, 0, 0), (0, 0, 1.52585, 0), (5.87824, 3.27776, 1.73439, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]

                def Cube "Cube" (
                    prepend apiSchemas = ["PhysicsCollisionAPI"]
                )
                {
                    float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                    bool physics:collisionEnabled = 1
                    color3f[] primvars:displayColor = [(1, 0, 0)]
                    float[] primvars:displayOpacity = [0.5]
                }
            }
        }

        def Xform "wall4"
        {
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, -0.2, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Xform "wall4_visual_0" (
                prepend references = @./../meshes/usd/visual/SM_Wall_04.usda@</SM_Wall_04>
            )
            {
                matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]

                over "SM_Wall_04" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    rel material:binding = </_materials/M_Plastic_White>

                    over "M_Basic_Wall" (
                        prepend apiSchemas = ["MaterialBindingAPI"]
                    )
                    {
                        rel material:binding = </_materials/M_Basic_Wall>
                    }

                    over "M_Plastic_White" (
                        prepend apiSchemas = ["MaterialBindingAPI"]
                    )
                    {
                        rel material:binding = </_materials/M_Plastic_White>
                    }
                }
            }

            def Xform "wall4_collision_0" (
                prepend apiSchemas = ["PhysicsMassAPI"]
            )
            {
                point3f physics:centerOfMass = (0, 0, 0)
                float physics:density = 100
                float3 physics:diagonalInertia = (-64482.535, -31421.469, 158752.64)
                float physics:mass = 4465.291
                quatf physics:principalAxes = (0.3282458, -0.1366807, 0.20444353, 0.9120175)
                matrix4d xformOp:transform = ( (0.094776, 0, 0, 0), (0, 2.48345, 0, 0), (0, 0, 1.52585, 0), (9.98022, 0.713447, 1.73439, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]

                def Cube "Cube" (
                    prepend apiSchemas = ["PhysicsCollisionAPI"]
                )
                {
                    float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                    bool physics:collisionEnabled = 1
                    color3f[] primvars:displayColor = [(1, 0, 0)]
                    float[] primvars:displayOpacity = [0.5]
                }
            }
        }

        def Xform "windows"
        {
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, -0.2, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Xform "windows_visual_0" (
                prepend references = @./../meshes/usd/visual/windows_without_4.usda@</windows_without_4>
            )
            {
                matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]

                over "SM_Window_07" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    rel material:binding = </_materials/M_Metal_Chrome>

                    over "M_Glass" (
                        prepend apiSchemas = ["MaterialBindingAPI"]
                    )
                    {
                        rel material:binding = </_materials/M_Glass>
                    }

                    over "M_Metal_Brushed" (
                        prepend apiSchemas = ["MaterialBindingAPI"]
                    )
                    {
                        rel material:binding = </_materials/M_Metal_Brushed>
                    }

                    over "M_Metal_Dark" (
                        prepend apiSchemas = ["MaterialBindingAPI"]
                    )
                    {
                        rel material:binding = </_materials/M_Metal_Dark>
                    }

                    over "M_Metal_Chrome" (
                        prepend apiSchemas = ["MaterialBindingAPI"]
                    )
                    {
                        rel material:binding = </_materials/M_Metal_Chrome>
                    }
                }
            }
        }

        def Xform "window4_frame"
        {
            matrix4d xformOp:transform = ( (2.220446049250313e-16, -1, 0, 0), (1, 2.220446049250313e-16, 0, 0), (0, 0, 1, 0), (0.671098, 3.37273, 1.52145, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Xform "window4_frame_visual_0" (
                prepend references = @./../meshes/usd/visual/SM_Window_Frame.usda@</SM_Window_Frame>
            )
            {
                matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]

                over "SM_Window" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    rel material:binding = </_materials/_Game_Materials_Laborraum_M_Metal_Brushed_Inst_M_Metal_Brushed_>
                }
            }

            def Xform "window4_frame_collision_0" (
                prepend apiSchemas = ["PhysicsMassAPI"]
            )
            {
                point3f physics:centerOfMass = (0, 0, 0)
                float physics:density = 100
                float3 physics:diagonalInertia = (-339.10748, -158.49792, 820.45416)
                float physics:mass = 3.2243605
                quatf physics:principalAxes = (-0.014963592, 0.9954464, 0.09078338, -0.024919515)
                matrix4d xformOp:transform = ( (0.01, 0, 0, 0), (0, 1.0677, 0, 0), (0, 0, 0.092776, 0), (0, 0, 1.42883, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]

                def Cube "Cube" (
                    prepend apiSchemas = ["PhysicsCollisionAPI"]
                )
                {
                    float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                    bool physics:collisionEnabled = 1
                    color3f[] primvars:displayColor = [(1, 0, 0)]
                    float[] primvars:displayOpacity = [0.5]
                }
            }

            def Xform "window4_frame_collision_1" (
                prepend apiSchemas = ["PhysicsMassAPI"]
            )
            {
                point3f physics:centerOfMass = (0, 0, 0)
                float physics:density = 100
                float3 physics:diagonalInertia = (-339.10748, -158.49792, 820.45416)
                float physics:mass = 3.2243605
                quatf physics:principalAxes = (-0.014963592, 0.9954464, 0.09078338, -0.024919515)
                matrix4d xformOp:transform = ( (0.01, 0, 0, 0), (0, 1.0677, 0, 0), (0, 0, 0.18914, 0), (0, 0, 0.795222, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]

                def Cube "Cube" (
                    prepend apiSchemas = ["PhysicsCollisionAPI"]
                )
                {
                    float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                    bool physics:collisionEnabled = 1
                    color3f[] primvars:displayColor = [(1, 0, 0)]
                    float[] primvars:displayOpacity = [0.5]
                }
            }

            def Xform "window4_frame_collision_2" (
                prepend apiSchemas = ["PhysicsMassAPI"]
            )
            {
                point3f physics:centerOfMass = (0, 0, 0)
                float physics:density = 100
                float3 physics:diagonalInertia = (-339.10748, -158.49792, 820.45416)
                float physics:mass = 3.2243605
                quatf physics:principalAxes = (-0.014963592, 0.9954464, 0.09078338, -0.024919515)
                matrix4d xformOp:transform = ( (0.01, 0, 0, 0), (0, 1.0677, 0, 0), (0, 0, 0.026796, 0), (0, 0, -1.49481, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]

                def Cube "Cube" (
                    prepend apiSchemas = ["PhysicsCollisionAPI"]
                )
                {
                    float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                    bool physics:collisionEnabled = 1
                    color3f[] primvars:displayColor = [(1, 0, 0)]
                    float[] primvars:displayOpacity = [0.5]
                }
            }

            def Xform "window4_frame_collision_3" (
                prepend apiSchemas = ["PhysicsMassAPI"]
            )
            {
                point3f physics:centerOfMass = (0, 0, 0)
                float physics:density = 100
                float3 physics:diagonalInertia = (-339.10748, -158.49792, 820.45416)
                float physics:mass = 3.2243605
                quatf physics:principalAxes = (-0.014963592, 0.9954464, 0.09078338, -0.024919515)
                matrix4d xformOp:transform = ( (0.01, 0, 0, 0), (0, 0.075574, 0, 0), (0, 0, 1.52161, 0), (0, 0.992126, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]

                def Cube "Cube" (
                    prepend apiSchemas = ["PhysicsCollisionAPI"]
                )
                {
                    float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                    bool physics:collisionEnabled = 1
                    color3f[] primvars:displayColor = [(1, 0, 0)]
                    float[] primvars:displayOpacity = [0.5]
                }
            }

            def Xform "window4_frame_collision_4" (
                prepend apiSchemas = ["PhysicsMassAPI"]
            )
            {
                point3f physics:centerOfMass = (0, 0, 0)
                float physics:density = 100
                float3 physics:diagonalInertia = (-339.10748, -158.49792, 820.45416)
                float physics:mass = 3.2243605
                quatf physics:principalAxes = (-0.014963592, 0.9954464, 0.09078338, -0.024919515)
                matrix4d xformOp:transform = ( (0.01, 0, 0, 0), (0, 0.075574, 0, 0), (0, 0, 1.52161, 0), (0, -0.992126, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]

                def Cube "Cube" (
                    prepend apiSchemas = ["PhysicsCollisionAPI"]
                )
                {
                    float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                    bool physics:collisionEnabled = 1
                    color3f[] primvars:displayColor = [(1, 0, 0)]
                    float[] primvars:displayOpacity = [0.5]
                }
            }

            def Xform "window4_frame_collision_5" (
                prepend apiSchemas = ["PhysicsMassAPI"]
            )
            {
                point3f physics:centerOfMass = (0, 0, 0)
                float physics:density = 100
                float3 physics:diagonalInertia = (-339.10748, -158.49792, 820.45416)
                float physics:mass = 3.2243605
                quatf physics:principalAxes = (-0.014963592, 0.9954464, 0.09078338, -0.024919515)
                matrix4d xformOp:transform = ( (0.01, 0, 0, 0), (0, 0.073126, 0, 0), (0, 0, 1.52161, 0), (0, 0, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]

                def Cube "Cube" (
                    prepend apiSchemas = ["PhysicsCollisionAPI"]
                )
                {
                    float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                    bool physics:collisionEnabled = 1
                    color3f[] primvars:displayColor = [(1, 0, 0)]
                    float[] primvars:displayOpacity = [0.5]
                }
            }

            def PhysicsRevoluteJoint "window4_right_joint"
            {
                uniform token physics:axis = "Z"
                rel physics:body0 = </apartment_root/envelope_root/window4_frame>
                rel physics:body1 = </apartment_root/window4_right>
                bool physics:collisionEnabled = 0
                point3f physics:localPos0 = (0, -0.916552, -0.425471)
                point3f physics:localPos1 = (0, 0, 0)
                quatf physics:localRot0 = (0, 0, 1, 0)
                quatf physics:localRot1 = (0, 0, 1, 0)
                float physics:lowerLimit = 0
                float physics:upperLimit = 90.00021
            }

            def PhysicsRevoluteJoint "window4_left_joint"
            {
                uniform token physics:axis = "Z"
                rel physics:body0 = </apartment_root/envelope_root/window4_frame>
                rel physics:body1 = </apartment_root/window4_left>
                bool physics:collisionEnabled = 0
                point3f physics:localPos0 = (0.00162, 0.929112, -0.425471)
                point3f physics:localPos1 = (0, 0, 0)
                quatf physics:localRot0 = (1, 0, 0, 0)
                quatf physics:localRot1 = (1, 0, 0, 0)
                float physics:lowerLimit = 0
                float physics:upperLimit = 90.00021
            }
        }
    }

    def Xform "window4_right" (
        prepend apiSchemas = ["PhysicsRigidBodyAPI"]
    )
    {
        bool physics:rigidBodyEnabled = 1
        matrix4d xformOp:transform = ( (2.220446049250313e-16, -1, 0, 0), (1, 2.220446049250313e-16, 0, 0), (0, 0, 1, 0), (8.604546000000001, 5.12273, 1.095979, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]

        def Xform "window4_right_visual_0" (
            prepend references = @./../meshes/usd/visual/SM_Window_Right.usda@</SM_Window_Right>
        )
        {
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            over "SM_Window_002" (
                prepend apiSchemas = ["MaterialBindingAPI"]
            )
            {
                rel material:binding = </_materials/_Game_Materials_Laborraum_M_Metal_Brushed_Inst_M_Metal_Brus_001>
            }
        }

        def Xform "window4_right_collision_0" (
            prepend apiSchemas = ["PhysicsMassAPI"]
        )
        {
            point3f physics:centerOfMass = (0, 0, 0)
            float physics:density = 100
            float3 physics:diagonalInertia = (-49.6474, -25.617252, 92.535675)
            float physics:mass = 1.917995
            quatf physics:principalAxes = (0.0013417036, 0.9999505, -0.009495794, 0.0026349493)
            matrix4d xformOp:transform = ( (0.01, 0, 0, 0), (0, 0.421713, 0, 0), (0, 0, 1.03155, 0), (0, 0.421713, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Cube "Cube" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(1, 0, 0)]
                float[] primvars:displayOpacity = [0.5]
            }
        }

        def PhysicsRevoluteJoint "window4_right_handle_rotation_joint"
        {
            uniform token physics:axis = "Z"
            rel physics:body0 = </apartment_root/window4_right>
            rel physics:body1 = </apartment_root/window4_right_handle_rotation>
            bool physics:collisionEnabled = 0
            point3f physics:localPos0 = (0.01, 0.834107, 0)
            point3f physics:localPos1 = (0, 0, 0)
            quatf physics:localRot0 = (0.7071068, 0, -0.7071068, 0)
            quatf physics:localRot1 = (0.7071068, 0, -0.7071068, 0)
            float physics:lowerLimit = 0
            float physics:upperLimit = 90.00021
        }
    }

    def Xform "window4_right_handle_rotation" (
        prepend apiSchemas = ["PhysicsRigidBodyAPI"]
    )
    {
        bool physics:rigidBodyEnabled = 1
        matrix4d xformOp:transform = ( (2.220446049250313e-16, -1, 0, 0), (1, 2.220446049250313e-16, 0, 0), (0, 0, 1, 0), (9.438653, 5.11273, 1.095979, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]

        def Xform "window4_right_handle"
        {
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0.067235, 0, -0.057755, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Xform "window4_right_handle_visual_0" (
                prepend references = @./../meshes/usd/visual/SM_Window_Handle.usda@</SM_Window_Handle>
            )
            {
                matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]

                over "SM_Window_Handle_001" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    rel material:binding = </_materials/_Game_Materials_Laborraum_M_Metal_Chrome_M_Metal_Chrome_011>
                }
            }

            def Xform "window4_right_handle_collision_0" (
                prepend apiSchemas = ["PhysicsMassAPI"]
            )
            {
                point3f physics:centerOfMass = (0, 0, 0)
                float physics:density = 100
                float3 physics:diagonalInertia = (-0.0010971199, -0.0005559762, 0.0029443572)
                float physics:mass = 0.0031507495
                quatf physics:principalAxes = (0.012164911, 0.025290087, -0.033693083, 0.99903816)
                matrix4d xformOp:transform = ( (2.220446049250313e-16, 0, -1, 0), (0, 1, 0, 0), (1, 0, 2.220446049250313e-16, 0), (-0.029618, 0, 0.057814, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]

                def Cylinder "Cylinder" (
                    prepend apiSchemas = ["PhysicsCollisionAPI"]
                )
                {
                    float3[] extent = [(-0.008, -0.008, -0.037618), (0.008, 0.008, 0.037618)]
                    double height = 0.075236
                    bool physics:collisionEnabled = 1
                    color3f[] primvars:displayColor = [(1, 0, 0)]
                    float[] primvars:displayOpacity = [0.5]
                    double radius = 0.008
                }
            }

            def Xform "window4_right_handle_collision_1" (
                prepend apiSchemas = ["PhysicsMassAPI"]
            )
            {
                point3f physics:centerOfMass = (0, 0, 0)
                float physics:density = 100
                float3 physics:diagonalInertia = (-0.0010971199, -0.0005559762, 0.0029443572)
                float physics:mass = 0.0031507495
                quatf physics:principalAxes = (0.012164911, 0.025290087, -0.033693083, 0.99903816)
                matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]

                def Cylinder "Cylinder" (
                    prepend apiSchemas = ["PhysicsCollisionAPI"]
                )
                {
                    float3[] extent = [(-0.008, -0.008, -0.065813), (0.008, 0.008, 0.065813)]
                    double height = 0.131626
                    bool physics:collisionEnabled = 1
                    color3f[] primvars:displayColor = [(1, 0, 0)]
                    float[] primvars:displayOpacity = [0.5]
                    double radius = 0.008
                }
            }

            def Xform "window4_right_handle_collision_2" (
                prepend apiSchemas = ["PhysicsMassAPI"]
            )
            {
                point3f physics:centerOfMass = (0, 0, 0)
                float physics:density = 100
                float3 physics:diagonalInertia = (-0.0010971199, -0.0005559762, 0.0029443572)
                float physics:mass = 0.0031507495
                quatf physics:principalAxes = (0.012164911, 0.025290087, -0.033693083, 0.99903816)
                matrix4d xformOp:transform = ( (2.220446049250313e-16, 0, -1, 0), (0, 1, 0, 0), (1, 0, 2.220446049250313e-16, 0), (-0.018476, 0, -0.057813, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]

                def Cylinder "Cylinder" (
                    prepend apiSchemas = ["PhysicsCollisionAPI"]
                )
                {
                    float3[] extent = [(-0.008, -0.008, -0.026476), (0.008, 0.008, 0.026476)]
                    double height = 0.052952
                    bool physics:collisionEnabled = 1
                    color3f[] primvars:displayColor = [(1, 0, 0)]
                    float[] primvars:displayOpacity = [0.5]
                    double radius = 0.008
                }
            }
        }
    }

    def Xform "window4_left" (
        prepend apiSchemas = ["PhysicsRigidBodyAPI"]
    )
    {
        bool physics:rigidBodyEnabled = 1
        matrix4d xformOp:transform = ( (2.220446049250313e-16, -1, 0, 0), (1, 2.220446049250313e-16, 0, 0), (0, 0, 1, 0), (10.45021, 5.12111, 1.095979, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]

        def Xform "window4_left_visual_0" (
            prepend references = @./../meshes/usd/visual/SM_Window_Left.usda@</SM_Window_Left>
        )
        {
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            over "SM_Window_001" (
                prepend apiSchemas = ["MaterialBindingAPI"]
            )
            {
                rel material:binding = </_materials/_Game_Materials_Laborraum_M_Metal_Brushed_Inst_M_Metal_Brus>
            }
        }

        def Xform "window4_left_collision_0" (
            prepend apiSchemas = ["PhysicsMassAPI"]
        )
        {
            point3f physics:centerOfMass = (0, 0, 0)
            float physics:density = 100
            float3 physics:diagonalInertia = (-51.959843, -25.92772, 96.734955)
            float physics:mass = 1.9810693
            quatf physics:principalAxes = (0.004201073, 0.99949497, -0.030256249, 0.008759642)
            matrix4d xformOp:transform = ( (0.01, 0, 0, 0), (0, 0.43203, 0, 0), (0, 0, 1.03155, 0), (0, -0.43203, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Cube "Cube" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(1, 0, 0)]
                float[] primvars:displayOpacity = [0.5]
            }
        }

        def PhysicsRevoluteJoint "window4_left_handle_rotation_joint"
        {
            uniform token physics:axis = "Z"
            rel physics:body0 = </apartment_root/window4_left>
            rel physics:body1 = </apartment_root/window4_left_handle_rotation>
            bool physics:collisionEnabled = 0
            point3f physics:localPos0 = (0.01, -0.834107, 0)
            point3f physics:localPos1 = (0, 0, 0)
            quatf physics:localRot0 = (0.7071068, 0, 0.7071068, 0)
            quatf physics:localRot1 = (0.7071068, 0, 0.7071068, 0)
            float physics:lowerLimit = 0
            float physics:upperLimit = 90.00021
        }
    }

    def Xform "window4_left_handle_rotation" (
        prepend apiSchemas = ["PhysicsRigidBodyAPI"]
    )
    {
        bool physics:rigidBodyEnabled = 1
        matrix4d xformOp:transform = ( (2.220446049250313e-16, -1, 0, 0), (1, 2.220446049250313e-16, 0, 0), (0, 0, 1, 0), (9.616103, 5.11111, 1.095979, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]

        def Xform "window4_left_handle"
        {
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0.067235, 0, -0.057755, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Xform "window4_left_handle_visual_0" (
                prepend references = @./../meshes/usd/visual/SM_Window_Handle.usda@</SM_Window_Handle>
            )
            {
                matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]

                over "SM_Window_Handle_001" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    rel material:binding = </_materials/_Game_Materials_Laborraum_M_Metal_Chrome_M_Metal_Chrome_011>
                }
            }

            def Xform "window4_left_handle_collision_0" (
                prepend apiSchemas = ["PhysicsMassAPI"]
            )
            {
                point3f physics:centerOfMass = (0, 0, 0)
                float physics:density = 100
                float3 physics:diagonalInertia = (-51.959843, -25.92772, 96.734955)
                float physics:mass = 1.9810693
                quatf physics:principalAxes = (0.004201073, 0.99949497, -0.030256249, 0.008759642)
                matrix4d xformOp:transform = ( (2.220446049250313e-16, 0, -1, 0), (0, 1, 0, 0), (1, 0, 2.220446049250313e-16, 0), (-0.029618, 0, 0.057814, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]

                def Cylinder "Cylinder" (
                    prepend apiSchemas = ["PhysicsCollisionAPI"]
                )
                {
                    float3[] extent = [(-0.008, -0.008, -0.037618), (0.008, 0.008, 0.037618)]
                    double height = 0.075236
                    bool physics:collisionEnabled = 1
                    color3f[] primvars:displayColor = [(1, 0, 0)]
                    float[] primvars:displayOpacity = [0.5]
                    double radius = 0.008
                }
            }

            def Xform "window4_left_handle_collision_1" (
                prepend apiSchemas = ["PhysicsMassAPI"]
            )
            {
                point3f physics:centerOfMass = (0, 0, 0)
                float physics:density = 100
                float3 physics:diagonalInertia = (-51.959843, -25.92772, 96.734955)
                float physics:mass = 1.9810693
                quatf physics:principalAxes = (0.004201073, 0.99949497, -0.030256249, 0.008759642)
                matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]

                def Cylinder "Cylinder" (
                    prepend apiSchemas = ["PhysicsCollisionAPI"]
                )
                {
                    float3[] extent = [(-0.008, -0.008, -0.065813), (0.008, 0.008, 0.065813)]
                    double height = 0.131626
                    bool physics:collisionEnabled = 1
                    color3f[] primvars:displayColor = [(1, 0, 0)]
                    float[] primvars:displayOpacity = [0.5]
                    double radius = 0.008
                }
            }

            def Xform "window4_left_handle_collision_2" (
                prepend apiSchemas = ["PhysicsMassAPI"]
            )
            {
                point3f physics:centerOfMass = (0, 0, 0)
                float physics:density = 100
                float3 physics:diagonalInertia = (-51.959843, -25.92772, 96.734955)
                float physics:mass = 1.9810693
                quatf physics:principalAxes = (0.004201073, 0.99949497, -0.030256249, 0.008759642)
                matrix4d xformOp:transform = ( (2.220446049250313e-16, 0, -1, 0), (0, 1, 0, 0), (1, 0, 2.220446049250313e-16, 0), (-0.018476, 0, -0.057813, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]

                def Cylinder "Cylinder" (
                    prepend apiSchemas = ["PhysicsCollisionAPI"]
                )
                {
                    float3[] extent = [(-0.008, -0.008, -0.026476), (0.008, 0.008, 0.026476)]
                    double height = 0.052952
                    bool physics:collisionEnabled = 1
                    color3f[] primvars:displayColor = [(1, 0, 0)]
                    float[] primvars:displayOpacity = [0.5]
                    double radius = 0.008
                }
            }
        }
    }

    def Xform "furnitures_root"
    {
        matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (8.85, 1.75, 0, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]

        def Xform "wardrobe"
        {
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (9.7082, -0.6331, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Xform "wardrobe_visual_0" (
                prepend references = @./../meshes/usd/visual/wardrobe.usda@</wardrobe>
            )
            {
                matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]

                over "SM_Kleiderschank_001" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    rel material:binding = </_materials/_Game_Materials_Laborraum_M_Wood_Furniture_M_Wood_Furniture>

                    over "_Game_Materials_Laborraum_M_Metal_Dark_M_Metal_Dark" (
                        prepend apiSchemas = ["MaterialBindingAPI"]
                    )
                    {
                        rel material:binding = </_materials/_Game_Materials_Laborraum_M_Metal_Dark_M_Metal_Dark>
                    }

                    over "_Game_Materials_Laborraum_M_Wood_Furniture_M_Wood_Furniture" (
                        prepend apiSchemas = ["MaterialBindingAPI"]
                    )
                    {
                        rel material:binding = </_materials/_Game_Materials_Laborraum_M_Wood_Furniture_M_Wood_Furniture>
                    }
                }
            }

            def Xform "wardrobe_collision_0" (
                prepend apiSchemas = ["PhysicsMassAPI"]
            )
            {
                point3f physics:centerOfMass = (0, 0, 0)
                float physics:density = 100
                float3 physics:diagonalInertia = (-746.1319, -394.1608, 1800.9669)
                float physics:mass = 13.182874
                quatf physics:principalAxes = (0.111943655, 0.91889876, 0.32127473, -0.19969043)
                matrix4d xformOp:transform = ( (0.04, 0, 0, 0), (0, 0.04, 0, 0), (0, 0, 0.075, 0), (-0.2693, -0.4482, 0.075, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]

                def Cube "Cube" (
                    prepend apiSchemas = ["PhysicsCollisionAPI"]
                )
                {
                    float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                    bool physics:collisionEnabled = 1
                    color3f[] primvars:displayColor = [(1, 0, 0)]
                    float[] primvars:displayOpacity = [0.5]
                }
            }

            def Xform "wardrobe_collision_1" (
                prepend apiSchemas = ["PhysicsMassAPI"]
            )
            {
                point3f physics:centerOfMass = (0, 0, 0)
                float physics:density = 100
                float3 physics:diagonalInertia = (-746.1319, -394.1608, 1800.9669)
                float physics:mass = 13.182874
                quatf physics:principalAxes = (0.111943655, 0.91889876, 0.32127473, -0.19969043)
                matrix4d xformOp:transform = ( (0.04, 0, 0, 0), (0, 0.04, 0, 0), (0, 0, 0.075, 0), (0.10603, -0.4482, 0.075, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]

                def Cube "Cube" (
                    prepend apiSchemas = ["PhysicsCollisionAPI"]
                )
                {
                    float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                    bool physics:collisionEnabled = 1
                    color3f[] primvars:displayColor = [(1, 0, 0)]
                    float[] primvars:displayOpacity = [0.5]
                }
            }

            def Xform "wardrobe_collision_2" (
                prepend apiSchemas = ["PhysicsMassAPI"]
            )
            {
                point3f physics:centerOfMass = (0, 0, 0)
                float physics:density = 100
                float3 physics:diagonalInertia = (-746.1319, -394.1608, 1800.9669)
                float physics:mass = 13.182874
                quatf physics:principalAxes = (0.111943655, 0.91889876, 0.32127473, -0.19969043)
                matrix4d xformOp:transform = ( (0.04, 0, 0, 0), (0, 0.04, 0, 0), (0, 0, 0.075, 0), (-0.2693, 0.4482, 0.075, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]

                def Cube "Cube" (
                    prepend apiSchemas = ["PhysicsCollisionAPI"]
                )
                {
                    float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                    bool physics:collisionEnabled = 1
                    color3f[] primvars:displayColor = [(1, 0, 0)]
                    float[] primvars:displayOpacity = [0.5]
                }
            }

            def Xform "wardrobe_collision_3" (
                prepend apiSchemas = ["PhysicsMassAPI"]
            )
            {
                point3f physics:centerOfMass = (0, 0, 0)
                float physics:density = 100
                float3 physics:diagonalInertia = (-746.1319, -394.1608, 1800.9669)
                float physics:mass = 13.182874
                quatf physics:principalAxes = (0.111943655, 0.91889876, 0.32127473, -0.19969043)
                matrix4d xformOp:transform = ( (0.04, 0, 0, 0), (0, 0.04, 0, 0), (0, 0, 0.075, 0), (0.10603, 0.4482, 0.075, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]

                def Cube "Cube" (
                    prepend apiSchemas = ["PhysicsCollisionAPI"]
                )
                {
                    float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                    bool physics:collisionEnabled = 1
                    color3f[] primvars:displayColor = [(1, 0, 0)]
                    float[] primvars:displayOpacity = [0.5]
                }
            }

            def Xform "wardrobe_collision_4" (
                prepend apiSchemas = ["PhysicsMassAPI"]
            )
            {
                point3f physics:centerOfMass = (0, 0, 0)
                float physics:density = 100
                float3 physics:diagonalInertia = (-746.1319, -394.1608, 1800.9669)
                float physics:mass = 13.182874
                quatf physics:principalAxes = (0.111943655, 0.91889876, 0.32127473, -0.19969043)
                matrix4d xformOp:transform = ( (0.2435, 0, 0, 0), (0, 0.5, 0, 0), (0, 0, 0.01345, 0), (-0.0805, 0, 0.16345, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]

                def Cube "Cube" (
                    prepend apiSchemas = ["PhysicsCollisionAPI"]
                )
                {
                    float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                    bool physics:collisionEnabled = 1
                    color3f[] primvars:displayColor = [(1, 0, 0)]
                    float[] primvars:displayOpacity = [0.5]
                }
            }

            def Xform "wardrobe_collision_5" (
                prepend apiSchemas = ["PhysicsMassAPI"]
            )
            {
                point3f physics:centerOfMass = (0, 0, 0)
                float physics:density = 100
                float3 physics:diagonalInertia = (-746.1319, -394.1608, 1800.9669)
                float physics:mass = 13.182874
                quatf physics:principalAxes = (0.111943655, 0.91889876, 0.32127473, -0.19969043)
                matrix4d xformOp:transform = ( (0.2435, 0, 0, 0), (0, 0.01035, 0, 0), (0, 0, 0.825, 0), (-0.0805, 0.48965, 0.975, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]

                def Cube "Cube" (
                    prepend apiSchemas = ["PhysicsCollisionAPI"]
                )
                {
                    float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                    bool physics:collisionEnabled = 1
                    color3f[] primvars:displayColor = [(1, 0, 0)]
                    float[] primvars:displayOpacity = [0.5]
                }
            }

            def Xform "wardrobe_collision_6" (
                prepend apiSchemas = ["PhysicsMassAPI"]
            )
            {
                point3f physics:centerOfMass = (0, 0, 0)
                float physics:density = 100
                float3 physics:diagonalInertia = (-746.1319, -394.1608, 1800.9669)
                float physics:mass = 13.182874
                quatf physics:principalAxes = (0.111943655, 0.91889876, 0.32127473, -0.19969043)
                matrix4d xformOp:transform = ( (0.2159, 0, 0, 0), (0, 0.009284, 0, 0), (0, 0, 0.825, 0), (-0.0896, 0, 0.975, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]

                def Cube "Cube" (
                    prepend apiSchemas = ["PhysicsCollisionAPI"]
                )
                {
                    float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                    bool physics:collisionEnabled = 1
                    color3f[] primvars:displayColor = [(1, 0, 0)]
                    float[] primvars:displayOpacity = [0.5]
                }
            }

            def Xform "wardrobe_collision_7" (
                prepend apiSchemas = ["PhysicsMassAPI"]
            )
            {
                point3f physics:centerOfMass = (0, 0, 0)
                float physics:density = 100
                float3 physics:diagonalInertia = (-746.1319, -394.1608, 1800.9669)
                float physics:mass = 13.182874
                quatf physics:principalAxes = (0.111943655, 0.91889876, 0.32127473, -0.19969043)
                matrix4d xformOp:transform = ( (0.2435, 0, 0, 0), (0, 0.01035, 0, 0), (0, 0, 0.825, 0), (-0.0805, -0.48965, 0.975, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]

                def Cube "Cube" (
                    prepend apiSchemas = ["PhysicsCollisionAPI"]
                )
                {
                    float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                    bool physics:collisionEnabled = 1
                    color3f[] primvars:displayColor = [(1, 0, 0)]
                    float[] primvars:displayOpacity = [0.5]
                }
            }

            def Xform "wardrobe_collision_8" (
                prepend apiSchemas = ["PhysicsMassAPI"]
            )
            {
                point3f physics:centerOfMass = (0, 0, 0)
                float physics:density = 100
                float3 physics:diagonalInertia = (-746.1319, -394.1608, 1800.9669)
                float physics:mass = 13.182874
                quatf physics:principalAxes = (0.111943655, 0.91889876, 0.32127473, -0.19969043)
                matrix4d xformOp:transform = ( (0.01835, 0, 0, 0), (0, 0.5, 0, 0), (0, 0, 0.825, 0), (0.14465, 0, 0.975, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]

                def Cube "Cube" (
                    prepend apiSchemas = ["PhysicsCollisionAPI"]
                )
                {
                    float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                    bool physics:collisionEnabled = 1
                    color3f[] primvars:displayColor = [(1, 0, 0)]
                    float[] primvars:displayOpacity = [0.5]
                }
            }

            def Xform "wardrobe_collision_9" (
                prepend apiSchemas = ["PhysicsMassAPI"]
            )
            {
                point3f physics:centerOfMass = (0, 0, 0)
                float physics:density = 100
                float3 physics:diagonalInertia = (-746.1319, -394.1608, 1800.9669)
                float physics:mass = 13.182874
                quatf physics:principalAxes = (0.111943655, 0.91889876, 0.32127473, -0.19969043)
                matrix4d xformOp:transform = ( (0.01835, 0, 0, 0), (0, 0.5, 0, 0), (0, 0, 0.825, 0), (0.14465, 0, 0.975, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]

                def Cube "Cube" (
                    prepend apiSchemas = ["PhysicsCollisionAPI"]
                )
                {
                    float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                    bool physics:collisionEnabled = 1
                    color3f[] primvars:displayColor = [(1, 0, 0)]
                    float[] primvars:displayOpacity = [0.5]
                }
            }

            def Xform "wardrobe_collision_10" (
                prepend apiSchemas = ["PhysicsMassAPI"]
            )
            {
                point3f physics:centerOfMass = (0, 0, 0)
                float physics:density = 100
                float3 physics:diagonalInertia = (-746.1319, -394.1608, 1800.9669)
                float physics:mass = 13.182874
                quatf physics:principalAxes = (0.111943655, 0.91889876, 0.32127473, -0.19969043)
                matrix4d xformOp:transform = ( (0.2435, 0, 0, 0), (0, 0.5, 0, 0), (0, 0, 0.0135, 0), (-0.0805, 0, 1.7865, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]

                def Cube "Cube" (
                    prepend apiSchemas = ["PhysicsCollisionAPI"]
                )
                {
                    float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                    bool physics:collisionEnabled = 1
                    color3f[] primvars:displayColor = [(1, 0, 0)]
                    float[] primvars:displayOpacity = [0.5]
                }
            }

            def Xform "wardrobe_collision_11" (
                prepend apiSchemas = ["PhysicsMassAPI"]
            )
            {
                point3f physics:centerOfMass = (0, 0, 0)
                float physics:density = 100
                float3 physics:diagonalInertia = (-746.1319, -394.1608, 1800.9669)
                float physics:mass = 13.182874
                quatf physics:principalAxes = (0.111943655, 0.91889876, 0.32127473, -0.19969043)
                matrix4d xformOp:transform = ( (0.21495, 0, 0, 0), (0, 0.2349785, 0, 0), (0, 0, 0.0059, 0), (-0.08861, -0.244343, 0.5727, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]

                def Cube "Cube" (
                    prepend apiSchemas = ["PhysicsCollisionAPI"]
                )
                {
                    float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                    bool physics:collisionEnabled = 1
                    color3f[] primvars:displayColor = [(1, 0, 0)]
                    float[] primvars:displayOpacity = [0.5]
                }
            }

            def Xform "wardrobe_collision_12" (
                prepend apiSchemas = ["PhysicsMassAPI"]
            )
            {
                point3f physics:centerOfMass = (0, 0, 0)
                float physics:density = 100
                float3 physics:diagonalInertia = (-746.1319, -394.1608, 1800.9669)
                float physics:mass = 13.182874
                quatf physics:principalAxes = (0.111943655, 0.91889876, 0.32127473, -0.19969043)
                matrix4d xformOp:transform = ( (0.21495, 0, 0, 0), (0, 0.2349785, 0, 0), (0, 0, 0.0059, 0), (-0.08861, -0.244343, 0.974836, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]

                def Cube "Cube" (
                    prepend apiSchemas = ["PhysicsCollisionAPI"]
                )
                {
                    float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                    bool physics:collisionEnabled = 1
                    color3f[] primvars:displayColor = [(1, 0, 0)]
                    float[] primvars:displayOpacity = [0.5]
                }
            }

            def Xform "wardrobe_collision_13" (
                prepend apiSchemas = ["PhysicsMassAPI"]
            )
            {
                point3f physics:centerOfMass = (0, 0, 0)
                float physics:density = 100
                float3 physics:diagonalInertia = (-746.1319, -394.1608, 1800.9669)
                float physics:mass = 13.182874
                quatf physics:principalAxes = (0.111943655, 0.91889876, 0.32127473, -0.19969043)
                matrix4d xformOp:transform = ( (0.21495, 0, 0, 0), (0, 0.2349785, 0, 0), (0, 0, 0.0059, 0), (-0.08861, -0.244343, 1.37686, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]

                def Cube "Cube" (
                    prepend apiSchemas = ["PhysicsCollisionAPI"]
                )
                {
                    float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                    bool physics:collisionEnabled = 1
                    color3f[] primvars:displayColor = [(1, 0, 0)]
                    float[] primvars:displayOpacity = [0.5]
                }
            }

            def Xform "wardrobe_collision_14" (
                prepend apiSchemas = ["PhysicsMassAPI"]
            )
            {
                point3f physics:centerOfMass = (0, 0, 0)
                float physics:density = 100
                float3 physics:diagonalInertia = (-746.1319, -394.1608, 1800.9669)
                float physics:mass = 13.182874
                quatf physics:principalAxes = (0.111943655, 0.91889876, 0.32127473, -0.19969043)
                matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, -0.0000036732051031940216, 0.9999999999932537, 0), (0, -0.9999999999932537, -0.0000036732051031940216, 0), (-0.086923, 0.244373, 1.66898, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]

                def Cylinder "Cylinder" (
                    prepend apiSchemas = ["PhysicsCollisionAPI"]
                )
                {
                    float3[] extent = [(-0.0075, -0.0075, -0.2349485), (0.0075, 0.0075, 0.2349485)]
                    double height = 0.469897
                    bool physics:collisionEnabled = 1
                    color3f[] primvars:displayColor = [(1, 0, 0)]
                    float[] primvars:displayOpacity = [0.5]
                    double radius = 0.0075
                }
            }

            def PhysicsRevoluteJoint "wardrobe_door_left_joint"
            {
                uniform token physics:axis = "Z"
                rel physics:body0 = </apartment_root/furnitures_root/wardrobe>
                rel physics:body1 = </apartment_root/wardrobe_door_left>
                bool physics:collisionEnabled = 0
                point3f physics:localPos0 = (-0.3246, 0.5, 0)
                point3f physics:localPos1 = (0, 0, 0)
                quatf physics:localRot0 = (0, 0, 1, 0)
                quatf physics:localRot1 = (0, 0, 1, 0)
                float physics:lowerLimit = 0
                float physics:upperLimit = 90.00021
            }

            def PhysicsRevoluteJoint "wardrobe_door_right_joint"
            {
                uniform token physics:axis = "Z"
                rel physics:body0 = </apartment_root/furnitures_root/wardrobe>
                rel physics:body1 = </apartment_root/wardrobe_door_right>
                bool physics:collisionEnabled = 0
                point3f physics:localPos0 = (-0.3246, -0.5, 0)
                point3f physics:localPos1 = (0, 0, 0)
                quatf physics:localRot0 = (1, 0, 0, 0)
                quatf physics:localRot1 = (1, 0, 0, 0)
                float physics:lowerLimit = 0
                float physics:upperLimit = 90.00021
            }
        }

        def Xform "armchair"
        {
            matrix4d xformOp:transform = ( (-0.34205568489293814, 0.9396796839521557, 0, 0), (-0.9396796839521557, -0.34205568489293814, 0, 0), (0, 0, 1, 0), (7.9688, -0.3791, 0.3559428, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Xform "armchair_visual_0" (
                prepend references = @./../meshes/usd/visual/armchair.usda@</armchair>
            )
            {
                matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]

                over "SM_Sessel" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    rel material:binding = </_materials/_Game_Materials_Laborraum_M_Sessel_M_Sessel>
                }
            }

            def Xform "armchair_collision_0" (
                prepend apiSchemas = ["PhysicsMassAPI"]
                prepend references = @./../meshes/usd/collision/armchair.usda@</armchair>
            )
            {
                point3f physics:centerOfMass = (0, 0, 0)
                float physics:density = 100
                float3 physics:diagonalInertia = (-16.055712, -13.44603, 47.38336)
                float physics:mass = 26.922188
                quatf physics:principalAxes = (-0.18476537, -0.15911406, 0.29576153, 0.92361766)
                matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]

                over "armchair" (
                    prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI"]
                )
                {
                    uniform token physics:approximation = "convexHull"
                    bool physics:collisionEnabled = 1
                    color3f[] primvars:displayColor = [(1, 0, 0)]
                    float[] primvars:displayOpacity = [0.5]
                }
            }
        }

        def Xform "sofa"
        {
            matrix4d xformOp:transform = ( (2.220446049250313e-16, 1, 0, 0), (-1, 2.220446049250313e-16, 0, 0), (0, 0, 1, 0), (8.1986, 2.4096, 0.35732983, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Xform "sofa_visual_0" (
                prepend references = @./../meshes/usd/visual/sofa.usda@</sofa>
            )
            {
                matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]

                over "SM_Sofa" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    rel material:binding = </_materials/_Game_Materials_Laborraum_M_Basic_Black_M_Basic_Black>

                    over "_Game_Materials_Laborraum_M_Fabric_Sofa_Inst_M_Fabric_Sofa_Inst" (
                        prepend apiSchemas = ["MaterialBindingAPI"]
                    )
                    {
                        rel material:binding = </_materials/_Game_Materials_Laborraum_M_Fabric_Sofa_Inst_M_Fabric_Sofa_Inst>
                    }

                    over "_Game_Materials_Laborraum_M_Basic_Black_M_Basic_Black" (
                        prepend apiSchemas = ["MaterialBindingAPI"]
                    )
                    {
                        rel material:binding = </_materials/_Game_Materials_Laborraum_M_Basic_Black_M_Basic_Black>
                    }
                }
            }

            def Xform "sofa_collision_0" (
                prepend apiSchemas = ["PhysicsMassAPI"]
                prepend references = @./../meshes/usd/collision/sofa.usda@</sofa>
            )
            {
                point3f physics:centerOfMass = (0, 0, 0)
                float physics:density = 100
                float3 physics:diagonalInertia = (-217.03027, -187.9567, 396.00897)
                float physics:mass = 101.21949
                quatf physics:principalAxes = (0.16485168, 0.9432439, 0.18919355, 0.21753317)
                matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]

                over "sofa" (
                    prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI"]
                )
                {
                    uniform token physics:approximation = "convexHull"
                    bool physics:collisionEnabled = 1
                    color3f[] primvars:displayColor = [(1, 0, 0)]
                    float[] primvars:displayOpacity = [0.5]
                }
            }
        }

        def Xform "coffee_table"
        {
            matrix4d xformOp:transform = ( (-0.0000036732051031940216, 0.9999999999932537, 0, 0), (-0.9999999999932537, -0.0000036732051031940216, 0, 0), (0, 0, 1, 0), (7.8034, 1.02957, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Xform "coffee_table_visual_0" (
                prepend references = @./../meshes/usd/visual/coffee_table.usda@</coffee_table>
            )
            {
                matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]

                over "SM_Couchtisch_002" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    rel material:binding = </_materials/_Game_Materials_Laborraum_M_Wood_Furniture_M_Wood_Furniture>
                }
            }

            def Xform "coffee_table_collision_0" (
                prepend apiSchemas = ["PhysicsMassAPI"]
            )
            {
                point3f physics:centerOfMass = (0, 0, 0)
                float physics:density = 100
                float3 physics:diagonalInertia = (-21.779734, -21.52601, 78.153206)
                float physics:mass = 24.32211
                quatf physics:principalAxes = (0.8364141, -0.47078913, 0.14386888, -0.24097893)
                matrix4d xformOp:transform = ( (0.29, 0, 0, 0), (0, 0.54, 0, 0), (0, 0, 0.02977, 0), (0, 0, 0.02977, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]

                def Cube "Cube" (
                    prepend apiSchemas = ["PhysicsCollisionAPI"]
                )
                {
                    float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                    bool physics:collisionEnabled = 1
                    color3f[] primvars:displayColor = [(1, 0, 0)]
                    float[] primvars:displayOpacity = [0.5]
                }
            }

            def Xform "coffee_table_collision_1" (
                prepend apiSchemas = ["PhysicsMassAPI"]
            )
            {
                point3f physics:centerOfMass = (0, 0, 0)
                float physics:density = 100
                float3 physics:diagonalInertia = (-21.779734, -21.52601, 78.153206)
                float physics:mass = 24.32211
                quatf physics:principalAxes = (0.8364141, -0.47078913, 0.14386888, -0.24097893)
                matrix4d xformOp:transform = ( (0.3053, 0, 0, 0), (0, 0.2, 0, 0), (0, 0, 0.00598, 0), (-0.022101, 0, 0.06552, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]

                def Cube "Cube" (
                    prepend apiSchemas = ["PhysicsCollisionAPI"]
                )
                {
                    float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                    bool physics:collisionEnabled = 1
                    color3f[] primvars:displayColor = [(1, 0, 0)]
                    float[] primvars:displayOpacity = [0.5]
                }
            }

            def Xform "coffee_table_collision_2" (
                prepend apiSchemas = ["PhysicsMassAPI"]
            )
            {
                point3f physics:centerOfMass = (0, 0, 0)
                float physics:density = 100
                float3 physics:diagonalInertia = (-21.779734, -21.52601, 78.153206)
                float physics:mass = 24.32211
                quatf physics:principalAxes = (0.8364141, -0.47078913, 0.14386888, -0.24097893)
                matrix4d xformOp:transform = ( (0.35, 0, 0, 0), (0, 0.2, 0, 0), (0, 0, 0.16, 0), (0, 0.39975, 0.220625, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]

                def Cube "Cube" (
                    prepend apiSchemas = ["PhysicsCollisionAPI"]
                )
                {
                    float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                    bool physics:collisionEnabled = 1
                    color3f[] primvars:displayColor = [(1, 0, 0)]
                    float[] primvars:displayOpacity = [0.5]
                }
            }

            def Xform "coffee_table_collision_3" (
                prepend apiSchemas = ["PhysicsMassAPI"]
            )
            {
                point3f physics:centerOfMass = (0, 0, 0)
                float physics:density = 100
                float3 physics:diagonalInertia = (-21.779734, -21.52601, 78.153206)
                float physics:mass = 24.32211
                quatf physics:principalAxes = (0.8364141, -0.47078913, 0.14386888, -0.24097893)
                matrix4d xformOp:transform = ( (0.35, 0, 0, 0), (0, 0.2, 0, 0), (0, 0, 0.16, 0), (0, -0.39975, 0.220625, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]

                def Cube "Cube" (
                    prepend apiSchemas = ["PhysicsCollisionAPI"]
                )
                {
                    float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                    bool physics:collisionEnabled = 1
                    color3f[] primvars:displayColor = [(1, 0, 0)]
                    float[] primvars:displayOpacity = [0.5]
                }
            }

            def Xform "coffee_table_collision_4" (
                prepend apiSchemas = ["PhysicsMassAPI"]
            )
            {
                point3f physics:centerOfMass = (0, 0, 0)
                float physics:density = 100
                float3 physics:diagonalInertia = (-21.779734, -21.52601, 78.153206)
                float physics:mass = 24.32211
                quatf physics:principalAxes = (0.8364141, -0.47078913, 0.14386888, -0.24097893)
                matrix4d xformOp:transform = ( (0.03365, 0, 0, 0), (0, 0.2, 0, 0), (0, 0, 0.16, 0), (0.316343, 0, 0.22, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]

                def Cube "Cube" (
                    prepend apiSchemas = ["PhysicsCollisionAPI"]
                )
                {
                    float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                    bool physics:collisionEnabled = 1
                    color3f[] primvars:displayColor = [(1, 0, 0)]
                    float[] primvars:displayOpacity = [0.5]
                }
            }

            def Xform "coffee_table_collision_5" (
                prepend apiSchemas = ["PhysicsMassAPI"]
            )
            {
                point3f physics:centerOfMass = (0, 0, 0)
                float physics:density = 100
                float3 physics:diagonalInertia = (-21.779734, -21.52601, 78.153206)
                float physics:mass = 24.32211
                quatf physics:principalAxes = (0.8364141, -0.47078913, 0.14386888, -0.24097893)
                matrix4d xformOp:transform = ( (0.35, 0, 0, 0), (0, 0.6, 0, 0), (0, 0, 0.01, 0), (0, 0, 0.39, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]

                def Cube "Cube" (
                    prepend apiSchemas = ["PhysicsCollisionAPI"]
                )
                {
                    float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                    bool physics:collisionEnabled = 1
                    color3f[] primvars:displayColor = [(1, 0, 0)]
                    float[] primvars:displayOpacity = [0.5]
                }
            }

            def PhysicsPrismaticJoint "coffee_table_drawer_joint"
            {
                uniform token physics:axis = "Z"
                rel physics:body0 = </apartment_root/furnitures_root/coffee_table>
                rel physics:body1 = </apartment_root/coffee_table_drawer>
                bool physics:collisionEnabled = 0
                point3f physics:localPos0 = (0, 0, 0)
                point3f physics:localPos1 = (0, 0, 0)
                quatf physics:localRot0 = (0.7071068, 0, -0.7071068, 0)
                quatf physics:localRot1 = (0.7071068, 0, -0.7071068, 0)
                float physics:lowerLimit = 0
                float physics:upperLimit = 0.5
            }
        }

        def Xform "bedside_table"
        {
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (7.211, 0.1296, 0.22990467, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Xform "bedside_table_visual_0" (
                prepend references = @./../meshes/usd/visual/bedside_table.usda@</bedside_table>
            )
            {
                matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]

                over "SM_Nachttisch" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    rel material:binding = </_materials/_Game_Materials_Laborraum_M_Nachttisch_M_Nachttisch>
                }
            }

            def Xform "bedside_table_collision_0" (
                prepend apiSchemas = ["PhysicsMassAPI"]
            )
            {
                point3f physics:centerOfMass = (0, 0, 0)
                float physics:density = 100
                float3 physics:diagonalInertia = (-1.2604765, -1.0485914, 2.5133364)
                float physics:mass = 3.7580113
                quatf physics:principalAxes = (0.8530958, -0.3546561, 0.14690343, -0.35336372)
                matrix4d xformOp:transform = ( (0.156, 0, 0, 0), (0, 0.156, 0, 0), (0, 0, 0.23, 0), (0, 0, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]

                def Cube "Cube" (
                    prepend apiSchemas = ["PhysicsCollisionAPI"]
                )
                {
                    float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                    bool physics:collisionEnabled = 1
                    color3f[] primvars:displayColor = [(1, 0, 0)]
                    float[] primvars:displayOpacity = [0.5]
                }
            }
        }
    }

    def Xform "wardrobe_door_left" (
        prepend apiSchemas = ["PhysicsRigidBodyAPI"]
    )
    {
        bool physics:rigidBodyEnabled = 1
        matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (18.2336, 1.6169, 0, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]

        def Xform "wardrobe_door_left_visual_0" (
            prepend references = @./../meshes/usd/visual/wardrobe_door_left.usda@</wardrobe_door_left>
        )
        {
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            over "SM_Kleiderschrank_TurLinks" (
                prepend apiSchemas = ["MaterialBindingAPI"]
            )
            {
                rel material:binding = </_materials/_Game_Materials_Laborraum_M_Metal_Chrome_M_Metal_Chrome>

                over "_Game_Materials_Laborraum_M_Metal_Chrome_M_Metal_Chrome" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    rel material:binding = </_materials/_Game_Materials_Laborraum_M_Metal_Chrome_M_Metal_Chrome>
                }

                over "_Game_Materials_Laborraum_M_Wood_Furniture_M_Wood_Furniture" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    rel material:binding = </_materials/_Game_Materials_Laborraum_M_Wood_Furniture_M_Wood_Furniture>
                }
            }
        }

        def Xform "wardrobe_door_left_collision_0" (
            prepend apiSchemas = ["PhysicsMassAPI"]
        )
        {
            point3f physics:centerOfMass = (0, 0, 0)
            float physics:density = 100
            float3 physics:diagonalInertia = (-115.332214, -57.57123, 268.8571)
            float physics:mass = 1.0603696
            quatf physics:principalAxes = (0.19835447, 0.9767679, 0.041557975, 0.06966248)
            matrix4d xformOp:transform = ( (0.0064835, 0, 0, 0), (0, 0.247719, 0, 0), (0, 0, 0.82422, 0), (-0.006435, -0.2485, 0.975, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Cube "Cube" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(1, 0, 0)]
                float[] primvars:displayOpacity = [0.5]
            }
        }

        def Xform "wardrobe_door_left_handle"
        {
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (-0.032089, -0.460513, 0.973703, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Xform "wardrobe_door_left_handle_visual_0" (
                prepend references = @./../meshes/usd/visual/wardrobe_door_handle.usda@</wardrobe_door_handle>
            )
            {
                matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]

                over "SM_Kleiderschrank_GriffLinks" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    rel material:binding = </_materials/_Game_Materials_Laborraum_M_Metal_Dark_M_Metal_Dark>
                }
            }

            def Xform "wardrobe_door_left_handle_collision_0" (
                prepend apiSchemas = ["PhysicsMassAPI"]
            )
            {
                point3f physics:centerOfMass = (0, 0, 0)
                float physics:density = 100
                float3 physics:diagonalInertia = (-0.0013681294, -0.00085313024, 0.0027672204)
                float physics:mass = 0.0035238957
                quatf physics:principalAxes = (0.10190162, 0.99325514, 0.024122523, 0.04978378)
                matrix4d xformOp:transform = ( (0.016778, 0, 0, 0), (0, 0.007541, 0, 0), (0, 0, 0.0072935, 0), (0.010421, 0, 0.059003, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]

                def Cube "Cube" (
                    prepend apiSchemas = ["PhysicsCollisionAPI"]
                )
                {
                    float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                    bool physics:collisionEnabled = 1
                    color3f[] primvars:displayColor = [(1, 0, 0)]
                    float[] primvars:displayOpacity = [0.5]
                }
            }

            def Xform "wardrobe_door_left_handle_collision_1" (
                prepend apiSchemas = ["PhysicsMassAPI"]
            )
            {
                point3f physics:centerOfMass = (0, 0, 0)
                float physics:density = 100
                float3 physics:diagonalInertia = (-0.0013681294, -0.00085313024, 0.0027672204)
                float physics:mass = 0.0035238957
                quatf physics:principalAxes = (0.10190162, 0.99325514, 0.024122523, 0.04978378)
                matrix4d xformOp:transform = ( (0.007243, 0, 0, 0), (0, 0.007541, 0, 0), (0, 0, 0.065, 0), (-0.0136, 0, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]

                def Cube "Cube" (
                    prepend apiSchemas = ["PhysicsCollisionAPI"]
                )
                {
                    float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                    bool physics:collisionEnabled = 1
                    color3f[] primvars:displayColor = [(1, 0, 0)]
                    float[] primvars:displayOpacity = [0.5]
                }
            }

            def Xform "wardrobe_door_left_handle_collision_2" (
                prepend apiSchemas = ["PhysicsMassAPI"]
            )
            {
                point3f physics:centerOfMass = (0, 0, 0)
                float physics:density = 100
                float3 physics:diagonalInertia = (-0.0013681294, -0.00085313024, 0.0027672204)
                float physics:mass = 0.0035238957
                quatf physics:principalAxes = (0.10190162, 0.99325514, 0.024122523, 0.04978378)
                matrix4d xformOp:transform = ( (0.016778, 0, 0, 0), (0, 0.007541, 0, 0), (0, 0, 0.0072935, 0), (0.010421, 0, -0.059003, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]

                def Cube "Cube" (
                    prepend apiSchemas = ["PhysicsCollisionAPI"]
                )
                {
                    float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                    bool physics:collisionEnabled = 1
                    color3f[] primvars:displayColor = [(1, 0, 0)]
                    float[] primvars:displayOpacity = [0.5]
                }
            }
        }
    }

    def Xform "wardrobe_door_right" (
        prepend apiSchemas = ["PhysicsRigidBodyAPI"]
    )
    {
        bool physics:rigidBodyEnabled = 1
        matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (18.2336, 0.6169, 0, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]

        def Xform "wardrobe_door_right_visual_0" (
            prepend references = @./../meshes/usd/visual/wardrobe_door_right.usda@</wardrobe_door_right>
        )
        {
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            over "SM_Kleiderschrank_TurRechts" (
                prepend apiSchemas = ["MaterialBindingAPI"]
            )
            {
                rel material:binding = </_materials/_Game_Materials_Laborraum_M_Metal_Chrome_M_Metal_Chrome>

                over "_Game_Materials_Laborraum_M_Metal_Chrome_M_Metal_Chrome" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    rel material:binding = </_materials/_Game_Materials_Laborraum_M_Metal_Chrome_M_Metal_Chrome>
                }

                over "_Game_Materials_Laborraum_M_Wood_Furniture_M_Wood_Furniture" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    rel material:binding = </_materials/_Game_Materials_Laborraum_M_Wood_Furniture_M_Wood_Furniture>
                }
            }
        }

        def Xform "wardrobe_door_right_collision_0" (
            prepend apiSchemas = ["PhysicsMassAPI"]
        )
        {
            point3f physics:centerOfMass = (0, 0, 0)
            float physics:density = 100
            float3 physics:diagonalInertia = (-115.32243, -57.57943, 268.78146)
            float physics:mass = 1.0602248
            quatf physics:principalAxes = (0.19837707, 0.9767634, 0.04155812, 0.06966126)
            matrix4d xformOp:transform = ( (0.0064835, 0, 0, 0), (0, 0.247719, 0, 0), (0, 0, 0.82422, 0), (-0.006435, 0.2485, 0.975, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Cube "Cube" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(1, 0, 0)]
                float[] primvars:displayOpacity = [0.5]
            }
        }

        def Xform "wardrobe_door_right_handle"
        {
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (-0.032089, 0.460513, 0.973703, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Xform "wardrobe_door_right_handle_visual_0" (
                prepend references = @./../meshes/usd/visual/wardrobe_door_handle.usda@</wardrobe_door_handle>
            )
            {
                matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]

                over "SM_Kleiderschrank_GriffLinks" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    rel material:binding = </_materials/_Game_Materials_Laborraum_M_Metal_Dark_M_Metal_Dark>
                }
            }

            def Xform "wardrobe_door_right_handle_collision_0" (
                prepend apiSchemas = ["PhysicsMassAPI"]
            )
            {
                point3f physics:centerOfMass = (0, 0, 0)
                float physics:density = 100
                float3 physics:diagonalInertia = (-115.32243, -57.57943, 268.78146)
                float physics:mass = 1.0602248
                quatf physics:principalAxes = (0.19837707, 0.9767634, 0.04155812, 0.06966126)
                matrix4d xformOp:transform = ( (0.016778, 0, 0, 0), (0, 0.007541, 0, 0), (0, 0, 0.0072935, 0), (0.010421, 0, 0.059003, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]

                def Cube "Cube" (
                    prepend apiSchemas = ["PhysicsCollisionAPI"]
                )
                {
                    float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                    bool physics:collisionEnabled = 1
                    color3f[] primvars:displayColor = [(1, 0, 0)]
                    float[] primvars:displayOpacity = [0.5]
                }
            }

            def Xform "wardrobe_door_right_handle_collision_1" (
                prepend apiSchemas = ["PhysicsMassAPI"]
            )
            {
                point3f physics:centerOfMass = (0, 0, 0)
                float physics:density = 100
                float3 physics:diagonalInertia = (-115.32243, -57.57943, 268.78146)
                float physics:mass = 1.0602248
                quatf physics:principalAxes = (0.19837707, 0.9767634, 0.04155812, 0.06966126)
                matrix4d xformOp:transform = ( (0.007243, 0, 0, 0), (0, 0.007541, 0, 0), (0, 0, 0.065, 0), (-0.0136, 0, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]

                def Cube "Cube" (
                    prepend apiSchemas = ["PhysicsCollisionAPI"]
                )
                {
                    float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                    bool physics:collisionEnabled = 1
                    color3f[] primvars:displayColor = [(1, 0, 0)]
                    float[] primvars:displayOpacity = [0.5]
                }
            }

            def Xform "wardrobe_door_right_handle_collision_2" (
                prepend apiSchemas = ["PhysicsMassAPI"]
            )
            {
                point3f physics:centerOfMass = (0, 0, 0)
                float physics:density = 100
                float3 physics:diagonalInertia = (-115.32243, -57.57943, 268.78146)
                float physics:mass = 1.0602248
                quatf physics:principalAxes = (0.19837707, 0.9767634, 0.04155812, 0.06966126)
                matrix4d xformOp:transform = ( (0.016778, 0, 0, 0), (0, 0.007541, 0, 0), (0, 0, 0.0072935, 0), (0.010421, 0, -0.059003, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]

                def Cube "Cube" (
                    prepend apiSchemas = ["PhysicsCollisionAPI"]
                )
                {
                    float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                    bool physics:collisionEnabled = 1
                    color3f[] primvars:displayColor = [(1, 0, 0)]
                    float[] primvars:displayOpacity = [0.5]
                }
            }
        }
    }

    def Xform "coffee_table_drawer" (
        prepend apiSchemas = ["PhysicsRigidBodyAPI"]
    )
    {
        bool physics:rigidBodyEnabled = 1
        matrix4d xformOp:transform = ( (-0.0000036732051031940216, 0.9999999999932537, 0, 0), (-0.9999999999932537, -0.0000036732051031940216, 0, 0), (0, 0, 1, 0), (16.653399999999998, 2.77957, 0, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]

        def Xform "coffee_table_drawer_visual_0" (
            prepend references = @./../meshes/usd/visual/coffee_table_drawer.usda@</coffee_table_drawer>
        )
        {
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            over "SM_Couchtisch_Schublade" (
                prepend apiSchemas = ["MaterialBindingAPI"]
            )
            {
                rel material:binding = </_materials/_Game_Materials_Laborraum_M_Wood_Furniture_M_Wood_Furniture>
            }
        }

        def Xform "coffee_table_drawer_collision_0" (
            prepend apiSchemas = ["PhysicsMassAPI"]
        )
        {
            point3f physics:centerOfMass = (0, 0, 0)
            float physics:density = 100
            float3 physics:diagonalInertia = (-5.339381, -3.7494364, 14.008721)
            float physics:mass = 1.4823239
            quatf physics:principalAxes = (-0.13019295, 0.9778988, -0.089226015, -0.13712206)
            matrix4d xformOp:transform = ( (0.0107, 0, 0, 0), (0, 0.198, 0, 0), (0, 0, 0.157845, 0), (-0.338806, 0, 0.21892, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Cube "Cube" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(1, 0, 0)]
                float[] primvars:displayOpacity = [0.5]
            }
        }

        def Xform "coffee_table_drawer_collision_1" (
            prepend apiSchemas = ["PhysicsMassAPI"]
        )
        {
            point3f physics:centerOfMass = (0, 0, 0)
            float physics:density = 100
            float3 physics:diagonalInertia = (-5.339381, -3.7494364, 14.008721)
            float physics:mass = 1.4823239
            quatf physics:principalAxes = (-0.13019295, 0.9778988, -0.089226015, -0.13712206)
            matrix4d xformOp:transform = ( (0.27605, 0, 0, 0), (0, 0.1727, 0, 0), (0, 0, 0.01072, 0), (-0.051066, 0, 0.107979, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Cube "Cube" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(1, 0, 0)]
                float[] primvars:displayOpacity = [0.5]
            }
        }

        def Xform "coffee_table_drawer_collision_2" (
            prepend apiSchemas = ["PhysicsMassAPI"]
        )
        {
            point3f physics:centerOfMass = (0, 0, 0)
            float physics:density = 100
            float3 physics:diagonalInertia = (-5.339381, -3.7494364, 14.008721)
            float physics:mass = 1.4823239
            quatf physics:principalAxes = (-0.13019295, 0.9778988, -0.089226015, -0.13712206)
            matrix4d xformOp:transform = ( (0.0107, 0, 0, 0), (0, 0.1743, 0, 0), (0, 0, 0.1199, 0), (0.207974, 0, 0.238907, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Cube "Cube" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(1, 0, 0)]
                float[] primvars:displayOpacity = [0.5]
            }
        }

        def Xform "coffee_table_drawer_collision_3" (
            prepend apiSchemas = ["PhysicsMassAPI"]
        )
        {
            point3f physics:centerOfMass = (0, 0, 0)
            float physics:density = 100
            float3 physics:diagonalInertia = (-5.339381, -3.7494364, 14.008721)
            float physics:mass = 1.4823239
            quatf physics:principalAxes = (-0.13019295, 0.9778988, -0.089226015, -0.13712206)
            matrix4d xformOp:transform = ( (0.27605, 0, 0, 0), (0, 0.0107, 0, 0), (0, 0, 0.132125, 0), (-0.051066, -0.186206, 0.226597, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Cube "Cube" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(1, 0, 0)]
                float[] primvars:displayOpacity = [0.5]
            }
        }

        def Xform "coffee_table_drawer_collision_4" (
            prepend apiSchemas = ["PhysicsMassAPI"]
        )
        {
            point3f physics:centerOfMass = (0, 0, 0)
            float physics:density = 100
            float3 physics:diagonalInertia = (-5.339381, -3.7494364, 14.008721)
            float physics:mass = 1.4823239
            quatf physics:principalAxes = (-0.13019295, 0.9778988, -0.089226015, -0.13712206)
            matrix4d xformOp:transform = ( (0.27605, 0, 0, 0), (0, 0.0107, 0, 0), (0, 0, 0.132125, 0), (-0.051066, 0.186206, 0.226597, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Cube "Cube" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(1, 0, 0)]
                float[] primvars:displayOpacity = [0.5]
            }
        }
    }

    def Xform "kitchen_root"
    {
        matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]

        def Xform "kitchen1_root"
        {
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Xform "cabinet1"
            {
                matrix4d xformOp:transform = ( (-1, 1.2246467991473532e-16, 0, 0), (-1.2246467991473532e-16, -1, 0, 0), (0, 0, 1, 0), (0.28463219, 1.46675873, 1.11440605, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]

                def Xform "cabinet1_visual_0" (
                    prepend references = @./../meshes/usd/visual/SM_Kitchen_01_Base.usda@</SM_Kitchen_01_Base>
                )
                {
                    matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]

                    over "SM_Kitchen_01_Base" (
                        prepend apiSchemas = ["MaterialBindingAPI"]
                    )
                    {
                        rel material:binding = </_materials/_Game_Materials_Laborraum_M_Kitchen_Fronts_M_Kitchen_Fronts_002>

                        over "_Game_Materials_Laborraum_M_Rubber_Plastic_M_Rubber_Plastic" (
                            prepend apiSchemas = ["MaterialBindingAPI"]
                        )
                        {
                            rel material:binding = </_materials/_Game_Materials_Laborraum_M_Rubber_Plastic_M_Rubber_Plastic>
                        }

                        over "_Game_Materials_Laborraum_M_Plastic_White_M_Plastic_White" (
                            prepend apiSchemas = ["MaterialBindingAPI"]
                        )
                        {
                            rel material:binding = </_materials/_Game_Materials_Laborraum_M_Plastic_White_M_Plastic_White>
                        }

                        over "_Game_Materials_Laborraum_M_Kitchen_Fronts_M_Kitchen_Fronts_002" (
                            prepend apiSchemas = ["MaterialBindingAPI"]
                        )
                        {
                            rel material:binding = </_materials/_Game_Materials_Laborraum_M_Kitchen_Fronts_M_Kitchen_Fronts_002>
                        }
                    }
                }

                def Xform "cabinet1_collision_0" (
                    prepend apiSchemas = ["PhysicsMassAPI"]
                )
                {
                    point3f physics:centerOfMass = (0, 0, 0)
                    float physics:density = 100
                    float3 physics:diagonalInertia = (-407.91794, -322.38647, 687.5089)
                    float physics:mass = 1.938917
                    quatf physics:principalAxes = (0.108798645, 0.9280353, 0.3021072, -0.18879761)
                    matrix4d xformOp:transform = ( (0.27747, 0, 0, 0), (0, 0.0095, 0, 0), (0, 0, 1.06389, 0), (0.010499, -0.3, 0.05, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]

                    def Cube "Cube" (
                        prepend apiSchemas = ["PhysicsCollisionAPI"]
                    )
                    {
                        float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                        bool physics:collisionEnabled = 1
                        color3f[] primvars:displayColor = [(1, 0, 0)]
                        float[] primvars:displayOpacity = [0.5]
                    }
                }

                def Xform "cabinet1_collision_1" (
                    prepend apiSchemas = ["PhysicsMassAPI"]
                )
                {
                    point3f physics:centerOfMass = (0, 0, 0)
                    float physics:density = 100
                    float3 physics:diagonalInertia = (-407.91794, -322.38647, 687.5089)
                    float physics:mass = 1.938917
                    quatf physics:principalAxes = (0.108798645, 0.9280353, 0.3021072, -0.18879761)
                    matrix4d xformOp:transform = ( (0.27747, 0, 0, 0), (0, 0.0095, 0, 0), (0, 0, 1.06389, 0), (0.010499, 0.280469, 0.05, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]

                    def Cube "Cube" (
                        prepend apiSchemas = ["PhysicsCollisionAPI"]
                    )
                    {
                        float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                        bool physics:collisionEnabled = 1
                        color3f[] primvars:displayColor = [(1, 0, 0)]
                        float[] primvars:displayOpacity = [0.5]
                    }
                }

                def Xform "cabinet1_collision_2" (
                    prepend apiSchemas = ["PhysicsMassAPI"]
                )
                {
                    point3f physics:centerOfMass = (0, 0, 0)
                    float physics:density = 100
                    float3 physics:diagonalInertia = (-407.91794, -322.38647, 687.5089)
                    float physics:mass = 1.938917
                    quatf physics:principalAxes = (0.108798645, 0.9280353, 0.3021072, -0.18879761)
                    matrix4d xformOp:transform = ( (0.004, 0, 0, 0), (0, 0.280969, 0, 0), (0, 0, 1.05589, 0), (0.271973, -0.009901, 0.041995, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]

                    def Cube "Cube" (
                        prepend apiSchemas = ["PhysicsCollisionAPI"]
                    )
                    {
                        float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                        bool physics:collisionEnabled = 1
                        color3f[] primvars:displayColor = [(1, 0, 0)]
                        float[] primvars:displayOpacity = [0.5]
                    }
                }

                def Xform "cabinet1_collision_3" (
                    prepend apiSchemas = ["PhysicsMassAPI"]
                )
                {
                    point3f physics:centerOfMass = (0, 0, 0)
                    float physics:density = 100
                    float3 physics:diagonalInertia = (-407.91794, -322.38647, 687.5089)
                    float physics:mass = 1.938917
                    quatf physics:principalAxes = (0.108798645, 0.9280353, 0.3021072, -0.18879761)
                    matrix4d xformOp:transform = ( (0.287969, 0, 0, 0), (0, 0.01046, 0, 0), (0, 0, 1.11388, 0), (0, 0.299967, 0, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]

                    def Cube "Cube" (
                        prepend apiSchemas = ["PhysicsCollisionAPI"]
                    )
                    {
                        float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                        bool physics:collisionEnabled = 1
                        color3f[] primvars:displayColor = [(1, 0, 0)]
                        float[] primvars:displayOpacity = [0.5]
                    }
                }

                def Xform "cabinet1_collision_4" (
                    prepend apiSchemas = ["PhysicsMassAPI"]
                )
                {
                    point3f physics:centerOfMass = (0, 0, 0)
                    float physics:density = 100
                    float3 physics:diagonalInertia = (-407.91794, -322.38647, 687.5089)
                    float physics:mass = 1.938917
                    quatf physics:principalAxes = (0.108798645, 0.9280353, 0.3021072, -0.18879761)
                    matrix4d xformOp:transform = ( (0.008, 0, 0, 0), (0, 0.280969, 0, 0), (0, 0, 0.032, 0), (-0.254976, -0.009901, 1.06578, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]

                    def Cube "Cube" (
                        prepend apiSchemas = ["PhysicsCollisionAPI"]
                    )
                    {
                        float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                        bool physics:collisionEnabled = 1
                        color3f[] primvars:displayColor = [(1, 0, 0)]
                        float[] primvars:displayOpacity = [0.5]
                    }
                }

                def Xform "cabinet1_collision_5" (
                    prepend apiSchemas = ["PhysicsMassAPI"]
                )
                {
                    point3f physics:centerOfMass = (0, 0, 0)
                    float physics:density = 100
                    float3 physics:diagonalInertia = (-407.91794, -322.38647, 687.5089)
                    float physics:mass = 1.938917
                    quatf physics:principalAxes = (0.108798645, 0.9280353, 0.3021072, -0.18879761)
                    matrix4d xformOp:transform = ( (0.270471, 0, 0, 0), (0, 0.280969, 0, 0), (0, 0, 0.008, 0), (0.0055, -0.009901, 1.10578, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]

                    def Cube "Cube" (
                        prepend apiSchemas = ["PhysicsCollisionAPI"]
                    )
                    {
                        float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                        bool physics:collisionEnabled = 1
                        color3f[] primvars:displayColor = [(1, 0, 0)]
                        float[] primvars:displayOpacity = [0.5]
                    }
                }

                def Xform "cabinet1_collision_6" (
                    prepend apiSchemas = ["PhysicsMassAPI"]
                )
                {
                    point3f physics:centerOfMass = (0, 0, 0)
                    float physics:density = 100
                    float3 physics:diagonalInertia = (-407.91794, -322.38647, 687.5089)
                    float physics:mass = 1.938917
                    quatf physics:principalAxes = (0.108798645, 0.9280353, 0.3021072, -0.18879761)
                    matrix4d xformOp:transform = ( (0.270471, 0, 0, 0), (0, 0.280969, 0, 0), (0, 0, 0.0075, 0), (0.0005, -0.009901, 0.249501, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]

                    def Cube "Cube" (
                        prepend apiSchemas = ["PhysicsCollisionAPI"]
                    )
                    {
                        float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                        bool physics:collisionEnabled = 1
                        color3f[] primvars:displayColor = [(1, 0, 0)]
                        float[] primvars:displayOpacity = [0.5]
                    }
                }

                def Xform "cabinet1_shelf1"
                {
                    matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0.009901, 0.0005, 0.56, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]

                    def Xform "cabinet1_shelf1_visual_0"
                    {
                        matrix4d xformOp:transform = ( (0.280969, 0, 0, 0), (0, 0.267471, 0, 0), (0, 0, 0.0075, 0), (0, 0, 0, 1) )
                        uniform token[] xformOpOrder = ["xformOp:transform"]

                        def Cube "Cube"
                        {
                            float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                        }
                    }

                    def Xform "cabinet1_shelf1_collision_0" (
                        prepend apiSchemas = ["PhysicsMassAPI"]
                    )
                    {
                        point3f physics:centerOfMass = (0, 0, 0)
                        float physics:density = 100
                        float3 physics:diagonalInertia = (-407.91794, -322.38647, 687.5089)
                        float physics:mass = 1.938917
                        quatf physics:principalAxes = (0.108798645, 0.9280353, 0.3021072, -0.18879761)
                        matrix4d xformOp:transform = ( (0.280969, 0, 0, 0), (0, 0.267471, 0, 0), (0, 0, 0.0075, 0), (0, 0, 0, 1) )
                        uniform token[] xformOpOrder = ["xformOp:transform"]

                        def Cube "Cube" (
                            prepend apiSchemas = ["PhysicsCollisionAPI"]
                        )
                        {
                            float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                            bool physics:collisionEnabled = 1
                            color3f[] primvars:displayColor = [(1, 0, 0)]
                            float[] primvars:displayOpacity = [0.5]
                        }
                    }
                }

                def Xform "cabinet1_shelf2"
                {
                    matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0.009901, 0.0005, 0.249501, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]

                    def Xform "cabinet1_shelf2_visual_0"
                    {
                        matrix4d xformOp:transform = ( (0.280969, 0, 0, 0), (0, 0.267471, 0, 0), (0, 0, 0.0075, 0), (0, 0, 0, 1) )
                        uniform token[] xformOpOrder = ["xformOp:transform"]

                        def Cube "Cube"
                        {
                            float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                        }
                    }

                    def Xform "cabinet1_shelf2_collision_0" (
                        prepend apiSchemas = ["PhysicsMassAPI"]
                    )
                    {
                        point3f physics:centerOfMass = (0, 0, 0)
                        float physics:density = 100
                        float3 physics:diagonalInertia = (-407.91794, -322.38647, 687.5089)
                        float physics:mass = 1.938917
                        quatf physics:principalAxes = (0.108798645, 0.9280353, 0.3021072, -0.18879761)
                        matrix4d xformOp:transform = ( (0.267471, 0, 0, 0), (0, 0.280969, 0, 0), (0, 0, 0.0075, 0), (0, 0, 0, 1) )
                        uniform token[] xformOpOrder = ["xformOp:transform"]

                        def Cube "Cube" (
                            prepend apiSchemas = ["PhysicsCollisionAPI"]
                        )
                        {
                            float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                            bool physics:collisionEnabled = 1
                            color3f[] primvars:displayColor = [(1, 0, 0)]
                            float[] primvars:displayOpacity = [0.5]
                        }
                    }
                }

                def PhysicsRevoluteJoint "cabinet1_door_joint"
                {
                    uniform token physics:axis = "Z"
                    rel physics:body0 = </apartment_root/kitchen_root/kitchen1_root/cabinet1>
                    rel physics:body1 = </apartment_root/cabinet1_door>
                    bool physics:collisionEnabled = 0
                    point3f physics:localPos0 = (-0.28, 0.28, 0.677)
                    point3f physics:localPos1 = (0, 0, 0)
                    quatf physics:localRot0 = (0, 0, 1, 0)
                    quatf physics:localRot1 = (0, 0, 1, 0)
                    float physics:lowerLimit = 0
                    float physics:upperLimit = 90
                }

                def PhysicsPrismaticJoint "cabinet1_drawer1_joint"
                {
                    uniform token physics:axis = "Z"
                    rel physics:body0 = </apartment_root/kitchen_root/kitchen1_root/cabinet1>
                    rel physics:body1 = </apartment_root/cabinet1_drawer1>
                    bool physics:collisionEnabled = 0
                    point3f physics:localPos0 = (-0.04679018, -0.01122015, -0.48658508)
                    point3f physics:localPos1 = (0, 0, 0)
                    quatf physics:localRot0 = (0.7071068, 0, -0.7071068, 0)
                    quatf physics:localRot1 = (0.7071068, 0, -0.7071068, 0)
                    float physics:lowerLimit = 0
                    float physics:upperLimit = 0.45
                }

                def PhysicsPrismaticJoint "cabinet1_drawer2_joint"
                {
                    uniform token physics:axis = "Z"
                    rel physics:body0 = </apartment_root/kitchen_root/kitchen1_root/cabinet1>
                    rel physics:body1 = </apartment_root/cabinet1_drawer2>
                    bool physics:collisionEnabled = 0
                    point3f physics:localPos0 = (-0.046, -0.011, -0.816)
                    point3f physics:localPos1 = (0, 0, 0)
                    quatf physics:localRot0 = (0.7071068, 0, -0.7071068, 0)
                    quatf physics:localRot1 = (0.7071068, 0, -0.7071068, 0)
                    float physics:lowerLimit = 0
                    float physics:upperLimit = 0.45
                }

                def Xform "oven"
                {
                    matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (-0.27395857, -0.0123597, -0.3426725, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]

                    def Xform "oven_visual_0" (
                        prepend references = @./../meshes/usd/visual/SM_Oven.usda@</SM_Oven>
                    )
                    {
                        matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                        uniform token[] xformOpOrder = ["xformOp:transform"]

                        over "SM_Oven" (
                            prepend apiSchemas = ["MaterialBindingAPI"]
                        )
                        {
                            rel material:binding = </_materials/_Game_Materials_Laborraum_M_OvenBase_M_OvenBase>

                            over "_Game_Materials_Laborraum_M_Rubber_Plastic_M_Rubber_Plastic_001" (
                                prepend apiSchemas = ["MaterialBindingAPI"]
                            )
                            {
                                rel material:binding = </_materials/_Game_Materials_Laborraum_M_Rubber_Plastic_M_Rubber_Plastic_001>
                            }

                            over "_Game_Materials_Laborraum_M_Metal_Chrome_M_Metal_Chrome_005" (
                                prepend apiSchemas = ["MaterialBindingAPI"]
                            )
                            {
                                rel material:binding = </_materials/_Game_Materials_Laborraum_M_Metal_Chrome_M_Metal_Chrome_005>
                            }

                            over "_Game_Materials_Laborraum_M_Glass_Oven_Door_M_Glass_Oven_Door" (
                                prepend apiSchemas = ["MaterialBindingAPI"]
                            )
                            {
                                rel material:binding = </_materials/_Game_Materials_Laborraum_M_Glass_Oven_Door_M_Glass_Oven_Door>
                            }

                            over "_Game_Materials_Laborraum_M_Basic_Black_M_Basic_Black" (
                                prepend apiSchemas = ["MaterialBindingAPI"]
                            )
                            {
                                rel material:binding = </_materials/_Game_Materials_Laborraum_M_Basic_Black_M_Basic_Black>
                            }

                            over "_Game_Materials_Laborraum_M_Display_M_Display" (
                                prepend apiSchemas = ["MaterialBindingAPI"]
                            )
                            {
                                rel material:binding = </_materials/_Game_Materials_Laborraum_M_Display_M_Display>
                            }

                            over "_Game_Materials_Laborraum_M_Icons_M_Icons" (
                                prepend apiSchemas = ["MaterialBindingAPI"]
                            )
                            {
                                rel material:binding = </_materials/_Game_Materials_Laborraum_M_Icons_M_Icons>
                            }

                            over "_Game_Materials_Laborraum_M_Glass_Oven_M_Glass_Oven" (
                                prepend apiSchemas = ["MaterialBindingAPI"]
                            )
                            {
                                rel material:binding = </_materials/_Game_Materials_Laborraum_M_Glass_Oven_M_Glass_Oven>
                            }

                            over "_Game_StarterContent_Materials_M_Metal_Burnished_Steel_M_Metal_" (
                                prepend apiSchemas = ["MaterialBindingAPI"]
                            )
                            {
                                rel material:binding = </_materials/_Game_StarterContent_Materials_M_Metal_Burnished_Steel_M_Metal_>
                            }

                            over "_Game_Materials_Laborraum_M_OvenBase_M_OvenBase" (
                                prepend apiSchemas = ["MaterialBindingAPI"]
                            )
                            {
                                rel material:binding = </_materials/_Game_Materials_Laborraum_M_OvenBase_M_OvenBase>
                            }
                        }
                    }

                    def Xform "oven_collision_0" (
                        prepend apiSchemas = ["PhysicsMassAPI"]
                    )
                    {
                        point3f physics:centerOfMass = (0, 0, 0)
                        float physics:density = 100
                        float3 physics:diagonalInertia = (-32.309116, -22.207096, 111.0133)
                        float physics:mass = 8.50456
                        quatf physics:principalAxes = (-0.111539975, 0.98378974, -0.06734367, -0.123212725)
                        matrix4d xformOp:transform = ( (0.272833, 0, 0, 0), (0, 0.294945, 0, 0), (0, 0, 0.075421, 0), (0.264778, 0.003055, 0.50654, 1) )
                        uniform token[] xformOpOrder = ["xformOp:transform"]

                        def Cube "Cube" (
                            prepend apiSchemas = ["PhysicsCollisionAPI"]
                        )
                        {
                            float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                            bool physics:collisionEnabled = 1
                            color3f[] primvars:displayColor = [(1, 0, 0)]
                            float[] primvars:displayOpacity = [0.5]
                        }
                    }

                    def Xform "oven_collision_1" (
                        prepend apiSchemas = ["PhysicsMassAPI"]
                    )
                    {
                        point3f physics:centerOfMass = (0, 0, 0)
                        float physics:density = 100
                        float3 physics:diagonalInertia = (-32.309116, -22.207096, 111.0133)
                        float physics:mass = 8.50456
                        quatf physics:principalAxes = (-0.111539975, 0.98378974, -0.06734367, -0.123212725)
                        matrix4d xformOp:transform = ( (0.272833, 0, 0, 0), (0, 0.294945, 0, 0), (0, 0, 0.022799, 0), (0.264778, 0.003055, 0.018039, 1) )
                        uniform token[] xformOpOrder = ["xformOp:transform"]

                        def Cube "Cube" (
                            prepend apiSchemas = ["PhysicsCollisionAPI"]
                        )
                        {
                            float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                            bool physics:collisionEnabled = 1
                            color3f[] primvars:displayColor = [(1, 0, 0)]
                            float[] primvars:displayOpacity = [0.5]
                        }
                    }

                    def Xform "oven_collision_2" (
                        prepend apiSchemas = ["PhysicsMassAPI"]
                    )
                    {
                        point3f physics:centerOfMass = (0, 0, 0)
                        float physics:density = 100
                        float3 physics:diagonalInertia = (-32.309116, -22.207096, 111.0133)
                        float physics:mass = 8.50456
                        quatf physics:principalAxes = (-0.111539975, 0.98378974, -0.06734367, -0.123212725)
                        matrix4d xformOp:transform = ( (0.272833, 0, 0, 0), (0, 0.0295, 0, 0), (0, 0, 0.293011, 0), (0.264778, 0.2675, 0.288951, 1) )
                        uniform token[] xformOpOrder = ["xformOp:transform"]

                        def Cube "Cube" (
                            prepend apiSchemas = ["PhysicsCollisionAPI"]
                        )
                        {
                            float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                            bool physics:collisionEnabled = 1
                            color3f[] primvars:displayColor = [(1, 0, 0)]
                            float[] primvars:displayOpacity = [0.5]
                        }
                    }

                    def Xform "oven_collision_3" (
                        prepend apiSchemas = ["PhysicsMassAPI"]
                    )
                    {
                        point3f physics:centerOfMass = (0, 0, 0)
                        float physics:density = 100
                        float3 physics:diagonalInertia = (-32.309116, -22.207096, 111.0133)
                        float physics:mass = 8.50456
                        quatf physics:principalAxes = (-0.111539975, 0.98378974, -0.06734367, -0.123212725)
                        matrix4d xformOp:transform = ( (0.272833, 0, 0, 0), (0, 0.027451, 0, 0), (0, 0, 0.293011, 0), (0.264778, 0.264104, 0.288951, 1) )
                        uniform token[] xformOpOrder = ["xformOp:transform"]

                        def Cube "Cube" (
                            prepend apiSchemas = ["PhysicsCollisionAPI"]
                        )
                        {
                            float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                            bool physics:collisionEnabled = 1
                            color3f[] primvars:displayColor = [(1, 0, 0)]
                            float[] primvars:displayOpacity = [0.5]
                        }
                    }

                    def Xform "oven_collision_4" (
                        prepend apiSchemas = ["PhysicsMassAPI"]
                    )
                    {
                        point3f physics:centerOfMass = (0, 0, 0)
                        float physics:density = 100
                        float3 physics:diagonalInertia = (-32.309116, -22.207096, 111.0133)
                        float physics:mass = 8.50456
                        quatf physics:principalAxes = (-0.111539975, 0.98378974, -0.06734367, -0.123212725)
                        matrix4d xformOp:transform = ( (0.037392, 0, 0, 0), (0, 0.294945, 0, 0), (0, 0, 0.293011, 0), (0.5, -0.003055, 0.288951, 1) )
                        uniform token[] xformOpOrder = ["xformOp:transform"]

                        def Cube "Cube" (
                            prepend apiSchemas = ["PhysicsCollisionAPI"]
                        )
                        {
                            float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                            bool physics:collisionEnabled = 1
                            color3f[] primvars:displayColor = [(1, 0, 0)]
                            float[] primvars:displayOpacity = [0.5]
                        }
                    }

                    def PhysicsRevoluteJoint "oven_door_joint"
                    {
                        uniform token physics:axis = "Z"
                        rel physics:body0 = </apartment_root/kitchen_root/kitchen1_root/cabinet1/oven>
                        rel physics:body1 = </apartment_root/oven_door>
                        bool physics:collisionEnabled = 0
                        point3f physics:localPos0 = (0, 0, 0)
                        point3f physics:localPos1 = (0, 0, 0)
                        quatf physics:localRot0 = (0.5, 0.5, 0.5, -0.5)
                        quatf physics:localRot1 = (1, 0, 0, 0)
                        float physics:lowerLimit = 0
                        float physics:upperLimit = 90
                    }
                }
            }

            def Xform "cabinet2"
            {
                matrix4d xformOp:transform = ( (-1, 1.2246467991473532e-16, 0, 0), (-1.2246467991473532e-16, -1, 0, 0), (0, 0, 1, 0), (0.27990936, 1.97705429, 1.16238914, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]

                def Xform "cabinet2_visual_0" (
                    prepend references = @./../meshes/usd/visual/SM_Kitchen_02_Base.usda@</SM_Kitchen_02_Base>
                )
                {
                    matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]

                    over "SM_Kitchen_02_Base" (
                        prepend apiSchemas = ["MaterialBindingAPI"]
                    )
                    {
                        rel material:binding = </_materials/_Game_Materials_Laborraum_M_Plastic_White_M_Plastic_White_004>

                        over "_Game_Materials_Laborraum_M_Metal_Chrome_M_Metal_Chrome_006" (
                            prepend apiSchemas = ["MaterialBindingAPI"]
                        )
                        {
                            rel material:binding = </_materials/_Game_Materials_Laborraum_M_Metal_Chrome_M_Metal_Chrome_006>
                        }

                        over "_Game_Materials_Laborraum_M_Rubber_Plastic_M_Rubber_Plastic_003" (
                            prepend apiSchemas = ["MaterialBindingAPI"]
                        )
                        {
                            rel material:binding = </_materials/_Game_Materials_Laborraum_M_Rubber_Plastic_M_Rubber_Plastic_003>
                        }

                        over "_Game_Materials_Laborraum_M_Plastic_White_M_Plastic_White_004" (
                            prepend apiSchemas = ["MaterialBindingAPI"]
                        )
                        {
                            rel material:binding = </_materials/_Game_Materials_Laborraum_M_Plastic_White_M_Plastic_White_004>
                        }
                    }
                }

                def Xform "cabinet2_collision_0" (
                    prepend apiSchemas = ["PhysicsMassAPI"]
                )
                {
                    point3f physics:centerOfMass = (0, 0, 0)
                    float physics:density = 100
                    float3 physics:diagonalInertia = (-281.47205, -206.83757, 467.24796)
                    float physics:mass = 8.85845
                    quatf physics:principalAxes = (0.07332986, 0.8954152, 0.39479414, -0.19233294)
                    matrix4d xformOp:transform = ( (0.277359, 0, 0, 0), (0, 0.008, 0, 0), (0, 0, 1.06384, 0), (0.005897, 0.191979, 0, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]

                    def Cube "Cube" (
                        prepend apiSchemas = ["PhysicsCollisionAPI"]
                    )
                    {
                        float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                        bool physics:collisionEnabled = 1
                        color3f[] primvars:displayColor = [(1, 0, 0)]
                        float[] primvars:displayOpacity = [0.5]
                    }
                }

                def Xform "cabinet2_collision_1" (
                    prepend apiSchemas = ["PhysicsMassAPI"]
                )
                {
                    point3f physics:centerOfMass = (0, 0, 0)
                    float physics:density = 100
                    float3 physics:diagonalInertia = (-281.47205, -206.83757, 467.24796)
                    float physics:mass = 8.85845
                    quatf physics:principalAxes = (0.07332986, 0.8954152, 0.39479414, -0.19233294)
                    matrix4d xformOp:transform = ( (0.277359, 0, 0, 0), (0, 0.008, 0, 0), (0, 0, 1.06384, 0), (0.005897, -0.191979, 0, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]

                    def Cube "Cube" (
                        prepend apiSchemas = ["PhysicsCollisionAPI"]
                    )
                    {
                        float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                        bool physics:collisionEnabled = 1
                        color3f[] primvars:displayColor = [(1, 0, 0)]
                        float[] primvars:displayOpacity = [0.5]
                    }
                }

                def Xform "cabinet2_collision_2" (
                    prepend apiSchemas = ["PhysicsMassAPI"]
                )
                {
                    point3f physics:centerOfMass = (0, 0, 0)
                    float physics:density = 100
                    float3 physics:diagonalInertia = (-281.47205, -206.83757, 467.24796)
                    float physics:mass = 8.85845
                    quatf physics:principalAxes = (0.07332986, 0.8954152, 0.39479414, -0.19233294)
                    matrix4d xformOp:transform = ( (0.277359, 0, 0, 0), (0, 0.183882, 0, 0), (0, 0, 0.008, 0), (0.005897, 0, 1.05584, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]

                    def Cube "Cube" (
                        prepend apiSchemas = ["PhysicsCollisionAPI"]
                    )
                    {
                        float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                        bool physics:collisionEnabled = 1
                        color3f[] primvars:displayColor = [(1, 0, 0)]
                        float[] primvars:displayOpacity = [0.5]
                    }
                }

                def Xform "cabinet2_collision_3" (
                    prepend apiSchemas = ["PhysicsMassAPI"]
                )
                {
                    point3f physics:centerOfMass = (0, 0, 0)
                    float physics:density = 100
                    float3 physics:diagonalInertia = (-281.47205, -206.83757, 467.24796)
                    float physics:mass = 8.85845
                    quatf physics:principalAxes = (0.07332986, 0.8954152, 0.39479414, -0.19233294)
                    matrix4d xformOp:transform = ( (0.277359, 0, 0, 0), (0, 0.183882, 0, 0), (0, 0, 0.008, 0), (0.005897, 0, 0.975845, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]

                    def Cube "Cube" (
                        prepend apiSchemas = ["PhysicsCollisionAPI"]
                    )
                    {
                        float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                        bool physics:collisionEnabled = 1
                        color3f[] primvars:displayColor = [(1, 0, 0)]
                        float[] primvars:displayOpacity = [0.5]
                    }
                }

                def Xform "cabinet2_collision_4" (
                    prepend apiSchemas = ["PhysicsMassAPI"]
                )
                {
                    point3f physics:centerOfMass = (0, 0, 0)
                    float physics:density = 100
                    float3 physics:diagonalInertia = (-281.47205, -206.83757, 467.24796)
                    float physics:mass = 8.85845
                    quatf physics:principalAxes = (0.07332986, 0.8954152, 0.39479414, -0.19233294)
                    matrix4d xformOp:transform = ( (0.277359, 0, 0, 0), (0, 0.183882, 0, 0), (0, 0, 0.008, 0), (0.005897, 0, -1.05594, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]

                    def Cube "Cube" (
                        prepend apiSchemas = ["PhysicsCollisionAPI"]
                    )
                    {
                        float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                        bool physics:collisionEnabled = 1
                        color3f[] primvars:displayColor = [(1, 0, 0)]
                        float[] primvars:displayOpacity = [0.5]
                    }
                }

                def Xform "cabinet2_collision_5" (
                    prepend apiSchemas = ["PhysicsMassAPI"]
                )
                {
                    point3f physics:centerOfMass = (0, 0, 0)
                    float physics:density = 100
                    float3 physics:diagonalInertia = (-281.47205, -206.83757, 467.24796)
                    float physics:mass = 8.85845
                    quatf physics:principalAxes = (0.07332986, 0.8954152, 0.39479414, -0.19233294)
                    matrix4d xformOp:transform = ( (0.007187, 0, 0, 0), (0, 0.183882, 0, 0), (0, 0, 0.031996, 0), (-0.26039, 0, 1.01584, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]

                    def Cube "Cube" (
                        prepend apiSchemas = ["PhysicsCollisionAPI"]
                    )
                    {
                        float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                        bool physics:collisionEnabled = 1
                        color3f[] primvars:displayColor = [(1, 0, 0)]
                        float[] primvars:displayOpacity = [0.5]
                    }
                }

                def Xform "cabinet2_collision_6" (
                    prepend apiSchemas = ["PhysicsMassAPI"]
                )
                {
                    point3f physics:centerOfMass = (0, 0, 0)
                    float physics:density = 100
                    float3 physics:diagonalInertia = (-281.47205, -206.83757, 467.24796)
                    float physics:mass = 8.85845
                    quatf physics:principalAxes = (0.07332986, 0.8954152, 0.39479414, -0.19233294)
                    matrix4d xformOp:transform = ( (0.004, 0, 0, 0), (0, 0.183882, 0, 0), (0, 0, 1.04784, 0), (0.267372, 0, 0, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]

                    def Cube "Cube" (
                        prepend apiSchemas = ["PhysicsCollisionAPI"]
                    )
                    {
                        float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                        bool physics:collisionEnabled = 1
                        color3f[] primvars:displayColor = [(1, 0, 0)]
                        float[] primvars:displayOpacity = [0.5]
                    }
                }

                def PhysicsRevoluteJoint "cabinet2_door_joint"
                {
                    uniform token physics:axis = "Z"
                    rel physics:body0 = </apartment_root/kitchen_root/kitchen1_root/cabinet2>
                    rel physics:body1 = </apartment_root/cabinet2_door>
                    bool physics:collisionEnabled = 0
                    point3f physics:localPos0 = (-0.28432143, 0.18657, 0.00105865)
                    point3f physics:localPos1 = (0, 0, 0)
                    quatf physics:localRot0 = (0, 0, 1, 0)
                    quatf physics:localRot1 = (0, 0, 1, 0)
                    float physics:lowerLimit = 0
                    float physics:upperLimit = 90
                }

                def Xform "cabinet2_shelf"
                {
                    matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (-0.00337784, 0.00043732, 0.79036064, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]

                    def Xform "cabinet2_shelf_visual_0" (
                        prepend references = @./../meshes/usd/visual/SM_Kitchen_02_Shelf.usda@</SM_Kitchen_02_Shelf>
                    )
                    {
                        matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                        uniform token[] xformOpOrder = ["xformOp:transform"]

                        over "SM_Kitchen_02_Shelf" (
                            prepend apiSchemas = ["MaterialBindingAPI"]
                        )
                        {
                            rel material:binding = </_materials/_Game_Materials_Laborraum_M_Plastic_White_M_Plastic_White_005>

                            over "_Game_Materials_Laborraum_M_Metal_Chrome_M_Metal_Chrome_008" (
                                prepend apiSchemas = ["MaterialBindingAPI"]
                            )
                            {
                                rel material:binding = </_materials/_Game_Materials_Laborraum_M_Metal_Chrome_M_Metal_Chrome_008>
                            }

                            over "_Game_Materials_Laborraum_M_Plastic_White_M_Plastic_White_005" (
                                prepend apiSchemas = ["MaterialBindingAPI"]
                            )
                            {
                                rel material:binding = </_materials/_Game_Materials_Laborraum_M_Plastic_White_M_Plastic_White_005>
                            }
                        }
                    }

                    def Xform "cabinet2_shelf_collision_0" (
                        prepend apiSchemas = ["PhysicsMassAPI"]
                    )
                    {
                        point3f physics:centerOfMass = (0, 0, 0)
                        float physics:density = 100
                        float3 physics:diagonalInertia = (-0.97448826, -0.48966601, 0.98775023)
                        float physics:mass = 0.2665777
                        quatf physics:principalAxes = (0.93084633, -0.28240272, -0.077602424, 0.21852162)
                        matrix4d xformOp:transform = ( (0.241474, 0, 0, 0), (0, 0.183979, 0, 0), (0, 0, 0.0075, 0), (0, 0, 0.004951, 1) )
                        uniform token[] xformOpOrder = ["xformOp:transform"]

                        def Cube "Cube" (
                            prepend apiSchemas = ["PhysicsCollisionAPI"]
                        )
                        {
                            float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                            bool physics:collisionEnabled = 1
                            color3f[] primvars:displayColor = [(1, 0, 0)]
                            float[] primvars:displayOpacity = [0.5]
                        }
                    }
                }

                def PhysicsPrismaticJoint "cabinet2_drawer1_joint"
                {
                    uniform token physics:axis = "Z"
                    rel physics:body0 = </apartment_root/kitchen_root/kitchen1_root/cabinet2>
                    rel physics:body1 = </apartment_root/cabinet2_drawer1>
                    bool physics:collisionEnabled = 0
                    point3f physics:localPos0 = (-0.00464775, 0.00134538, 0.5804621)
                    point3f physics:localPos1 = (0, 0, 0)
                    quatf physics:localRot0 = (0.7071068, 0, -0.7071068, 0)
                    quatf physics:localRot1 = (0.7071068, 0, -0.7071068, 0)
                    float physics:lowerLimit = 0
                    float physics:upperLimit = 0.45
                }

                def PhysicsPrismaticJoint "cabinet2_drawer2_joint"
                {
                    uniform token physics:axis = "Z"
                    rel physics:body0 = </apartment_root/kitchen_root/kitchen1_root/cabinet2>
                    rel physics:body1 = </apartment_root/cabinet2_drawer2>
                    bool physics:collisionEnabled = 0
                    point3f physics:localPos0 = (-0.00464775, -0.00134538, 0.4227494)
                    point3f physics:localPos1 = (0, 0, 0)
                    quatf physics:localRot0 = (0.7071068, 0, -0.7071068, 0)
                    quatf physics:localRot1 = (0.7071068, 0, -0.7071068, 0)
                    float physics:lowerLimit = 0
                    float physics:upperLimit = 0.45
                }

                def PhysicsPrismaticJoint "cabinet2_drawer3_joint"
                {
                    uniform token physics:axis = "Z"
                    rel physics:body0 = </apartment_root/kitchen_root/kitchen1_root/cabinet2>
                    rel physics:body1 = </apartment_root/cabinet2_drawer3>
                    bool physics:collisionEnabled = 0
                    point3f physics:localPos0 = (-0.00464775, -0.00134538, 0.1428965)
                    point3f physics:localPos1 = (0, 0, 0)
                    quatf physics:localRot0 = (0.7071068, 0, -0.7071068, 0)
                    quatf physics:localRot1 = (0.7071068, 0, -0.7071068, 0)
                    float physics:lowerLimit = 0
                    float physics:upperLimit = 0.45
                }

                def PhysicsPrismaticJoint "cabinet2_drawer4_joint"
                {
                    uniform token physics:axis = "Z"
                    rel physics:body0 = </apartment_root/kitchen_root/kitchen1_root/cabinet2>
                    rel physics:body1 = </apartment_root/cabinet2_drawer4>
                    bool physics:collisionEnabled = 0
                    point3f physics:localPos0 = (-0.00464775, 0.00134538, -0.24243712)
                    point3f physics:localPos1 = (0, 0, 0)
                    quatf physics:localRot0 = (0.7071068, 0, -0.7071068, 0)
                    quatf physics:localRot1 = (0.7071068, 0, -0.7071068, 0)
                    float physics:lowerLimit = 0
                    float physics:upperLimit = 0.45
                }

                def PhysicsPrismaticJoint "cabinet2_drawer5_joint"
                {
                    uniform token physics:axis = "Z"
                    rel physics:body0 = </apartment_root/kitchen_root/kitchen1_root/cabinet2>
                    rel physics:body1 = </apartment_root/cabinet2_drawer5>
                    bool physics:collisionEnabled = 0
                    point3f physics:localPos0 = (-0.00464775, 0.00134538, -0.5180959)
                    point3f physics:localPos1 = (0, 0, 0)
                    quatf physics:localRot0 = (0.7071068, 0, -0.7071068, 0)
                    quatf physics:localRot1 = (0.7071068, 0, -0.7071068, 0)
                    float physics:lowerLimit = 0
                    float physics:upperLimit = 0.45
                }

                def PhysicsPrismaticJoint "cabinet2_drawer6_joint"
                {
                    uniform token physics:axis = "Z"
                    rel physics:body0 = </apartment_root/kitchen_root/kitchen1_root/cabinet2>
                    rel physics:body1 = </apartment_root/cabinet2_drawer6>
                    bool physics:collisionEnabled = 0
                    point3f physics:localPos0 = (-0.00464775, 0.00134538, -0.955192)
                    point3f physics:localPos1 = (0, 0, 0)
                    quatf physics:localRot0 = (0.7071068, 0, -0.7071068, 0)
                    quatf physics:localRot1 = (0.7071068, 0, -0.7071068, 0)
                    float physics:lowerLimit = 0
                    float physics:upperLimit = 0.45
                }
            }

            def Xform "cabinet3"
            {
                matrix4d xformOp:transform = ( (-1, 1.2246467991473532e-16, 0, 0), (-1.2246467991473532e-16, -1, 0, 0), (0, 0, 1, 0), (0.27498539, 2.47989822, 1.16287888, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]

                def Xform "cabinet3_visual_0" (
                    prepend references = @./../meshes/usd/visual/SM_Kitchen_03_Fridge.usda@</SM_Kitchen_03_Fridge>
                )
                {
                    matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]

                    over "SM_Kitchen_03_Fridge" (
                        prepend apiSchemas = ["MaterialBindingAPI"]
                    )
                    {
                        rel material:binding = </_materials/_Game_Materials_Laborraum_M_Plastic_White_M_Plastic_White_008>

                        over "_Game_Materials_Laborraum_M_Kitchen_Fronts_M_Kitchen_Fronts_007" (
                            prepend apiSchemas = ["MaterialBindingAPI"]
                        )
                        {
                            rel material:binding = </_materials/_Game_Materials_Laborraum_M_Kitchen_Fronts_M_Kitchen_Fronts_007>
                        }

                        over "_Game_Materials_Laborraum_M_Rubber_Plastic_M_Rubber_Plastic_004" (
                            prepend apiSchemas = ["MaterialBindingAPI"]
                        )
                        {
                            rel material:binding = </_materials/_Game_Materials_Laborraum_M_Rubber_Plastic_M_Rubber_Plastic_004>
                        }

                        over "_Game_Materials_Laborraum_M_Plastic_White_M_Plastic_White_008" (
                            prepend apiSchemas = ["MaterialBindingAPI"]
                        )
                        {
                            rel material:binding = </_materials/_Game_Materials_Laborraum_M_Plastic_White_M_Plastic_White_008>
                        }
                    }
                }

                def Xform "cabinet3_collision_0" (
                    prepend apiSchemas = ["PhysicsMassAPI"]
                )
                {
                    point3f physics:centerOfMass = (0, 0, 0)
                    float physics:density = 100
                    float3 physics:diagonalInertia = (-323.57834, -224.16788, 614.5425)
                    float physics:mass = 4.823167
                    quatf physics:principalAxes = (0.10148133, 0.9175677, 0.3318334, -0.19405608)
                    matrix4d xformOp:transform = ( (0.277193, 0, 0, 0), (0, 0.01, 0, 0), (0, 0, 1.06382, 0), (0.003155, -0.291968, 0, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]

                    def Cube "Cube" (
                        prepend apiSchemas = ["PhysicsCollisionAPI"]
                    )
                    {
                        float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                        bool physics:collisionEnabled = 1
                        color3f[] primvars:displayColor = [(1, 0, 0)]
                        float[] primvars:displayOpacity = [0.5]
                    }
                }

                def Xform "cabinet3_collision_1" (
                    prepend apiSchemas = ["PhysicsMassAPI"]
                )
                {
                    point3f physics:centerOfMass = (0, 0, 0)
                    float physics:density = 100
                    float3 physics:diagonalInertia = (-323.57834, -224.16788, 614.5425)
                    float physics:mass = 4.823167
                    quatf physics:principalAxes = (0.10148133, 0.9175677, 0.3318334, -0.19405608)
                    matrix4d xformOp:transform = ( (0.277193, 0, 0, 0), (0, 0.01, 0, 0), (0, 0, 1.06382, 0), (0.003155, 0.291968, 0, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]

                    def Cube "Cube" (
                        prepend apiSchemas = ["PhysicsCollisionAPI"]
                    )
                    {
                        float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                        bool physics:collisionEnabled = 1
                        color3f[] primvars:displayColor = [(1, 0, 0)]
                        float[] primvars:displayOpacity = [0.5]
                    }
                }

                def Xform "cabinet3_collision_2" (
                    prepend apiSchemas = ["PhysicsMassAPI"]
                )
                {
                    point3f physics:centerOfMass = (0, 0, 0)
                    float physics:density = 100
                    float3 physics:diagonalInertia = (-323.57834, -224.16788, 614.5425)
                    float physics:mass = 4.823167
                    quatf physics:principalAxes = (0.10148133, 0.9175677, 0.3318334, -0.19405608)
                    matrix4d xformOp:transform = ( (0.277193, 0, 0, 0), (0, 0.286067, 0, 0), (0, 0, 0.008, 0), (0.003155, 0, 1.05584, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]

                    def Cube "Cube" (
                        prepend apiSchemas = ["PhysicsCollisionAPI"]
                    )
                    {
                        float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                        bool physics:collisionEnabled = 1
                        color3f[] primvars:displayColor = [(1, 0, 0)]
                        float[] primvars:displayOpacity = [0.5]
                    }
                }

                def Xform "cabinet3_collision_3" (
                    prepend apiSchemas = ["PhysicsMassAPI"]
                )
                {
                    point3f physics:centerOfMass = (0, 0, 0)
                    float physics:density = 100
                    float3 physics:diagonalInertia = (-323.57834, -224.16788, 614.5425)
                    float physics:mass = 4.823167
                    quatf physics:principalAxes = (0.10148133, 0.9175677, 0.3318334, -0.19405608)
                    matrix4d xformOp:transform = ( (0.277193, 0, 0, 0), (0, 0.286067, 0, 0), (0, 0, 0.008, 0), (0.003155, 0, 0.895854, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]

                    def Cube "Cube" (
                        prepend apiSchemas = ["PhysicsCollisionAPI"]
                    )
                    {
                        float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                        bool physics:collisionEnabled = 1
                        color3f[] primvars:displayColor = [(1, 0, 0)]
                        float[] primvars:displayOpacity = [0.5]
                    }
                }

                def Xform "cabinet3_collision_4" (
                    prepend apiSchemas = ["PhysicsMassAPI"]
                )
                {
                    point3f physics:centerOfMass = (0, 0, 0)
                    float physics:density = 100
                    float3 physics:diagonalInertia = (-323.57834, -224.16788, 614.5425)
                    float physics:mass = 4.823167
                    quatf physics:principalAxes = (0.10148133, 0.9175677, 0.3318334, -0.19405608)
                    matrix4d xformOp:transform = ( (0.277193, 0, 0, 0), (0, 0.286067, 0, 0), (0, 0, 0.008, 0), (0.003155, 0, 0.819863, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]

                    def Cube "Cube" (
                        prepend apiSchemas = ["PhysicsCollisionAPI"]
                    )
                    {
                        float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                        bool physics:collisionEnabled = 1
                        color3f[] primvars:displayColor = [(1, 0, 0)]
                        float[] primvars:displayOpacity = [0.5]
                    }
                }

                def Xform "cabinet3_collision_5" (
                    prepend apiSchemas = ["PhysicsMassAPI"]
                )
                {
                    point3f physics:centerOfMass = (0, 0, 0)
                    float physics:density = 100
                    float3 physics:diagonalInertia = (-323.57834, -224.16788, 614.5425)
                    float physics:mass = 4.823167
                    quatf physics:principalAxes = (0.10148133, 0.9175677, 0.3318334, -0.19405608)
                    matrix4d xformOp:transform = ( (0.277193, 0, 0, 0), (0, 0.286067, 0, 0), (0, 0, 0.008, 0), (0.003155, 0, -0.980943, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]

                    def Cube "Cube" (
                        prepend apiSchemas = ["PhysicsCollisionAPI"]
                    )
                    {
                        float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                        bool physics:collisionEnabled = 1
                        color3f[] primvars:displayColor = [(1, 0, 0)]
                        float[] primvars:displayOpacity = [0.5]
                    }
                }

                def Xform "cabinet3_collision_6" (
                    prepend apiSchemas = ["PhysicsMassAPI"]
                )
                {
                    point3f physics:centerOfMass = (0, 0, 0)
                    float physics:density = 100
                    float3 physics:diagonalInertia = (-323.57834, -224.16788, 614.5425)
                    float physics:mass = 4.823167
                    quatf physics:principalAxes = (0.10148133, 0.9175677, 0.3318334, -0.19405608)
                    matrix4d xformOp:transform = ( (0.277193, 0, 0, 0), (0, 0.286067, 0, 0), (0, 0, 0.008, 0), (0.003155, 0, -1.05594, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]

                    def Cube "Cube" (
                        prepend apiSchemas = ["PhysicsCollisionAPI"]
                    )
                    {
                        float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                        bool physics:collisionEnabled = 1
                        color3f[] primvars:displayColor = [(1, 0, 0)]
                        float[] primvars:displayOpacity = [0.5]
                    }
                }

                def Xform "cabinet3_collision_7" (
                    prepend apiSchemas = ["PhysicsMassAPI"]
                )
                {
                    point3f physics:centerOfMass = (0, 0, 0)
                    float physics:density = 100
                    float3 physics:diagonalInertia = (-323.57834, -224.16788, 614.5425)
                    float physics:mass = 4.823167
                    quatf physics:principalAxes = (0.10148133, 0.9175677, 0.3318334, -0.19405608)
                    matrix4d xformOp:transform = ( (0.0104594, 0, 0, 0), (0, 0.286067, 0, 0), (0, 0, 0.07201, 0), (-0.262453, 0, 0.975825, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]

                    def Cube "Cube" (
                        prepend apiSchemas = ["PhysicsCollisionAPI"]
                    )
                    {
                        float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                        bool physics:collisionEnabled = 1
                        color3f[] primvars:displayColor = [(1, 0, 0)]
                        float[] primvars:displayOpacity = [0.5]
                    }
                }

                def Xform "cabinet3_collision_8" (
                    prepend apiSchemas = ["PhysicsMassAPI"]
                )
                {
                    point3f physics:centerOfMass = (0, 0, 0)
                    float physics:density = 100
                    float3 physics:diagonalInertia = (-323.57834, -224.16788, 614.5425)
                    float physics:mass = 4.823167
                    quatf physics:principalAxes = (0.10148133, 0.9175677, 0.3318334, -0.19405608)
                    matrix4d xformOp:transform = ( (0.0104594, 0, 0, 0), (0, 0.286067, 0, 0), (0, 0, 0.03, 0), (-0.262453, 0, 0.857803, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]

                    def Cube "Cube" (
                        prepend apiSchemas = ["PhysicsCollisionAPI"]
                    )
                    {
                        float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                        bool physics:collisionEnabled = 1
                        color3f[] primvars:displayColor = [(1, 0, 0)]
                        float[] primvars:displayOpacity = [0.5]
                    }
                }

                def Xform "cabinet3_collision_9" (
                    prepend apiSchemas = ["PhysicsMassAPI"]
                )
                {
                    point3f physics:centerOfMass = (0, 0, 0)
                    float physics:density = 100
                    float3 physics:diagonalInertia = (-323.57834, -224.16788, 614.5425)
                    float physics:mass = 4.823167
                    quatf physics:principalAxes = (0.10148133, 0.9175677, 0.3318334, -0.19405608)
                    matrix4d xformOp:transform = ( (0.0104594, 0, 0, 0), (0, 0.286067, 0, 0), (0, 0, 0.03, 0), (-0.262453, 0, 0.857803, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]

                    def Cube "Cube" (
                        prepend apiSchemas = ["PhysicsCollisionAPI"]
                    )
                    {
                        float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                        bool physics:collisionEnabled = 1
                        color3f[] primvars:displayColor = [(1, 0, 0)]
                        float[] primvars:displayOpacity = [0.5]
                    }
                }

                def Xform "cabinet3_collision_10" (
                    prepend apiSchemas = ["PhysicsMassAPI"]
                )
                {
                    point3f physics:centerOfMass = (0, 0, 0)
                    float physics:density = 100
                    float3 physics:diagonalInertia = (-323.57834, -224.16788, 614.5425)
                    float physics:mass = 4.823167
                    quatf physics:principalAxes = (0.10148133, 0.9175677, 0.3318334, -0.19405608)
                    matrix4d xformOp:transform = ( (0.008, 0, 0, 0), (0, 0.073992, 0, 0), (0, 0, 0.037346, 0), (-0.264485, -0.20788, -1.02629, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]

                    def Cube "Cube" (
                        prepend apiSchemas = ["PhysicsCollisionAPI"]
                    )
                    {
                        float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                        bool physics:collisionEnabled = 1
                        color3f[] primvars:displayColor = [(1, 0, 0)]
                        float[] primvars:displayOpacity = [0.5]
                    }
                }

                def PhysicsRevoluteJoint "fridge_door1_joint"
                {
                    uniform token physics:axis = "Z"
                    rel physics:body0 = </apartment_root/kitchen_root/kitchen1_root/cabinet3>
                    rel physics:body1 = </apartment_root/fridge_door1>
                    bool physics:collisionEnabled = 0
                    point3f physics:localPos0 = (-0.297259, 0.29914525, 0.25673997)
                    point3f physics:localPos1 = (0, 0, 0)
                    quatf physics:localRot0 = (0, 0, 1, 0)
                    quatf physics:localRot1 = (0, 0, 1, 0)
                    float physics:lowerLimit = 0
                    float physics:upperLimit = 90
                }

                def PhysicsRevoluteJoint "fridge_door2_joint"
                {
                    uniform token physics:axis = "Z"
                    rel physics:body0 = </apartment_root/kitchen_root/kitchen1_root/cabinet3>
                    rel physics:body1 = </apartment_root/fridge_door2>
                    bool physics:collisionEnabled = 0
                    point3f physics:localPos0 = (-0.297259, 0.2990897, -0.6380079)
                    point3f physics:localPos1 = (0, 0, 0)
                    quatf physics:localRot0 = (0, 0, 1, 0)
                    quatf physics:localRot1 = (0, 0, 1, 0)
                    float physics:lowerLimit = 0
                    float physics:upperLimit = 90
                }

                def Xform "fridge_base"
                {
                    matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (-0.01918092, -0.00292496, -0.0816938, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]

                    def Xform "fridge_base_visual_0"
                    {
                        matrix4d xformOp:transform = ( (0.241826, 0, 0, 0), (0, 0.021622, 0, 0), (0, 0, 0.879405, 0), (0.016051, -0.257778, 0, 1) )
                        uniform token[] xformOpOrder = ["xformOp:transform"]

                        def Cube "Cube"
                        {
                            float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                        }
                    }

                    def Xform "fridge_base_visual_1"
                    {
                        matrix4d xformOp:transform = ( (0.241826, 0, 0, 0), (0, 0.021622, 0, 0), (0, 0, 0.879405, 0), (0.016051, 0.257778, 0, 1) )
                        uniform token[] xformOpOrder = ["xformOp:transform"]

                        def Cube "Cube"
                        {
                            float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                        }
                    }

                    def Xform "fridge_base_visual_2"
                    {
                        matrix4d xformOp:transform = ( (0.196424, 0, 0, 0), (0, 0.012277, 0, 0), (0, 0, 0.318196, 0), (-0.029351, -0.223235, -0.561142, 1) )
                        uniform token[] xformOpOrder = ["xformOp:transform"]

                        def Cube "Cube"
                        {
                            float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                        }
                    }

                    def Xform "fridge_base_visual_3"
                    {
                        matrix4d xformOp:transform = ( (0.196424, 0, 0, 0), (0, 0.012277, 0, 0), (0, 0, 0.318196, 0), (-0.029351, 0.223235, -0.561142, 1) )
                        uniform token[] xformOpOrder = ["xformOp:transform"]

                        def Cube "Cube"
                        {
                            float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                        }
                    }

                    def Xform "fridge_base_visual_4"
                    {
                        matrix4d xformOp:transform = ( (0.246695, 0, 0, 0), (0, 0.278217, 0, 0), (0, 0, 0.023998, 0), (0.011034, 0, 0.855407, 1) )
                        uniform token[] xformOpOrder = ["xformOp:transform"]

                        def Cube "Cube"
                        {
                            float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                        }
                    }

                    def Xform "fridge_base_visual_5"
                    {
                        matrix4d xformOp:transform = ( (0.196424, 0, 0, 0), (0, 0.234783, 0, 0), (0, 0, 0.03771, 0), (-0.029351, 0, 0.839695, 1) )
                        uniform token[] xformOpOrder = ["xformOp:transform"]

                        def Cube "Cube"
                        {
                            float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                        }
                    }

                    def Xform "fridge_base_visual_6"
                    {
                        matrix4d xformOp:transform = ( (0.196424, 0, 0, 0), (0, 0.234783, 0, 0), (0, 0, 0.0125, 0), (-0.029351, 0, 0.224975, 1) )
                        uniform token[] xformOpOrder = ["xformOp:transform"]

                        def Cube "Cube"
                        {
                            float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                        }
                    }

                    def Xform "fridge_base_visual_7"
                    {
                        matrix4d xformOp:transform = ( (0.196424, 0, 0, 0), (0, 0.234783, 0, 0), (0, 0, 0.058965, 0), (-0.029351, 0, -0.18398, 1) )
                        uniform token[] xformOpOrder = ["xformOp:transform"]

                        def Cube "Cube"
                        {
                            float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                        }
                    }

                    def Xform "fridge_base_visual_8"
                    {
                        matrix4d xformOp:transform = ( (0.196424, 0, 0, 0), (0, 0.234783, 0, 0), (0, 0, 0.036788, 0), (-0.029351, 0, -0.842617, 1) )
                        uniform token[] xformOpOrder = ["xformOp:transform"]

                        def Cube "Cube"
                        {
                            float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                        }
                    }

                    def Xform "fridge_base_visual_9"
                    {
                        matrix4d xformOp:transform = ( (0.00782, 0, 0, 0), (0, 0.234783, 0, 0), (0, 0, 0.464658, 0), (0.159364, 0, 0.339754, 1) )
                        uniform token[] xformOpOrder = ["xformOp:transform"]

                        def Cube "Cube"
                        {
                            float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                        }
                    }

                    def Xform "fridge_base_visual_10"
                    {
                        matrix4d xformOp:transform = ( (0.058398, 0, 0, 0), (0, 0.234783, 0, 0), (0, 0, 0.281275, 0), (0.199778, 0, -0.524221, 1) )
                        uniform token[] xformOpOrder = ["xformOp:transform"]

                        def Cube "Cube"
                        {
                            float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                        }
                    }

                    def Xform "fridge_base_collision_0" (
                        prepend apiSchemas = ["PhysicsMassAPI"]
                    )
                    {
                        point3f physics:centerOfMass = (0, 0, 0)
                        float physics:density = 100
                        float3 physics:diagonalInertia = (-15.162766, -7.570549, 33.79961)
                        float physics:mass = 2.3547938
                        quatf physics:principalAxes = (0.99211925, 0.021089012, 0.106029965, -0.06334243)
                        matrix4d xformOp:transform = ( (0.241826, 0, 0, 0), (0, 0.021622, 0, 0), (0, 0, 0.879405, 0), (0.016051, -0.257778, 0, 1) )
                        uniform token[] xformOpOrder = ["xformOp:transform"]

                        def Cube "Cube" (
                            prepend apiSchemas = ["PhysicsCollisionAPI"]
                        )
                        {
                            float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                            bool physics:collisionEnabled = 1
                            color3f[] primvars:displayColor = [(1, 0, 0)]
                            float[] primvars:displayOpacity = [0.5]
                        }
                    }

                    def Xform "fridge_base_collision_1" (
                        prepend apiSchemas = ["PhysicsMassAPI"]
                    )
                    {
                        point3f physics:centerOfMass = (0, 0, 0)
                        float physics:density = 100
                        float3 physics:diagonalInertia = (-15.162766, -7.570549, 33.79961)
                        float physics:mass = 2.3547938
                        quatf physics:principalAxes = (0.99211925, 0.021089012, 0.106029965, -0.06334243)
                        matrix4d xformOp:transform = ( (0.241826, 0, 0, 0), (0, 0.021622, 0, 0), (0, 0, 0.879405, 0), (0.016051, 0.257778, 0, 1) )
                        uniform token[] xformOpOrder = ["xformOp:transform"]

                        def Cube "Cube" (
                            prepend apiSchemas = ["PhysicsCollisionAPI"]
                        )
                        {
                            float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                            bool physics:collisionEnabled = 1
                            color3f[] primvars:displayColor = [(1, 0, 0)]
                            float[] primvars:displayOpacity = [0.5]
                        }
                    }

                    def Xform "fridge_base_collision_2" (
                        prepend apiSchemas = ["PhysicsMassAPI"]
                    )
                    {
                        point3f physics:centerOfMass = (0, 0, 0)
                        float physics:density = 100
                        float3 physics:diagonalInertia = (-15.162766, -7.570549, 33.79961)
                        float physics:mass = 2.3547938
                        quatf physics:principalAxes = (0.99211925, 0.021089012, 0.106029965, -0.06334243)
                        matrix4d xformOp:transform = ( (0.196424, 0, 0, 0), (0, 0.012277, 0, 0), (0, 0, 0.318196, 0), (-0.029351, -0.223235, -0.561142, 1) )
                        uniform token[] xformOpOrder = ["xformOp:transform"]

                        def Cube "Cube" (
                            prepend apiSchemas = ["PhysicsCollisionAPI"]
                        )
                        {
                            float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                            bool physics:collisionEnabled = 1
                            color3f[] primvars:displayColor = [(1, 0, 0)]
                            float[] primvars:displayOpacity = [0.5]
                        }
                    }

                    def Xform "fridge_base_collision_3" (
                        prepend apiSchemas = ["PhysicsMassAPI"]
                    )
                    {
                        point3f physics:centerOfMass = (0, 0, 0)
                        float physics:density = 100
                        float3 physics:diagonalInertia = (-15.162766, -7.570549, 33.79961)
                        float physics:mass = 2.3547938
                        quatf physics:principalAxes = (0.99211925, 0.021089012, 0.106029965, -0.06334243)
                        matrix4d xformOp:transform = ( (0.196424, 0, 0, 0), (0, 0.012277, 0, 0), (0, 0, 0.318196, 0), (-0.029351, 0.223235, -0.561142, 1) )
                        uniform token[] xformOpOrder = ["xformOp:transform"]

                        def Cube "Cube" (
                            prepend apiSchemas = ["PhysicsCollisionAPI"]
                        )
                        {
                            float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                            bool physics:collisionEnabled = 1
                            color3f[] primvars:displayColor = [(1, 0, 0)]
                            float[] primvars:displayOpacity = [0.5]
                        }
                    }

                    def Xform "fridge_base_collision_4" (
                        prepend apiSchemas = ["PhysicsMassAPI"]
                    )
                    {
                        point3f physics:centerOfMass = (0, 0, 0)
                        float physics:density = 100
                        float3 physics:diagonalInertia = (-15.162766, -7.570549, 33.79961)
                        float physics:mass = 2.3547938
                        quatf physics:principalAxes = (0.99211925, 0.021089012, 0.106029965, -0.06334243)
                        matrix4d xformOp:transform = ( (0.246695, 0, 0, 0), (0, 0.278217, 0, 0), (0, 0, 0.023998, 0), (0.011034, 0, 0.855407, 1) )
                        uniform token[] xformOpOrder = ["xformOp:transform"]

                        def Cube "Cube" (
                            prepend apiSchemas = ["PhysicsCollisionAPI"]
                        )
                        {
                            float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                            bool physics:collisionEnabled = 1
                            color3f[] primvars:displayColor = [(1, 0, 0)]
                            float[] primvars:displayOpacity = [0.5]
                        }
                    }

                    def Xform "fridge_base_collision_5" (
                        prepend apiSchemas = ["PhysicsMassAPI"]
                    )
                    {
                        point3f physics:centerOfMass = (0, 0, 0)
                        float physics:density = 100
                        float3 physics:diagonalInertia = (-15.162766, -7.570549, 33.79961)
                        float physics:mass = 2.3547938
                        quatf physics:principalAxes = (0.99211925, 0.021089012, 0.106029965, -0.06334243)
                        matrix4d xformOp:transform = ( (0.196424, 0, 0, 0), (0, 0.234783, 0, 0), (0, 0, 0.03771, 0), (-0.029351, 0, 0.839695, 1) )
                        uniform token[] xformOpOrder = ["xformOp:transform"]

                        def Cube "Cube" (
                            prepend apiSchemas = ["PhysicsCollisionAPI"]
                        )
                        {
                            float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                            bool physics:collisionEnabled = 1
                            color3f[] primvars:displayColor = [(1, 0, 0)]
                            float[] primvars:displayOpacity = [0.5]
                        }
                    }

                    def Xform "fridge_base_collision_6" (
                        prepend apiSchemas = ["PhysicsMassAPI"]
                    )
                    {
                        point3f physics:centerOfMass = (0, 0, 0)
                        float physics:density = 100
                        float3 physics:diagonalInertia = (-15.162766, -7.570549, 33.79961)
                        float physics:mass = 2.3547938
                        quatf physics:principalAxes = (0.99211925, 0.021089012, 0.106029965, -0.06334243)
                        matrix4d xformOp:transform = ( (0.196424, 0, 0, 0), (0, 0.234783, 0, 0), (0, 0, 0.0125, 0), (-0.029351, 0, 0.224975, 1) )
                        uniform token[] xformOpOrder = ["xformOp:transform"]

                        def Cube "Cube" (
                            prepend apiSchemas = ["PhysicsCollisionAPI"]
                        )
                        {
                            float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                            bool physics:collisionEnabled = 1
                            color3f[] primvars:displayColor = [(1, 0, 0)]
                            float[] primvars:displayOpacity = [0.5]
                        }
                    }

                    def Xform "fridge_base_collision_7" (
                        prepend apiSchemas = ["PhysicsMassAPI"]
                    )
                    {
                        point3f physics:centerOfMass = (0, 0, 0)
                        float physics:density = 100
                        float3 physics:diagonalInertia = (-15.162766, -7.570549, 33.79961)
                        float physics:mass = 2.3547938
                        quatf physics:principalAxes = (0.99211925, 0.021089012, 0.106029965, -0.06334243)
                        matrix4d xformOp:transform = ( (0.196424, 0, 0, 0), (0, 0.234783, 0, 0), (0, 0, 0.058965, 0), (-0.029351, 0, -0.18398, 1) )
                        uniform token[] xformOpOrder = ["xformOp:transform"]

                        def Cube "Cube" (
                            prepend apiSchemas = ["PhysicsCollisionAPI"]
                        )
                        {
                            float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                            bool physics:collisionEnabled = 1
                            color3f[] primvars:displayColor = [(1, 0, 0)]
                            float[] primvars:displayOpacity = [0.5]
                        }
                    }

                    def Xform "fridge_base_collision_8" (
                        prepend apiSchemas = ["PhysicsMassAPI"]
                    )
                    {
                        point3f physics:centerOfMass = (0, 0, 0)
                        float physics:density = 100
                        float3 physics:diagonalInertia = (-15.162766, -7.570549, 33.79961)
                        float physics:mass = 2.3547938
                        quatf physics:principalAxes = (0.99211925, 0.021089012, 0.106029965, -0.06334243)
                        matrix4d xformOp:transform = ( (0.196424, 0, 0, 0), (0, 0.234783, 0, 0), (0, 0, 0.036788, 0), (-0.029351, 0, -0.842617, 1) )
                        uniform token[] xformOpOrder = ["xformOp:transform"]

                        def Cube "Cube" (
                            prepend apiSchemas = ["PhysicsCollisionAPI"]
                        )
                        {
                            float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                            bool physics:collisionEnabled = 1
                            color3f[] primvars:displayColor = [(1, 0, 0)]
                            float[] primvars:displayOpacity = [0.5]
                        }
                    }

                    def Xform "fridge_base_collision_9" (
                        prepend apiSchemas = ["PhysicsMassAPI"]
                    )
                    {
                        point3f physics:centerOfMass = (0, 0, 0)
                        float physics:density = 100
                        float3 physics:diagonalInertia = (-15.162766, -7.570549, 33.79961)
                        float physics:mass = 2.3547938
                        quatf physics:principalAxes = (0.99211925, 0.021089012, 0.106029965, -0.06334243)
                        matrix4d xformOp:transform = ( (0.00782, 0, 0, 0), (0, 0.234783, 0, 0), (0, 0, 0.464658, 0), (0.159364, 0, 0.339754, 1) )
                        uniform token[] xformOpOrder = ["xformOp:transform"]

                        def Cube "Cube" (
                            prepend apiSchemas = ["PhysicsCollisionAPI"]
                        )
                        {
                            float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                            bool physics:collisionEnabled = 1
                            color3f[] primvars:displayColor = [(1, 0, 0)]
                            float[] primvars:displayOpacity = [0.5]
                        }
                    }

                    def Xform "fridge_base_collision_10" (
                        prepend apiSchemas = ["PhysicsMassAPI"]
                    )
                    {
                        point3f physics:centerOfMass = (0, 0, 0)
                        float physics:density = 100
                        float3 physics:diagonalInertia = (-15.162766, -7.570549, 33.79961)
                        float physics:mass = 2.3547938
                        quatf physics:principalAxes = (0.99211925, 0.021089012, 0.106029965, -0.06334243)
                        matrix4d xformOp:transform = ( (0.058398, 0, 0, 0), (0, 0.234783, 0, 0), (0, 0, 0.281275, 0), (0.199778, 0, -0.524221, 1) )
                        uniform token[] xformOpOrder = ["xformOp:transform"]

                        def Cube "Cube" (
                            prepend apiSchemas = ["PhysicsCollisionAPI"]
                        )
                        {
                            float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                            bool physics:collisionEnabled = 1
                            color3f[] primvars:displayColor = [(1, 0, 0)]
                            float[] primvars:displayOpacity = [0.5]
                        }
                    }

                    def Xform "fridge_shelf1"
                    {
                        matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (-0.00102744, 0.00204316, 0.54545097, 1) )
                        uniform token[] xformOpOrder = ["xformOp:transform"]

                        def Xform "fridge_shelf1_visual_0" (
                            prepend references = @./../meshes/usd/visual/SM_Fridge_Shelf.usda@</SM_Fridge_Shelf>
                        )
                        {
                            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                            uniform token[] xformOpOrder = ["xformOp:transform"]

                            over "SM_Fridge_Shelf" (
                                prepend apiSchemas = ["MaterialBindingAPI"]
                            )
                            {
                                rel material:binding = </_materials/_Game_Materials_Laborraum_M_Metal_Fridge_M_Metal_Fridge_002>

                                over "_Game_Materials_Laborraum_M_Plastic_White_M_Plastic_White_013" (
                                    prepend apiSchemas = ["MaterialBindingAPI"]
                                )
                                {
                                    rel material:binding = </_materials/_Game_Materials_Laborraum_M_Plastic_White_M_Plastic_White_013>
                                }

                                over "_Game_Materials_Laborraum_M_Plastic_Fridge_M_Plastic_Fridge_003" (
                                    prepend apiSchemas = ["MaterialBindingAPI"]
                                )
                                {
                                    rel material:binding = </_materials/_Game_Materials_Laborraum_M_Plastic_Fridge_M_Plastic_Fridge_003>
                                }

                                over "_Game_Materials_Laborraum_M_Metal_Fridge_M_Metal_Fridge_002" (
                                    prepend apiSchemas = ["MaterialBindingAPI"]
                                )
                                {
                                    rel material:binding = </_materials/_Game_Materials_Laborraum_M_Metal_Fridge_M_Metal_Fridge_002>
                                }
                            }
                        }

                        def Xform "fridge_shelf1_collision_0" (
                            prepend apiSchemas = ["PhysicsMassAPI"]
                        )
                        {
                            point3f physics:centerOfMass = (0, 0, 0)
                            float physics:density = 100
                            float3 physics:diagonalInertia = (-0.51064384, -0.33361533, 0.71018064)
                            float physics:mass = 0.053969637
                            quatf physics:principalAxes = (-0.33024636, -0.28119737, 0.40018693, 0.8072892)
                            matrix4d xformOp:transform = ( (0.133991, 0, 0, 0), (0, 0.234134, 0, 0), (0, 0, 0.004544, 0), (0, 0, 0, 1) )
                            uniform token[] xformOpOrder = ["xformOp:transform"]

                            def Cube "Cube" (
                                prepend apiSchemas = ["PhysicsCollisionAPI"]
                            )
                            {
                                float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                                bool physics:collisionEnabled = 1
                                color3f[] primvars:displayColor = [(1, 0, 0)]
                                float[] primvars:displayOpacity = [0.5]
                            }
                        }
                    }

                    def Xform "fridge_shelf2"
                    {
                        matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (-0.00102744, 0.00204316, 0.41123558, 1) )
                        uniform token[] xformOpOrder = ["xformOp:transform"]

                        def Xform "fridge_shelf2_visual_0" (
                            prepend references = @./../meshes/usd/visual/SM_Fridge_Shelf.usda@</SM_Fridge_Shelf>
                        )
                        {
                            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                            uniform token[] xformOpOrder = ["xformOp:transform"]

                            over "SM_Fridge_Shelf" (
                                prepend apiSchemas = ["MaterialBindingAPI"]
                            )
                            {
                                rel material:binding = </_materials/_Game_Materials_Laborraum_M_Metal_Fridge_M_Metal_Fridge_002>

                                over "_Game_Materials_Laborraum_M_Plastic_White_M_Plastic_White_013" (
                                    prepend apiSchemas = ["MaterialBindingAPI"]
                                )
                                {
                                    rel material:binding = </_materials/_Game_Materials_Laborraum_M_Plastic_White_M_Plastic_White_013>
                                }

                                over "_Game_Materials_Laborraum_M_Plastic_Fridge_M_Plastic_Fridge_003" (
                                    prepend apiSchemas = ["MaterialBindingAPI"]
                                )
                                {
                                    rel material:binding = </_materials/_Game_Materials_Laborraum_M_Plastic_Fridge_M_Plastic_Fridge_003>
                                }

                                over "_Game_Materials_Laborraum_M_Metal_Fridge_M_Metal_Fridge_002" (
                                    prepend apiSchemas = ["MaterialBindingAPI"]
                                )
                                {
                                    rel material:binding = </_materials/_Game_Materials_Laborraum_M_Metal_Fridge_M_Metal_Fridge_002>
                                }
                            }
                        }

                        def Xform "fridge_shelf2_collision_0" (
                            prepend apiSchemas = ["PhysicsMassAPI"]
                        )
                        {
                            point3f physics:centerOfMass = (0, 0, 0)
                            float physics:density = 100
                            float3 physics:diagonalInertia = (-0.51064384, -0.33361533, 0.71018064)
                            float physics:mass = 0.053969637
                            quatf physics:principalAxes = (-0.33024636, -0.28119737, 0.40018693, 0.8072892)
                            matrix4d xformOp:transform = ( (0.133991, 0, 0, 0), (0, 0.234134, 0, 0), (0, 0, 0.004544, 0), (0, 0, 0, 1) )
                            uniform token[] xformOpOrder = ["xformOp:transform"]

                            def Cube "Cube" (
                                prepend apiSchemas = ["PhysicsCollisionAPI"]
                            )
                            {
                                float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                                bool physics:collisionEnabled = 1
                                color3f[] primvars:displayColor = [(1, 0, 0)]
                                float[] primvars:displayOpacity = [0.5]
                            }
                        }
                    }

                    def PhysicsPrismaticJoint "fridge_drawer1_joint"
                    {
                        uniform token physics:axis = "Z"
                        rel physics:body0 = </apartment_root/kitchen_root/kitchen1_root/cabinet3/fridge_base>
                        rel physics:body1 = </apartment_root/fridge_drawer1>
                        bool physics:collisionEnabled = 0
                        point3f physics:localPos0 = (-0.01209006, 0.00223595, 0.11025719)
                        point3f physics:localPos1 = (0, 0, 0)
                        quatf physics:localRot0 = (0.7071068, 0, -0.7071068, 0)
                        quatf physics:localRot1 = (0.7071068, 0, -0.7071068, 0)
                        float physics:lowerLimit = 0
                        float physics:upperLimit = 0.3
                    }

                    def PhysicsPrismaticJoint "fridge_drawer2_joint"
                    {
                        uniform token physics:axis = "Z"
                        rel physics:body0 = </apartment_root/kitchen_root/kitchen1_root/cabinet3/fridge_base>
                        rel physics:body1 = </apartment_root/fridge_drawer2>
                        bool physics:collisionEnabled = 0
                        point3f physics:localPos0 = (-0.01548341, -0.00198811, -0.0496125)
                        point3f physics:localPos1 = (0, 0, 0)
                        quatf physics:localRot0 = (0.7071068, 0, -0.7071068, 0)
                        quatf physics:localRot1 = (0.7071068, 0, -0.7071068, 0)
                        float physics:lowerLimit = 0
                        float physics:upperLimit = 0.3
                    }

                    def PhysicsPrismaticJoint "fridge_drawer3_joint"
                    {
                        uniform token physics:axis = "Z"
                        rel physics:body0 = </apartment_root/kitchen_root/kitchen1_root/cabinet3/fridge_base>
                        rel physics:body1 = </apartment_root/fridge_drawer3>
                        bool physics:collisionEnabled = 0
                        point3f physics:localPos0 = (-0.03265699, 0.00251899, -0.3561763)
                        point3f physics:localPos1 = (0, 0, 0)
                        quatf physics:localRot0 = (0.7071068, 0, -0.7071068, 0)
                        quatf physics:localRot1 = (0.7071068, 0, -0.7071068, 0)
                        float physics:lowerLimit = 0
                        float physics:upperLimit = 0.3
                    }

                    def PhysicsPrismaticJoint "fridge_drawer4_joint"
                    {
                        uniform token physics:axis = "Z"
                        rel physics:body0 = </apartment_root/kitchen_root/kitchen1_root/cabinet3/fridge_base>
                        rel physics:body1 = </apartment_root/fridge_drawer4>
                        bool physics:collisionEnabled = 0
                        point3f physics:localPos0 = (-0.02885223, 0.00508168, -0.532998)
                        point3f physics:localPos1 = (0, 0, 0)
                        quatf physics:localRot0 = (0.7071068, 0, -0.7071068, 0)
                        quatf physics:localRot1 = (0.7071068, 0, -0.7071068, 0)
                        float physics:lowerLimit = 0
                        float physics:upperLimit = 0.3
                    }

                    def PhysicsPrismaticJoint "fridge_drawer5_joint"
                    {
                        uniform token physics:axis = "Z"
                        rel physics:body0 = </apartment_root/kitchen_root/kitchen1_root/cabinet3/fridge_base>
                        rel physics:body1 = </apartment_root/fridge_drawer5>
                        bool physics:collisionEnabled = 0
                        point3f physics:localPos0 = (-0.06480766, 0, -0.71278715)
                        point3f physics:localPos1 = (0, 0, 0)
                        quatf physics:localRot0 = (0.7071068, 0, -0.7071068, 0)
                        quatf physics:localRot1 = (0.7071068, 0, -0.7071068, 0)
                        float physics:lowerLimit = 0
                        float physics:upperLimit = 0.3
                    }
                }
            }

            def Xform "cabinet4"
            {
                matrix4d xformOp:transform = ( (-1, 1.2246467991473532e-16, 0, 0), (-1.2246467991473532e-16, -1, 0, 0), (0, 0, 1, 0), (0.18224365, 3.29388123, 1.82711395, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]

                def Xform "cabinet4_visual_0" (
                    prepend references = @./../meshes/usd/visual/SM_Kitchen_04_Base.usda@</SM_Kitchen_04_Base>
                )
                {
                    matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]

                    over "SM_Kitchen_04_Base" (
                        prepend apiSchemas = ["MaterialBindingAPI"]
                    )
                    {
                        rel material:binding = </_materials/_Game_Materials_Laborraum_M_Kitchen_Fronts_M_Kitchen_Fronts_010>

                        over "_Game_Materials_Laborraum_M_Plastic_White_M_Plastic_White_019" (
                            prepend apiSchemas = ["MaterialBindingAPI"]
                        )
                        {
                            rel material:binding = </_materials/_Game_Materials_Laborraum_M_Plastic_White_M_Plastic_White_019>
                        }

                        over "_Game_Materials_Laborraum_M_Metal_White_M_Metal_White" (
                            prepend apiSchemas = ["MaterialBindingAPI"]
                        )
                        {
                            rel material:binding = </_materials/_Game_Materials_Laborraum_M_Metal_White_M_Metal_White>
                        }

                        over "_Game_Materials_Laborraum_M_Metal_Brushed_M_Metal_Brushed_008" (
                            prepend apiSchemas = ["MaterialBindingAPI"]
                        )
                        {
                            rel material:binding = </_materials/_Game_Materials_Laborraum_M_Metal_Brushed_M_Metal_Brushed_008>
                        }

                        over "_Game_Materials_Laborraum_M_Kitchen_Fronts_M_Kitchen_Fronts_010" (
                            prepend apiSchemas = ["MaterialBindingAPI"]
                        )
                        {
                            rel material:binding = </_materials/_Game_Materials_Laborraum_M_Kitchen_Fronts_M_Kitchen_Fronts_010>
                        }
                    }
                }

                def Xform "cabinet4_collision_0" (
                    prepend apiSchemas = ["PhysicsMassAPI"]
                )
                {
                    point3f physics:centerOfMass = (0, 0, 0)
                    float physics:density = 100
                    float3 physics:diagonalInertia = (-54.8964, -30.956654, 104.2635)
                    float physics:mass = 3.2781558
                    quatf physics:principalAxes = (0.97530985, 0.027600616, 0.19253854, -0.10458397)
                    matrix4d xformOp:transform = ( (0.005, 0, 0, 0), (0, 0.483948, 0, 0), (0, 0, 0.38291, 0), (0.168984, 0.010048, 0, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]

                    def Cube "Cube" (
                        prepend apiSchemas = ["PhysicsCollisionAPI"]
                    )
                    {
                        float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                        bool physics:collisionEnabled = 1
                        color3f[] primvars:displayColor = [(1, 0, 0)]
                        float[] primvars:displayOpacity = [0.5]
                    }
                }

                def Xform "cabinet4_collision_1" (
                    prepend apiSchemas = ["PhysicsMassAPI"]
                )
                {
                    point3f physics:centerOfMass = (0, 0, 0)
                    float physics:density = 100
                    float3 physics:diagonalInertia = (-54.8964, -30.956654, 104.2635)
                    float physics:mass = 3.2781558
                    quatf physics:principalAxes = (0.97530985, 0.027600616, 0.19253854, -0.10458397)
                    matrix4d xformOp:transform = ( (0.174981, 0, 0, 0), (0, 0.008, 0, 0), (0, 0, 0.398908, 0), (0.01, 0.501898, 0, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]

                    def Cube "Cube" (
                        prepend apiSchemas = ["PhysicsCollisionAPI"]
                    )
                    {
                        float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                        bool physics:collisionEnabled = 1
                        color3f[] primvars:displayColor = [(1, 0, 0)]
                        float[] primvars:displayOpacity = [0.5]
                    }
                }

                def Xform "cabinet4_collision_2" (
                    prepend apiSchemas = ["PhysicsMassAPI"]
                )
                {
                    point3f physics:centerOfMass = (0, 0, 0)
                    float physics:density = 100
                    float3 physics:diagonalInertia = (-54.8964, -30.956654, 104.2635)
                    float physics:mass = 3.2781558
                    quatf physics:principalAxes = (0.97530985, 0.027600616, 0.19253854, -0.10458397)
                    matrix4d xformOp:transform = ( (0.174981, 0, 0, 0), (0, 0.008, 0, 0), (0, 0, 0.398908, 0), (0.01, -0.481997, 0, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]

                    def Cube "Cube" (
                        prepend apiSchemas = ["PhysicsCollisionAPI"]
                    )
                    {
                        float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                        bool physics:collisionEnabled = 1
                        color3f[] primvars:displayColor = [(1, 0, 0)]
                        float[] primvars:displayOpacity = [0.5]
                    }
                }

                def Xform "cabinet4_collision_3" (
                    prepend apiSchemas = ["PhysicsMassAPI"]
                )
                {
                    point3f physics:centerOfMass = (0, 0, 0)
                    float physics:density = 100
                    float3 physics:diagonalInertia = (-54.8964, -30.956654, 104.2635)
                    float physics:mass = 3.2781558
                    quatf physics:principalAxes = (0.97530985, 0.027600616, 0.19253854, -0.10458397)
                    matrix4d xformOp:transform = ( (0.184869, 0, 0, 0), (0, 0.01, 0, 0), (0, 0, 0.398908, 0), (0, -0.5, 0, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]

                    def Cube "Cube" (
                        prepend apiSchemas = ["PhysicsCollisionAPI"]
                    )
                    {
                        float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                        bool physics:collisionEnabled = 1
                        color3f[] primvars:displayColor = [(1, 0, 0)]
                        float[] primvars:displayOpacity = [0.5]
                    }
                }

                def Xform "cabinet4_collision_4" (
                    prepend apiSchemas = ["PhysicsMassAPI"]
                )
                {
                    point3f physics:centerOfMass = (0, 0, 0)
                    float physics:density = 100
                    float3 physics:diagonalInertia = (-54.8964, -30.956654, 104.2635)
                    float physics:mass = 3.2781558
                    quatf physics:principalAxes = (0.97530985, 0.027600616, 0.19253854, -0.10458397)
                    matrix4d xformOp:transform = ( (0.168981, 0, 0, 0), (0, 0.483948, 0, 0), (0, 0, 0.008, 0), (0.004, 0.010048, 0.390908, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]

                    def Cube "Cube" (
                        prepend apiSchemas = ["PhysicsCollisionAPI"]
                    )
                    {
                        float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                        bool physics:collisionEnabled = 1
                        color3f[] primvars:displayColor = [(1, 0, 0)]
                        float[] primvars:displayOpacity = [0.5]
                    }
                }

                def Xform "cabinet4_collision_5" (
                    prepend apiSchemas = ["PhysicsMassAPI"]
                )
                {
                    point3f physics:centerOfMass = (0, 0, 0)
                    float physics:density = 100
                    float3 physics:diagonalInertia = (-54.8964, -30.956654, 104.2635)
                    float physics:mass = 3.2781558
                    quatf physics:principalAxes = (0.97530985, 0.027600616, 0.19253854, -0.10458397)
                    matrix4d xformOp:transform = ( (0.168981, 0, 0, 0), (0, 0.483948, 0, 0), (0, 0, 0.008, 0), (0.004, 0.010048, -0.391007, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]

                    def Cube "Cube" (
                        prepend apiSchemas = ["PhysicsCollisionAPI"]
                    )
                    {
                        float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                        bool physics:collisionEnabled = 1
                        color3f[] primvars:displayColor = [(1, 0, 0)]
                        float[] primvars:displayOpacity = [0.5]
                    }
                }

                def Xform "cabinet4_door1"
                {
                    matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (-0.17226107, 0.00837158, 0.19916718, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]

                    def Xform "cabinet4_door1_visual_0" (
                        prepend references = @./../meshes/usd/visual/SM_Kitchen_04_Door_01.usda@</SM_Kitchen_04_Door_01>
                    )
                    {
                        matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                        uniform token[] xformOpOrder = ["xformOp:transform"]

                        over "SM_Kitchen_04_Door_01" (
                            prepend apiSchemas = ["MaterialBindingAPI"]
                        )
                        {
                            rel material:binding = </_materials/_Game_Materials_Laborraum_M_Kitchen_Fronts_M_Kitchen_Fronts_011>

                            over "_Game_Materials_Laborraum_M_Metal_Chrome_M_Metal_Chrome_013" (
                                prepend apiSchemas = ["MaterialBindingAPI"]
                            )
                            {
                                rel material:binding = </_materials/_Game_Materials_Laborraum_M_Metal_Chrome_M_Metal_Chrome_013>
                            }

                            over "_Game_Materials_Laborraum_M_Kitchen_Fronts_M_Kitchen_Fronts_011" (
                                prepend apiSchemas = ["MaterialBindingAPI"]
                            )
                            {
                                rel material:binding = </_materials/_Game_Materials_Laborraum_M_Kitchen_Fronts_M_Kitchen_Fronts_011>
                            }
                        }
                    }

                    def Xform "cabinet4_door1_collision_0" (
                        prepend apiSchemas = ["PhysicsMassAPI"]
                    )
                    {
                        point3f physics:centerOfMass = (0, 0, 0)
                        float physics:density = 100
                        float3 physics:diagonalInertia = (-4.5310636, -2.4631488, 9.618349)
                        float physics:mass = 0.7495481
                        quatf physics:principalAxes = (0.044276845, -0.031922795, 0.9983749, -0.016372556)
                        matrix4d xformOp:transform = ( (0.0095, 0, 0, 0), (0, 0.497446, 0, 0), (0, 0, 0.197868, 0), (-0.002895, 0, 0, 1) )
                        uniform token[] xformOpOrder = ["xformOp:transform"]

                        def Cube "Cube" (
                            prepend apiSchemas = ["PhysicsCollisionAPI"]
                        )
                        {
                            float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                            bool physics:collisionEnabled = 1
                            color3f[] primvars:displayColor = [(1, 0, 0)]
                            float[] primvars:displayOpacity = [0.5]
                        }
                    }
                }

                def Xform "cabinet4_door2"
                {
                    matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (-0.15042921, 0.0093109, -0.19994873, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]

                    def Xform "cabinet4_door2_visual_0" (
                        prepend references = @./../meshes/usd/visual/SM_Kitchen_04_Door_02.usda@</SM_Kitchen_04_Door_02>
                    )
                    {
                        matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                        uniform token[] xformOpOrder = ["xformOp:transform"]

                        over "SM_Kitchen_04_Door_02" (
                            prepend apiSchemas = ["MaterialBindingAPI"]
                        )
                        {
                            rel material:binding = </_materials/_Game_Materials_Laborraum_M_Kitchen_Fronts_M_Kitchen_Fronts_012>

                            over "_Game_Materials_Laborraum_M_Metal_Chrome_M_Metal_Chrome_014" (
                                prepend apiSchemas = ["MaterialBindingAPI"]
                            )
                            {
                                rel material:binding = </_materials/_Game_Materials_Laborraum_M_Metal_Chrome_M_Metal_Chrome_014>
                            }

                            over "_Game_Materials_Laborraum_M_Kitchen_Fronts_M_Kitchen_Fronts_012" (
                                prepend apiSchemas = ["MaterialBindingAPI"]
                            )
                            {
                                rel material:binding = </_materials/_Game_Materials_Laborraum_M_Kitchen_Fronts_M_Kitchen_Fronts_012>
                            }
                        }
                    }

                    def Xform "cabinet4_door2_collision_0" (
                        prepend apiSchemas = ["PhysicsMassAPI"]
                    )
                    {
                        point3f physics:centerOfMass = (0, 0, 0)
                        float physics:density = 100
                        float3 physics:diagonalInertia = (-4.6224437, -2.5402746, 9.927279)
                        float physics:mass = 0.75359774
                        quatf physics:principalAxes = (0.049052477, -0.03559502, 0.9979873, -0.018660137)
                        matrix4d xformOp:transform = ( (0.0095, 0, 0, 0), (0, 0.497446, 0, 0), (0, 0, 0.197868, 0), (-0.025359, 0, 0, 1) )
                        uniform token[] xformOpOrder = ["xformOp:transform"]

                        def Cube "Cube" (
                            prepend apiSchemas = ["PhysicsCollisionAPI"]
                        )
                        {
                            float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                            bool physics:collisionEnabled = 1
                            color3f[] primvars:displayColor = [(1, 0, 0)]
                            float[] primvars:displayOpacity = [0.5]
                        }
                    }

                    def Xform "cabinet4_door2_handle"
                    {
                        matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 2.220446049250313e-16, 1, 0), (0, -1, 2.220446049250313e-16, 0), (-0.06103859, -0.01415195, -0.13357088, 1) )
                        uniform token[] xformOpOrder = ["xformOp:transform"]

                        def Xform "cabinet4_door2_handle_visual_0" (
                            prepend references = @./../meshes/usd/visual/SM_Kitchen_Handle.usda@</SM_Kitchen_Handle>
                        )
                        {
                            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                            uniform token[] xformOpOrder = ["xformOp:transform"]

                            over "SM_Kitchen_Handle" (
                                prepend apiSchemas = ["MaterialBindingAPI"]
                            )
                            {
                                rel material:binding = </_materials/_Game_Materials_Laborraum_M_Metal_Brushed_M_Metal_Brushed_003>
                            }
                        }

                        def Xform "cabinet4_door2_handle_collision_0" (
                            prepend apiSchemas = ["PhysicsMassAPI"]
                        )
                        {
                            point3f physics:centerOfMass = (0, 0, 0)
                            float physics:density = 100
                            float3 physics:diagonalInertia = (-4.6224437, -2.5402746, 9.927279)
                            float physics:mass = 0.75359774
                            quatf physics:principalAxes = (0.049052477, -0.03559502, 0.9979873, -0.018660137)
                            matrix4d xformOp:transform = ( (0.01, 0, 0, 0), (0, 0.0065, 0, 0), (0, 0, 0.0065, 0), (0.0164985, 0, 0.08, 1) )
                            uniform token[] xformOpOrder = ["xformOp:transform"]

                            def Cube "Cube" (
                                prepend apiSchemas = ["PhysicsCollisionAPI"]
                            )
                            {
                                float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                                bool physics:collisionEnabled = 1
                                color3f[] primvars:displayColor = [(1, 0, 0)]
                                float[] primvars:displayOpacity = [0.5]
                            }
                        }

                        def Xform "cabinet4_door2_handle_collision_1" (
                            prepend apiSchemas = ["PhysicsMassAPI"]
                        )
                        {
                            point3f physics:centerOfMass = (0, 0, 0)
                            float physics:density = 100
                            float3 physics:diagonalInertia = (-4.6224437, -2.5402746, 9.927279)
                            float physics:mass = 0.75359774
                            quatf physics:principalAxes = (0.049052477, -0.03559502, 0.9979873, -0.018660137)
                            matrix4d xformOp:transform = ( (0.01, 0, 0, 0), (0, 0.0065, 0, 0), (0, 0, 0.0065, 0), (0.0164985, 0, -0.08, 1) )
                            uniform token[] xformOpOrder = ["xformOp:transform"]

                            def Cube "Cube" (
                                prepend apiSchemas = ["PhysicsCollisionAPI"]
                            )
                            {
                                float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                                bool physics:collisionEnabled = 1
                                color3f[] primvars:displayColor = [(1, 0, 0)]
                                float[] primvars:displayOpacity = [0.5]
                            }
                        }

                        def Xform "cabinet4_door2_handle_collision_2" (
                            prepend apiSchemas = ["PhysicsMassAPI"]
                        )
                        {
                            point3f physics:centerOfMass = (0, 0, 0)
                            float physics:density = 100
                            float3 physics:diagonalInertia = (-4.6224437, -2.5402746, 9.927279)
                            float physics:mass = 0.75359774
                            quatf physics:principalAxes = (0.049052477, -0.03559502, 0.9979873, -0.018660137)
                            matrix4d xformOp:transform = ( (0.0065, 0, 0, 0), (0, 0.0065, 0, 0), (0, 0, 0.086516, 0), (0, 0, 0, 1) )
                            uniform token[] xformOpOrder = ["xformOp:transform"]

                            def Cube "Cube" (
                                prepend apiSchemas = ["PhysicsCollisionAPI"]
                            )
                            {
                                float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                                bool physics:collisionEnabled = 1
                                color3f[] primvars:displayColor = [(1, 0, 0)]
                                float[] primvars:displayOpacity = [0.5]
                            }
                        }
                    }
                }

                def Xform "cabinet4_shelf1"
                {
                    matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0.00833792, -0.01016479, 0.12500641, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]

                    def Xform "cabinet4_shelf1_visual_0" (
                        prepend references = @./../meshes/usd/visual/SM_Kitchen_04_Shelf.usda@</SM_Kitchen_04_Shelf>
                    )
                    {
                        matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                        uniform token[] xformOpOrder = ["xformOp:transform"]

                        over "SM_Kitchen_04_Shelf" (
                            prepend apiSchemas = ["MaterialBindingAPI"]
                        )
                        {
                            rel material:binding = </_materials/_Game_Materials_Laborraum_M_Glass_Blue_M_Glass_Blue>

                            over "_Game_Materials_Laborraum_M_Glass_Inst_M_Glass_Inst" (
                                prepend apiSchemas = ["MaterialBindingAPI"]
                            )
                            {
                                rel material:binding = </_materials/_Game_Materials_Laborraum_M_Glass_Inst_M_Glass_Inst>
                            }

                            over "_Game_Materials_Laborraum_M_Glass_Blue_M_Glass_Blue" (
                                prepend apiSchemas = ["MaterialBindingAPI"]
                            )
                            {
                                rel material:binding = </_materials/_Game_Materials_Laborraum_M_Glass_Blue_M_Glass_Blue>
                            }
                        }
                    }

                    def Xform "cabinet4_shelf1_collision_0" (
                        prepend apiSchemas = ["PhysicsMassAPI"]
                    )
                    {
                        point3f physics:centerOfMass = (0, 0, 0)
                        float physics:density = 100
                        float3 physics:diagonalInertia = (-4.7830853, -3.653541, 5.9531107)
                        float physics:mass = 0.24089114
                        quatf physics:principalAxes = (0.22761692, 0.89365983, 0.2643939, 0.28223842)
                        matrix4d xformOp:transform = ( (0.153539, 0, 0, 0), (0, 0.483948, 0, 0), (0, 0, 0.004042, 0), (0, 0, 0, 1) )
                        uniform token[] xformOpOrder = ["xformOp:transform"]

                        def Cube "Cube" (
                            prepend apiSchemas = ["PhysicsCollisionAPI"]
                        )
                        {
                            float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                            bool physics:collisionEnabled = 1
                            color3f[] primvars:displayColor = [(1, 0, 0)]
                            float[] primvars:displayOpacity = [0.5]
                        }
                    }
                }

                def Xform "cabinet4_shelf2"
                {
                    matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0.00833792, -0.01016479, -0.09840179, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]

                    def Xform "cabinet4_shelf2_visual_0" (
                        prepend references = @./../meshes/usd/visual/SM_Kitchen_04_Shelf.usda@</SM_Kitchen_04_Shelf>
                    )
                    {
                        matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                        uniform token[] xformOpOrder = ["xformOp:transform"]

                        over "SM_Kitchen_04_Shelf" (
                            prepend apiSchemas = ["MaterialBindingAPI"]
                        )
                        {
                            rel material:binding = </_materials/_Game_Materials_Laborraum_M_Glass_Blue_M_Glass_Blue>

                            over "_Game_Materials_Laborraum_M_Glass_Inst_M_Glass_Inst" (
                                prepend apiSchemas = ["MaterialBindingAPI"]
                            )
                            {
                                rel material:binding = </_materials/_Game_Materials_Laborraum_M_Glass_Inst_M_Glass_Inst>
                            }

                            over "_Game_Materials_Laborraum_M_Glass_Blue_M_Glass_Blue" (
                                prepend apiSchemas = ["MaterialBindingAPI"]
                            )
                            {
                                rel material:binding = </_materials/_Game_Materials_Laborraum_M_Glass_Blue_M_Glass_Blue>
                            }
                        }
                    }

                    def Xform "cabinet4_shelf2_collision_0" (
                        prepend apiSchemas = ["PhysicsMassAPI"]
                    )
                    {
                        point3f physics:centerOfMass = (0, 0, 0)
                        float physics:density = 100
                        float3 physics:diagonalInertia = (-4.7830853, -3.653541, 5.9531107)
                        float physics:mass = 0.24089114
                        quatf physics:principalAxes = (0.22761692, 0.89365983, 0.2643939, 0.28223842)
                        matrix4d xformOp:transform = ( (0.153539, 0, 0, 0), (0, 0.483948, 0, 0), (0, 0, 0.004042, 0), (0, 0, 0, 1) )
                        uniform token[] xformOpOrder = ["xformOp:transform"]

                        def Cube "Cube" (
                            prepend apiSchemas = ["PhysicsCollisionAPI"]
                        )
                        {
                            float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                            bool physics:collisionEnabled = 1
                            color3f[] primvars:displayColor = [(1, 0, 0)]
                            float[] primvars:displayOpacity = [0.5]
                        }
                    }
                }
            }

            def Xform "counter_wall"
            {
                matrix4d xformOp:transform = ( (-1, 1.2246467991473532e-16, 0, 0), (-1.2246467991473532e-16, -1, 0, 0), (0, 0, 1, 0), (0.28142776, 3.29494293, 0.90892097, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]

                def Xform "counter_wall_visual_0" (
                    prepend references = @./../meshes/usd/visual/SM_Counter_Wall.usda@</SM_Counter_Wall>
                )
                {
                    matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]

                    over "SM_Counter_Wall" (
                        prepend apiSchemas = ["MaterialBindingAPI"]
                    )
                    {
                        rel material:binding = </_materials/_Game_Materials_Laborraum_M_Wood_Counter_M_Wood_Counter>
                    }
                }

                def Xform "counter_wall_collision_0" (
                    prepend apiSchemas = ["PhysicsMassAPI"]
                )
                {
                    point3f physics:centerOfMass = (0, 0, 0)
                    float physics:density = 100
                    float3 physics:diagonalInertia = (-13.303982, -8.230078, 14.829752)
                    float physics:mass = 1.7812469
                    quatf physics:principalAxes = (-0.32301596, -0.2781999, 0.38011736, 0.82083875)
                    matrix4d xformOp:transform = ( (0.2995, 0, 0, 0), (0, 0.515532, 0, 0), (0, 0, 0.013389, 0), (0, 0, 0, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]

                    def Cube "Cube" (
                        prepend apiSchemas = ["PhysicsCollisionAPI"]
                    )
                    {
                        float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                        bool physics:collisionEnabled = 1
                        color3f[] primvars:displayColor = [(1, 0, 0)]
                        float[] primvars:displayOpacity = [0.5]
                    }
                }
            }

            def Xform "cabinet5"
            {
                matrix4d xformOp:transform = ( (-1, 1.2246467991473532e-16, 0, 0), (-1.2246467991473532e-16, -1, 0, 0), (0, 0, 1, 0), (0.27476608, 3.08411682, 0.49420666, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]

                def Xform "cabinet5_visual_0" (
                    prepend references = @./../meshes/usd/visual/SM_Kitchen_05_Base.usda@</SM_Kitchen_05_Base>
                )
                {
                    matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]

                    over "SM_Kitchen_05_Base" (
                        prepend apiSchemas = ["MaterialBindingAPI"]
                    )
                    {
                        rel material:binding = </_materials/_Game_Materials_Laborraum_M_Plastic_White_M_Plastic_White_020>

                        over "_Game_Materials_Laborraum_M_Metal_Chrome_M_Metal_Chrome_015" (
                            prepend apiSchemas = ["MaterialBindingAPI"]
                        )
                        {
                            rel material:binding = </_materials/_Game_Materials_Laborraum_M_Metal_Chrome_M_Metal_Chrome_015>
                        }

                        over "_Game_Materials_Laborraum_M_Plastic_White_M_Plastic_White_020" (
                            prepend apiSchemas = ["MaterialBindingAPI"]
                        )
                        {
                            rel material:binding = </_materials/_Game_Materials_Laborraum_M_Plastic_White_M_Plastic_White_020>
                        }
                    }
                }

                def Xform "cabinet5_collision_0" (
                    prepend apiSchemas = ["PhysicsMassAPI"]
                )
                {
                    point3f physics:centerOfMass = (0, 0, 0)
                    float physics:density = 100
                    float3 physics:diagonalInertia = (-23.180653, -18.979656, 51.4175)
                    float physics:mass = 2.3936646
                    quatf physics:principalAxes = (0.89999396, -0.35150135, 0.1725791, -0.19150494)
                    matrix4d xformOp:transform = ( (0.27726, 0, 0, 0), (0, 0.008, 0, 0), (0, 0, 0.399006, 0), (0, 0.291968, 0, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]

                    def Cube "Cube" (
                        prepend apiSchemas = ["PhysicsCollisionAPI"]
                    )
                    {
                        float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                        bool physics:collisionEnabled = 1
                        color3f[] primvars:displayColor = [(1, 0, 0)]
                        float[] primvars:displayOpacity = [0.5]
                    }
                }

                def Xform "cabinet5_collision_1" (
                    prepend apiSchemas = ["PhysicsMassAPI"]
                )
                {
                    point3f physics:centerOfMass = (0, 0, 0)
                    float physics:density = 100
                    float3 physics:diagonalInertia = (-23.180653, -18.979656, 51.4175)
                    float physics:mass = 2.3936646
                    quatf physics:principalAxes = (0.89999396, -0.35150135, 0.1725791, -0.19150494)
                    matrix4d xformOp:transform = ( (0.27726, 0, 0, 0), (0, 0.008, 0, 0), (0, 0, 0.399006, 0), (0, -0.291968, 0, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]

                    def Cube "Cube" (
                        prepend apiSchemas = ["PhysicsCollisionAPI"]
                    )
                    {
                        float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                        bool physics:collisionEnabled = 1
                        color3f[] primvars:displayColor = [(1, 0, 0)]
                        float[] primvars:displayOpacity = [0.5]
                    }
                }

                def Xform "cabinet5_collision_2" (
                    prepend apiSchemas = ["PhysicsMassAPI"]
                )
                {
                    point3f physics:centerOfMass = (0, 0, 0)
                    float physics:density = 100
                    float3 physics:diagonalInertia = (-23.180653, -18.979656, 51.4175)
                    float physics:mass = 2.3936646
                    quatf physics:principalAxes = (0.89999396, -0.35150135, 0.1725791, -0.19150494)
                    matrix4d xformOp:transform = ( (0.27726, 0, 0, 0), (0, 0.284067, 0, 0), (0, 0, 0.008, 0), (0, 0, -0.391006, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]

                    def Cube "Cube" (
                        prepend apiSchemas = ["PhysicsCollisionAPI"]
                    )
                    {
                        float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                        bool physics:collisionEnabled = 1
                        color3f[] primvars:displayColor = [(1, 0, 0)]
                        float[] primvars:displayOpacity = [0.5]
                    }
                }

                def Xform "cabinet5_collision_3" (
                    prepend apiSchemas = ["PhysicsMassAPI"]
                )
                {
                    point3f physics:centerOfMass = (0, 0, 0)
                    float physics:density = 100
                    float3 physics:diagonalInertia = (-23.180653, -18.979656, 51.4175)
                    float physics:mass = 2.3936646
                    quatf physics:principalAxes = (0.89999396, -0.35150135, 0.1725791, -0.19150494)
                    matrix4d xformOp:transform = ( (0.04, 0, 0, 0), (0, 0.284067, 0, 0), (0, 0, 0.008, 0), (0.217476, 0, 0.390909, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]

                    def Cube "Cube" (
                        prepend apiSchemas = ["PhysicsCollisionAPI"]
                    )
                    {
                        float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                        bool physics:collisionEnabled = 1
                        color3f[] primvars:displayColor = [(1, 0, 0)]
                        float[] primvars:displayOpacity = [0.5]
                    }
                }

                def Xform "cabinet5_collision_4" (
                    prepend apiSchemas = ["PhysicsMassAPI"]
                )
                {
                    point3f physics:centerOfMass = (0, 0, 0)
                    float physics:density = 100
                    float3 physics:diagonalInertia = (-23.180653, -18.979656, 51.4175)
                    float physics:mass = 2.3936646
                    quatf physics:principalAxes = (0.89999396, -0.35150135, 0.1725791, -0.19150494)
                    matrix4d xformOp:transform = ( (0.004, 0, 0, 0), (0, 0.284067, 0, 0), (0, 0, 0.38291, 0), (0.261473, 0, 0, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]

                    def Cube "Cube" (
                        prepend apiSchemas = ["PhysicsCollisionAPI"]
                    )
                    {
                        float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                        bool physics:collisionEnabled = 1
                        color3f[] primvars:displayColor = [(1, 0, 0)]
                        float[] primvars:displayOpacity = [0.5]
                    }
                }

                def PhysicsPrismaticJoint "cabinet5_drawer1_joint"
                {
                    uniform token physics:axis = "Z"
                    rel physics:body0 = </apartment_root/kitchen_root/kitchen1_root/cabinet5>
                    rel physics:body1 = </apartment_root/cabinet5_drawer1>
                    bool physics:collisionEnabled = 0
                    point3f physics:localPos0 = (-0.05262699, -0.00100026, 0.33177838)
                    point3f physics:localPos1 = (0, 0, 0)
                    quatf physics:localRot0 = (0.7071068, 0, -0.7071068, 0)
                    quatf physics:localRot1 = (0.7071068, 0, -0.7071068, 0)
                    float physics:lowerLimit = 0
                    float physics:upperLimit = 0.45
                }

                def PhysicsPrismaticJoint "cabinet5_drawer2_joint"
                {
                    uniform token physics:axis = "Z"
                    rel physics:body0 = </apartment_root/kitchen_root/kitchen1_root/cabinet5>
                    rel physics:body1 = </apartment_root/cabinet5_drawer2>
                    bool physics:collisionEnabled = 0
                    point3f physics:localPos0 = (-0.05303764, -0.00079152, 0.13372459)
                    point3f physics:localPos1 = (0, 0, 0)
                    quatf physics:localRot0 = (0.7071068, 0, -0.7071068, 0)
                    quatf physics:localRot1 = (0.7071068, 0, -0.7071068, 0)
                    float physics:lowerLimit = 0
                    float physics:upperLimit = 0.45
                }

                def PhysicsPrismaticJoint "cabinet5_drawer3_joint"
                {
                    uniform token physics:axis = "Z"
                    rel physics:body0 = </apartment_root/kitchen_root/kitchen1_root/cabinet5>
                    rel physics:body1 = </apartment_root/cabinet5_drawer3>
                    bool physics:collisionEnabled = 0
                    point3f physics:localPos0 = (-0.05345088, -0.00075551, -0.1956669)
                    point3f physics:localPos1 = (0, 0, 0)
                    quatf physics:localRot0 = (0.7071068, 0, -0.7071068, 0)
                    quatf physics:localRot1 = (0.7071068, 0, -0.7071068, 0)
                    float physics:lowerLimit = 0
                    float physics:upperLimit = 0.45
                }
            }

            def Xform "cabinet6"
            {
                matrix4d xformOp:transform = ( (-1, 1.2246467991473532e-16, 0, 0), (-1.2246467991473532e-16, -1, 0, 0), (0, 0, 1, 0), (0.27476608, 3.5838385, 0.49420666, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]

                def Xform "cabinet6_visual_0" (
                    prepend references = @./../meshes/usd/visual/SM_Kitchen_06_Base.usda@</SM_Kitchen_06_Base>
                )
                {
                    matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]

                    over "SM_Kitchen_06_Base" (
                        prepend apiSchemas = ["MaterialBindingAPI"]
                    )
                    {
                        rel material:binding = </_materials/_Game_Materials_Laborraum_M_Plastic_White_M_Plastic_White_024>

                        over "_Game_Materials_Laborraum_M_Metal_Brushed_M_Metal_Brushed_009" (
                            prepend apiSchemas = ["MaterialBindingAPI"]
                        )
                        {
                            rel material:binding = </_materials/_Game_Materials_Laborraum_M_Metal_Brushed_M_Metal_Brushed_009>
                        }

                        over "_Game_Materials_Laborraum_M_Plastic_White_M_Plastic_White_024" (
                            prepend apiSchemas = ["MaterialBindingAPI"]
                        )
                        {
                            rel material:binding = </_materials/_Game_Materials_Laborraum_M_Plastic_White_M_Plastic_White_024>
                        }
                    }
                }

                def Xform "cabinet6_collision_0" (
                    prepend apiSchemas = ["PhysicsMassAPI"]
                )
                {
                    point3f physics:centerOfMass = (0, 0, 0)
                    float physics:density = 100
                    float3 physics:diagonalInertia = (-18.060179, -14.643586, 35.56239)
                    float physics:mass = 2.06971
                    quatf physics:principalAxes = (-0.06348074, 0.9944086, -0.03479899, -0.07688169)
                    matrix4d xformOp:transform = ( (0.27726, 0, 0, 0), (0, 0.008, 0, 0), (0, 0, 0.399006, 0), (0, 0.191779, 0, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]

                    def Cube "Cube" (
                        prepend apiSchemas = ["PhysicsCollisionAPI"]
                    )
                    {
                        float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                        bool physics:collisionEnabled = 1
                        color3f[] primvars:displayColor = [(1, 0, 0)]
                        float[] primvars:displayOpacity = [0.5]
                    }
                }

                def Xform "cabinet6_collision_1" (
                    prepend apiSchemas = ["PhysicsMassAPI"]
                )
                {
                    point3f physics:centerOfMass = (0, 0, 0)
                    float physics:density = 100
                    float3 physics:diagonalInertia = (-18.060179, -14.643586, 35.56239)
                    float physics:mass = 2.06971
                    quatf physics:principalAxes = (-0.06348074, 0.9944086, -0.03479899, -0.07688169)
                    matrix4d xformOp:transform = ( (0.27726, 0, 0, 0), (0, 0.008, 0, 0), (0, 0, 0.399006, 0), (0, -0.191779, 0, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]

                    def Cube "Cube" (
                        prepend apiSchemas = ["PhysicsCollisionAPI"]
                    )
                    {
                        float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                        bool physics:collisionEnabled = 1
                        color3f[] primvars:displayColor = [(1, 0, 0)]
                        float[] primvars:displayOpacity = [0.5]
                    }
                }

                def Xform "cabinet6_collision_2" (
                    prepend apiSchemas = ["PhysicsMassAPI"]
                )
                {
                    point3f physics:centerOfMass = (0, 0, 0)
                    float physics:density = 100
                    float3 physics:diagonalInertia = (-18.060179, -14.643586, 35.56239)
                    float physics:mass = 2.06971
                    quatf physics:principalAxes = (-0.06348074, 0.9944086, -0.03479899, -0.07688169)
                    matrix4d xformOp:transform = ( (0.27726, 0, 0, 0), (0, 0.184833, 0, 0), (0, 0, 0.008, 0), (0, 0, -0.391006, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]

                    def Cube "Cube" (
                        prepend apiSchemas = ["PhysicsCollisionAPI"]
                    )
                    {
                        float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                        bool physics:collisionEnabled = 1
                        color3f[] primvars:displayColor = [(1, 0, 0)]
                        float[] primvars:displayOpacity = [0.5]
                    }
                }

                def Xform "cabinet6_collision_3" (
                    prepend apiSchemas = ["PhysicsMassAPI"]
                )
                {
                    point3f physics:centerOfMass = (0, 0, 0)
                    float physics:density = 100
                    float3 physics:diagonalInertia = (-18.060179, -14.643586, 35.56239)
                    float physics:mass = 2.06971
                    quatf physics:principalAxes = (-0.06348074, 0.9944086, -0.03479899, -0.07688169)
                    matrix4d xformOp:transform = ( (0.04, 0, 0, 0), (0, 0.184833, 0, 0), (0, 0, 0.008, 0), (0.217476, 0, 0.390909, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]

                    def Cube "Cube" (
                        prepend apiSchemas = ["PhysicsCollisionAPI"]
                    )
                    {
                        float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                        bool physics:collisionEnabled = 1
                        color3f[] primvars:displayColor = [(1, 0, 0)]
                        float[] primvars:displayOpacity = [0.5]
                    }
                }

                def Xform "cabinet6_collision_4" (
                    prepend apiSchemas = ["PhysicsMassAPI"]
                )
                {
                    point3f physics:centerOfMass = (0, 0, 0)
                    float physics:density = 100
                    float3 physics:diagonalInertia = (-18.060179, -14.643586, 35.56239)
                    float physics:mass = 2.06971
                    quatf physics:principalAxes = (-0.06348074, 0.9944086, -0.03479899, -0.07688169)
                    matrix4d xformOp:transform = ( (0.004, 0, 0, 0), (0, 0.184833, 0, 0), (0, 0, 0.38291, 0), (0.261473, 0, 0, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]

                    def Cube "Cube" (
                        prepend apiSchemas = ["PhysicsCollisionAPI"]
                    )
                    {
                        float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                        bool physics:collisionEnabled = 1
                        color3f[] primvars:displayColor = [(1, 0, 0)]
                        float[] primvars:displayOpacity = [0.5]
                    }
                }

                def PhysicsPrismaticJoint "cabinet6_drawer1_joint"
                {
                    uniform token physics:axis = "Z"
                    rel physics:body0 = </apartment_root/kitchen_root/kitchen1_root/cabinet6>
                    rel physics:body1 = </apartment_root/cabinet6_drawer1>
                    bool physics:collisionEnabled = 0
                    point3f physics:localPos0 = (-0.05329598, -0.00032649, 0.33177838)
                    point3f physics:localPos1 = (0, 0, 0)
                    quatf physics:localRot0 = (0.7071068, 0, -0.7071068, 0)
                    quatf physics:localRot1 = (0.7071068, 0, -0.7071068, 0)
                    float physics:lowerLimit = 0
                    float physics:upperLimit = 0.45
                }

                def PhysicsPrismaticJoint "cabinet6_drawer2_joint"
                {
                    uniform token physics:axis = "Z"
                    rel physics:body0 = </apartment_root/kitchen_root/kitchen1_root/cabinet6>
                    rel physics:body1 = </apartment_root/cabinet6_drawer2>
                    bool physics:collisionEnabled = 0
                    point3f physics:localPos0 = (-0.05305687, -0.00074397, 0.13296878)
                    point3f physics:localPos1 = (0, 0, 0)
                    quatf physics:localRot0 = (0.7071068, 0, -0.7071068, 0)
                    quatf physics:localRot1 = (0.7071068, 0, -0.7071068, 0)
                    float physics:lowerLimit = 0
                    float physics:upperLimit = 0.45
                }

                def PhysicsPrismaticJoint "cabinet6_drawer3_joint"
                {
                    uniform token physics:axis = "Z"
                    rel physics:body0 = </apartment_root/kitchen_root/kitchen1_root/cabinet6>
                    rel physics:body1 = </apartment_root/cabinet6_drawer3>
                    bool physics:collisionEnabled = 0
                    point3f physics:localPos0 = (-0.05279762, -0.00069453, -0.19690865)
                    point3f physics:localPos1 = (0, 0, 0)
                    quatf physics:localRot0 = (0.7071068, 0, -0.7071068, 0)
                    quatf physics:localRot1 = (0.7071068, 0, -0.7071068, 0)
                    float physics:lowerLimit = 0
                    float physics:upperLimit = 0.45
                }
            }

            def Xform "island_cover4"
            {
                matrix4d xformOp:transform = ( (-1, 1.2246467991473532e-16, 0, 0), (-1.2246467991473532e-16, -1, 0, 0), (0, 0, 1, 0), (0.27259209, 3.79515656, 0.44601677, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]

                def Xform "island_cover4_visual_0" (
                    prepend references = @./../meshes/usd/visual/SM_Kitchen_Island_Cover_04.usda@</SM_Kitchen_Island_Cover_04>
                )
                {
                    matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]

                    over "SM_Kitchen_Island_Cover_03" (
                        prepend apiSchemas = ["MaterialBindingAPI"]
                    )
                    {
                        rel material:binding = </_materials/_Game_Materials_Laborraum_M_Kitchen_Fronts_M_Kitchen_Fronts_020>
                    }
                }

                def Xform "island_cover4_collision_0" (
                    prepend apiSchemas = ["PhysicsMassAPI"]
                )
                {
                    point3f physics:centerOfMass = (0, 0, 0)
                    float physics:density = 100
                    float3 physics:diagonalInertia = (-9.136805, -5.1483397, 9.507918)
                    float physics:mass = 1.0662785
                    quatf physics:principalAxes = (-0.10695949, 0.98787034, -0.039684184, -0.105342336)
                    matrix4d xformOp:transform = ( (0.296074, 0, 0, 0), (0, 0.009554, 0, 0), (0, 0, 0.4485065, 0), (0, 0, 0, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]

                    def Cube "Cube" (
                        prepend apiSchemas = ["PhysicsCollisionAPI"]
                    )
                    {
                        float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                        bool physics:collisionEnabled = 1
                        color3f[] primvars:displayColor = [(1, 0, 0)]
                        float[] primvars:displayOpacity = [0.5]
                    }
                }
            }

            def Xform "kitchen1_base_board"
            {
                matrix4d xformOp:transform = ( (-1, 1.2246467991473532e-16, 0, 0), (-1.2246467991473532e-16, -1, 0, 0), (0, 0, 1, 0), (0.55976036, 2.47825577, 0.05168431, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]

                def Xform "kitchen1_base_board_visual_0" (
                    prepend references = @./../meshes/usd/visual/SM_Kitchen_Base_Board_01.usda@</SM_Kitchen_Base_Board_01>
                )
                {
                    matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]

                    over "SM_Kitchen_Base_Board_01" (
                        prepend apiSchemas = ["MaterialBindingAPI"]
                    )
                    {
                        rel material:binding = </_materials/_Game_Materials_Laborraum_M_Kitchen_Fronts_M_Kitchen_Fronts_019>
                    }
                }

                def Xform "kitchen1_base_board_collision_0" (
                    prepend apiSchemas = ["PhysicsMassAPI"]
                )
                {
                    point3f physics:centerOfMass = (0, 0, 0)
                    float physics:density = 100
                    float3 physics:diagonalInertia = (-35.31626, -26.393892, 44.656456)
                    float physics:mass = 0.5203502
                    quatf physics:principalAxes = (0.15427001, 0.37627965, 0.6907834, -0.59785676)
                    matrix4d xformOp:transform = ( (0.009889, 0, 0, 0), (0, 1.30158, 0, 0), (0, 0, 0.05, 0), (0, 0, 0, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]

                    def Cube "Cube" (
                        prepend apiSchemas = ["PhysicsCollisionAPI"]
                    )
                    {
                        float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                        bool physics:collisionEnabled = 1
                        color3f[] primvars:displayColor = [(1, 0, 0)]
                        float[] primvars:displayOpacity = [0.5]
                    }
                }
            }
        }

        def Xform "kitchen2_root"
        {
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0.1, 0, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Xform "counter_sink_stove"
            {
                matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (2.65274353, 2.70903961, 0.46562927, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]

                def Xform "counter_sink_stove_visual_0" (
                    prepend references = @./../meshes/usd/visual/SM_Counter_Sink_Stove.usda@</SM_Counter_Sink_Stove>
                )
                {
                    matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]

                    over "SM_Counter_Sink_Stove" (
                        prepend apiSchemas = ["MaterialBindingAPI"]
                    )
                    {
                        rel material:binding = </_materials/_Game_Materials_Laborraum_M_Wood_Counter_M_Wood_Counter>
                    }
                }

                def Xform "counter_sink_stove_collision_0" (
                    prepend apiSchemas = ["PhysicsMassAPI"]
                )
                {
                    point3f physics:centerOfMass = (0, 0, 0)
                    float physics:density = 100
                    float3 physics:diagonalInertia = (-610.05536, -412.67218, 1347.0183)
                    float physics:mass = 11.684655
                    quatf physics:principalAxes = (0.7271916, -0.5687975, -0.0818221, -0.37545547)
                    matrix4d xformOp:transform = ( (0.5, 0, 0, 0), (0, 0.0145, 0, 0), (0, 0, 0.467231, 0), (0, -1.5755, 0, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]

                    def Cube "Cube" (
                        prepend apiSchemas = ["PhysicsCollisionAPI"]
                    )
                    {
                        float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                        bool physics:collisionEnabled = 1
                        color3f[] primvars:displayColor = [(1, 0, 0)]
                        float[] primvars:displayOpacity = [0.5]
                    }
                }

                def Xform "counter_sink_stove_collision_1" (
                    prepend apiSchemas = ["PhysicsMassAPI"]
                )
                {
                    point3f physics:centerOfMass = (0, 0, 0)
                    float physics:density = 100
                    float3 physics:diagonalInertia = (-610.05536, -412.67218, 1347.0183)
                    float physics:mass = 11.684655
                    quatf physics:principalAxes = (0.7271916, -0.5687975, -0.0818221, -0.37545547)
                    matrix4d xformOp:transform = ( (0.237531, 0, 0, 0), (0, 1.58852, 0, 0), (0, 0, 0.015, 0), (0.262968, 0, 0.453637, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]

                    def Cube "Cube" (
                        prepend apiSchemas = ["PhysicsCollisionAPI"]
                    )
                    {
                        float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                        bool physics:collisionEnabled = 1
                        color3f[] primvars:displayColor = [(1, 0, 0)]
                        float[] primvars:displayOpacity = [0.5]
                    }
                }

                def Xform "counter_sink_stove_collision_2" (
                    prepend apiSchemas = ["PhysicsMassAPI"]
                )
                {
                    point3f physics:centerOfMass = (0, 0, 0)
                    float physics:density = 100
                    float3 physics:diagonalInertia = (-610.05536, -412.67218, 1347.0183)
                    float physics:mass = 11.684655
                    quatf physics:principalAxes = (0.7271916, -0.5687975, -0.0818221, -0.37545547)
                    matrix4d xformOp:transform = ( (0.048817, 0, 0, 0), (0, 1.58852, 0, 0), (0, 0, 0.015, 0), (-0.451058, 0, 0.453637, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]

                    def Cube "Cube" (
                        prepend apiSchemas = ["PhysicsCollisionAPI"]
                    )
                    {
                        float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                        bool physics:collisionEnabled = 1
                        color3f[] primvars:displayColor = [(1, 0, 0)]
                        float[] primvars:displayOpacity = [0.5]
                    }
                }

                def Xform "counter_sink_stove_collision_3" (
                    prepend apiSchemas = ["PhysicsMassAPI"]
                )
                {
                    point3f physics:centerOfMass = (0, 0, 0)
                    float physics:density = 100
                    float3 physics:diagonalInertia = (-610.05536, -412.67218, 1347.0183)
                    float physics:mass = 11.684655
                    quatf physics:principalAxes = (0.7271916, -0.5687975, -0.0818221, -0.37545547)
                    matrix4d xformOp:transform = ( (0.498, 0, 0, 0), (0, 0.367711, 0, 0), (0, 0, 0.015, 0), (0, 1.22213, 0.453637, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]

                    def Cube "Cube" (
                        prepend apiSchemas = ["PhysicsCollisionAPI"]
                    )
                    {
                        float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                        bool physics:collisionEnabled = 1
                        color3f[] primvars:displayColor = [(1, 0, 0)]
                        float[] primvars:displayOpacity = [0.5]
                    }
                }

                def Xform "counter_sink_stove_collision_4" (
                    prepend apiSchemas = ["PhysicsMassAPI"]
                )
                {
                    point3f physics:centerOfMass = (0, 0, 0)
                    float physics:density = 100
                    float3 physics:diagonalInertia = (-610.05536, -412.67218, 1347.0183)
                    float physics:mass = 11.684655
                    quatf physics:principalAxes = (0.7271916, -0.5687975, -0.0818221, -0.37545547)
                    matrix4d xformOp:transform = ( (0.498, 0, 0, 0), (0, 1.02804, 0, 0), (0, 0, 0.015, 0), (0, -0.560551, 0.453637, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]

                    def Cube "Cube" (
                        prepend apiSchemas = ["PhysicsCollisionAPI"]
                    )
                    {
                        float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                        bool physics:collisionEnabled = 1
                        color3f[] primvars:displayColor = [(1, 0, 0)]
                        float[] primvars:displayOpacity = [0.5]
                    }
                }

                def Xform "stove"
                {
                    matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (-0.15655746, -1.08145462, 0.47160622, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]

                    def Xform "stove_visual_0" (
                        prepend references = @./../meshes/usd/visual/SM_Stove.usda@</SM_Stove>
                    )
                    {
                        matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                        uniform token[] xformOpOrder = ["xformOp:transform"]

                        over "SM_Stove" (
                            prepend apiSchemas = ["MaterialBindingAPI"]
                        )
                        {
                            rel material:binding = </_materials/_Game_Materials_Laborraum_M_Glass_Stove_M_Glass_Stove>

                            over "_Game_Materials_Laborraum_M_Basic_Black_02_M_Basic_Black_02" (
                                prepend apiSchemas = ["MaterialBindingAPI"]
                            )
                            {
                                rel material:binding = </_materials/_Game_Materials_Laborraum_M_Basic_Black_02_M_Basic_Black_02>
                            }

                            over "_Game_Materials_Laborraum_M_Stove_M_Stove" (
                                prepend apiSchemas = ["MaterialBindingAPI"]
                            )
                            {
                                rel material:binding = </_materials/_Game_Materials_Laborraum_M_Stove_M_Stove>
                            }

                            over "_Game_Materials_Laborraum_M_Glass_Stove_M_Glass_Stove" (
                                prepend apiSchemas = ["MaterialBindingAPI"]
                            )
                            {
                                rel material:binding = </_materials/_Game_Materials_Laborraum_M_Glass_Stove_M_Glass_Stove>
                            }
                        }
                    }

                    def Xform "stove_collision_0" (
                        prepend apiSchemas = ["PhysicsMassAPI"]
                    )
                    {
                        point3f physics:centerOfMass = (0, 0, 0)
                        float physics:density = 100
                        float3 physics:diagonalInertia = (-5.2520304, -3.0201633, 5.2896795)
                        float physics:mass = 0.1316617
                        quatf physics:principalAxes = (-0.32529294, -0.2630213, 0.3935909, 0.8185906)
                        matrix4d xformOp:transform = ( (0.258, 0, 0, 0), (0, 0.3975, 0, 0), (0, 0, 0.002401, 0), (0, 0, 0, 1) )
                        uniform token[] xformOpOrder = ["xformOp:transform"]

                        def Cube "Cube" (
                            prepend apiSchemas = ["PhysicsCollisionAPI"]
                        )
                        {
                            float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                            bool physics:collisionEnabled = 1
                            color3f[] primvars:displayColor = [(1, 0, 0)]
                            float[] primvars:displayOpacity = [0.5]
                        }
                    }
                }

                def Xform "counter_sink"
                {
                    matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (-0.18887642, 0.66553391, 0.38240448, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]

                    def Xform "counter_sink_visual_0" (
                        prepend references = @./../meshes/usd/visual/SM_Counter_Sink.usda@</SM_Counter_Sink>
                    )
                    {
                        matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                        uniform token[] xformOpOrder = ["xformOp:transform"]

                        over "SM_Counter_Sink_001" (
                            prepend apiSchemas = ["MaterialBindingAPI"]
                        )
                        {
                            rel material:binding = </_materials/_Game_Materials_Laborraum_M_Metal_Chrome_Matte_M_Metal_Chro>
                        }
                    }

                    def Xform "counter_sink_collision_0" (
                        prepend apiSchemas = ["PhysicsMassAPI"]
                    )
                    {
                        point3f physics:centerOfMass = (0, 0, 0)
                        float physics:density = 100
                        float3 physics:diagonalInertia = (-1.0974481, -0.5444197, 3.317294)
                        float physics:mass = 0.83490825
                        quatf physics:principalAxes = (-0.5325044, -0.28525254, 0.766597, -0.21771346)
                        matrix4d xformOp:transform = ( (0.038996, 0, 0, 0), (0, 0.202106, 0, 0), (0, 0, 0.088694, 0), (0.18348, 0, 0, 1) )
                        uniform token[] xformOpOrder = ["xformOp:transform"]

                        def Cube "Cube" (
                            prepend apiSchemas = ["PhysicsCollisionAPI"]
                        )
                        {
                            float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                            bool physics:collisionEnabled = 1
                            color3f[] primvars:displayColor = [(1, 0, 0)]
                            float[] primvars:displayOpacity = [0.5]
                        }
                    }

                    def Xform "counter_sink_collision_1" (
                        prepend apiSchemas = ["PhysicsMassAPI"]
                    )
                    {
                        point3f physics:centerOfMass = (0, 0, 0)
                        float physics:density = 100
                        float3 physics:diagonalInertia = (-1.0974481, -0.5444197, 3.317294)
                        float physics:mass = 0.83490825
                        quatf physics:principalAxes = (-0.5325044, -0.28525254, 0.766597, -0.21771346)
                        matrix4d xformOp:transform = ( (0.01, 0, 0, 0), (0, 0.202106, 0, 0), (0, 0, 0.088694, 0), (-0.212477, 0, 0, 1) )
                        uniform token[] xformOpOrder = ["xformOp:transform"]

                        def Cube "Cube" (
                            prepend apiSchemas = ["PhysicsCollisionAPI"]
                        )
                        {
                            float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                            bool physics:collisionEnabled = 1
                            color3f[] primvars:displayColor = [(1, 0, 0)]
                            float[] primvars:displayOpacity = [0.5]
                        }
                    }

                    def Xform "counter_sink_collision_2" (
                        prepend apiSchemas = ["PhysicsMassAPI"]
                    )
                    {
                        point3f physics:centerOfMass = (0, 0, 0)
                        float physics:density = 100
                        float3 physics:diagonalInertia = (-1.0974481, -0.5444197, 3.317294)
                        float physics:mass = 0.83490825
                        quatf physics:principalAxes = (-0.5325044, -0.28525254, 0.766597, -0.21771346)
                        matrix4d xformOp:transform = ( (0.222309, 0, 0, 0), (0, 0.01, 0, 0), (0, 0, 0.088694, 0), (0, -0.192479, 0, 1) )
                        uniform token[] xformOpOrder = ["xformOp:transform"]

                        def Cube "Cube" (
                            prepend apiSchemas = ["PhysicsCollisionAPI"]
                        )
                        {
                            float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                            bool physics:collisionEnabled = 1
                            color3f[] primvars:displayColor = [(1, 0, 0)]
                            float[] primvars:displayOpacity = [0.5]
                        }
                    }

                    def Xform "counter_sink_collision_3" (
                        prepend apiSchemas = ["PhysicsMassAPI"]
                    )
                    {
                        point3f physics:centerOfMass = (0, 0, 0)
                        float physics:density = 100
                        float3 physics:diagonalInertia = (-1.0974481, -0.5444197, 3.317294)
                        float physics:mass = 0.83490825
                        quatf physics:principalAxes = (-0.5325044, -0.28525254, 0.766597, -0.21771346)
                        matrix4d xformOp:transform = ( (0.222309, 0, 0, 0), (0, 0.01, 0, 0), (0, 0, 0.088694, 0), (0, 0.192479, 0, 1) )
                        uniform token[] xformOpOrder = ["xformOp:transform"]

                        def Cube "Cube" (
                            prepend apiSchemas = ["PhysicsCollisionAPI"]
                        )
                        {
                            float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                            bool physics:collisionEnabled = 1
                            color3f[] primvars:displayColor = [(1, 0, 0)]
                            float[] primvars:displayOpacity = [0.5]
                        }
                    }

                    def Xform "counter_sink_collision_4" (
                        prepend apiSchemas = ["PhysicsMassAPI"]
                    )
                    {
                        point3f physics:centerOfMass = (0, 0, 0)
                        float physics:density = 100
                        float3 physics:diagonalInertia = (-1.0974481, -0.5444197, 3.317294)
                        float physics:mass = 0.83490825
                        quatf physics:principalAxes = (-0.5325044, -0.28525254, 0.766597, -0.21771346)
                        matrix4d xformOp:transform = ( (0.222309, 0, 0, 0), (0, 0.202106, 0, 0), (0, 0, 0.013701, 0), (0, 0, -0.074992, 1) )
                        uniform token[] xformOpOrder = ["xformOp:transform"]

                        def Cube "Cube" (
                            prepend apiSchemas = ["PhysicsCollisionAPI"]
                        )
                        {
                            float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                            bool physics:collisionEnabled = 1
                            color3f[] primvars:displayColor = [(1, 0, 0)]
                            float[] primvars:displayOpacity = [0.5]
                        }
                    }

                    def Xform "counter_watertab"
                    {
                        matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0.07677188, -0.01961838, 0.2389875, 1) )
                        uniform token[] xformOpOrder = ["xformOp:transform"]

                        def Xform "counter_watertab_visual_0" (
                            prepend references = @./../meshes/usd/visual/SM_Counter_Watertab.usda@</SM_Counter_Watertab>
                        )
                        {
                            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                            uniform token[] xformOpOrder = ["xformOp:transform"]

                            over "SM_Counter_Watertab" (
                                prepend apiSchemas = ["MaterialBindingAPI"]
                            )
                            {
                                rel material:binding = </_materials/_Game_Materials_Laborraum_M_Metal_Chrome_Matte_M_Metal_Chrome_M>
                            }
                        }

                        def Xform "counter_watertab_collision_0" (
                            prepend apiSchemas = ["PhysicsMassAPI"]
                        )
                        {
                            point3f physics:centerOfMass = (0, 0, 0)
                            float physics:density = 100
                            float3 physics:diagonalInertia = (-0.04881712, -0.01974493, 0.13090459)
                            float physics:mass = 0.044203907
                            quatf physics:principalAxes = (0.36375836, 0.67893517, -0.6171323, -0.1608559)
                            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0.113704, 0.0195, -0.11162, 1) )
                            uniform token[] xformOpOrder = ["xformOp:transform"]

                            def Cylinder "Cylinder" (
                                prepend apiSchemas = ["PhysicsCollisionAPI"]
                            )
                            {
                                float3[] extent = [(-0.022435, -0.022435, -0.038739), (0.022435, 0.022435, 0.038739)]
                                double height = 0.077478
                                bool physics:collisionEnabled = 1
                                color3f[] primvars:displayColor = [(1, 0, 0)]
                                float[] primvars:displayOpacity = [0.5]
                                double radius = 0.022435
                            }
                        }

                        def Xform "counter_watertab_collision_1" (
                            prepend apiSchemas = ["PhysicsMassAPI"]
                        )
                        {
                            point3f physics:centerOfMass = (0, 0, 0)
                            float physics:density = 100
                            float3 physics:diagonalInertia = (-0.04881712, -0.01974493, 0.13090459)
                            float physics:mass = 0.044203907
                            quatf physics:principalAxes = (0.36375836, 0.67893517, -0.6171323, -0.1608559)
                            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0.113704, 0.0195, 0.041404, 1) )
                            uniform token[] xformOpOrder = ["xformOp:transform"]

                            def Cylinder "Cylinder" (
                                prepend apiSchemas = ["PhysicsCollisionAPI"]
                            )
                            {
                                float3[] extent = [(-0.014, -0.014, -0.10908), (0.014, 0.014, 0.10908)]
                                double height = 0.21816
                                bool physics:collisionEnabled = 1
                                color3f[] primvars:displayColor = [(1, 0, 0)]
                                float[] primvars:displayOpacity = [0.5]
                                double radius = 0.014
                            }
                        }

                        def Xform "counter_watertab_collision_2" (
                            prepend apiSchemas = ["PhysicsMassAPI"]
                        )
                        {
                            point3f physics:centerOfMass = (0, 0, 0)
                            float physics:density = 100
                            float3 physics:diagonalInertia = (-0.04881712, -0.01974493, 0.13090459)
                            float physics:mass = 0.044203907
                            quatf physics:principalAxes = (0.36375836, 0.67893517, -0.6171323, -0.1608559)
                            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (-0.116237, 0.0195, 0.121328, 1) )
                            uniform token[] xformOpOrder = ["xformOp:transform"]

                            def Cylinder "Cylinder" (
                                prepend apiSchemas = ["PhysicsCollisionAPI"]
                            )
                            {
                                float3[] extent = [(-0.010966, -0.010966, -0.003818), (0.010966, 0.010966, 0.003818)]
                                double height = 0.007636
                                bool physics:collisionEnabled = 1
                                color3f[] primvars:displayColor = [(1, 0, 0)]
                                float[] primvars:displayOpacity = [0.5]
                                double radius = 0.010966
                            }
                        }

                        def Xform "counter_watertab_collision_3" (
                            prepend apiSchemas = ["PhysicsMassAPI"]
                        )
                        {
                            point3f physics:centerOfMass = (0, 0, 0)
                            float physics:density = 100
                            float3 physics:diagonalInertia = (-0.04881712, -0.01974493, 0.13090459)
                            float physics:mass = 0.044203907
                            quatf physics:principalAxes = (0.36375836, 0.67893517, -0.6171323, -0.1608559)
                            matrix4d xformOp:transform = ( (0, 2.220446049250313e-16, -1, 0), (-1, 2.220446049250313e-16, 0, 0), (2.220446049250313e-16, 1, 2.220446049250313e-16, 0), (0.113731, 0.009, -0.073523, 1) )
                            uniform token[] xformOpOrder = ["xformOp:transform"]

                            def Cylinder "Cylinder" (
                                prepend apiSchemas = ["PhysicsCollisionAPI"]
                            )
                            {
                                float3[] extent = [(-0.022466, -0.022466, -0.044495), (0.022466, 0.022466, 0.044495)]
                                double height = 0.08899
                                bool physics:collisionEnabled = 1
                                color3f[] primvars:displayColor = [(1, 0, 0)]
                                float[] primvars:displayOpacity = [0.5]
                                double radius = 0.022466
                            }
                        }

                        def Xform "counter_watertab_collision_4" (
                            prepend apiSchemas = ["PhysicsMassAPI"]
                        )
                        {
                            point3f physics:centerOfMass = (0, 0, 0)
                            float physics:density = 100
                            float3 physics:diagonalInertia = (-0.04881712, -0.01974493, 0.13090459)
                            float physics:mass = 0.044203907
                            quatf physics:principalAxes = (0.36375836, 0.67893517, -0.6171323, -0.1608559)
                            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0.113738, -0.035496, -0.073492, 1) )
                            uniform token[] xformOpOrder = ["xformOp:transform"]

                            def Sphere "Sphere" (
                                prepend apiSchemas = ["PhysicsCollisionAPI"]
                            )
                            {
                                float3[] extent = [(-0.018, -0.018, -0.018), (0.018, 0.018, 0.018)]
                                bool physics:collisionEnabled = 1
                                color3f[] primvars:displayColor = [(1, 0, 0)]
                                float[] primvars:displayOpacity = [0.5]
                                double radius = 0.018
                            }
                        }

                        def Xform "counter_watertab_collision_5" (
                            prepend apiSchemas = ["PhysicsMassAPI"]
                        )
                        {
                            point3f physics:centerOfMass = (0, 0, 0)
                            float physics:density = 100
                            float3 physics:diagonalInertia = (-0.04881712, -0.01974493, 0.13090459)
                            float physics:mass = 0.044203907
                            quatf physics:principalAxes = (0.36375836, 0.67893517, -0.6171323, -0.1608559)
                            matrix4d xformOp:transform = ( (2.220446049250313e-16, 1, 0, 0), (-2.220446049250313e-16, 0, 1, 0), (1, -2.220446049250313e-16, 2.220446049250313e-16, 0), (-0.00425, 0.019498, 0.136485, 1) )
                            uniform token[] xformOpOrder = ["xformOp:transform"]

                            def Cylinder "Cylinder" (
                                prepend apiSchemas = ["PhysicsCollisionAPI"]
                            )
                            {
                                float3[] extent = [(-0.014, -0.014, -0.131986), (0.014, 0.014, 0.131986)]
                                double height = 0.263972
                                bool physics:collisionEnabled = 1
                                color3f[] primvars:displayColor = [(1, 0, 0)]
                                float[] primvars:displayOpacity = [0.5]
                                double radius = 0.014
                            }
                        }

                        def PhysicsRevoluteJoint "counter_sink_tap_temperature_joint"
                        {
                            uniform token physics:axis = "Z"
                            rel physics:body0 = </apartment_root/kitchen_root/kitchen2_root/counter_sink_stove/counter_sink/counter_watertab>
                            rel physics:body1 = </apartment_root/counter_sink_tap_switch>
                            bool physics:collisionEnabled = 0
                            point3f physics:localPos0 = (0.11371069, -0.04055276, -0.07370445)
                            point3f physics:localPos1 = (0, 0, 0)
                            quatf physics:localRot0 = (4.3297803e-17, 4.3297803e-17, 0.7071068, 0.7071068)
                            quatf physics:localRot1 = (0.7071068, 0.7071068, 0, 0)
                            float physics:lowerLimit = -90
                            float physics:upperLimit = 90
                        }
                    }
                }
            }

            def Xform "dishwasher"
            {
                matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (2.32419296, 3.96355377, 0.16226444, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]

                def Xform "dishwasher_visual_0" (
                    prepend references = @./../meshes/usd/visual/SM_Dishwasher_Base.usda@</SM_Dishwasher_Base>
                )
                {
                    matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]

                    over "SM_Dishwasher_Base" (
                        prepend apiSchemas = ["MaterialBindingAPI"]
                    )
                    {
                        rel material:binding = </_materials/_Game_Materials_Laborraum_M_Metal_Dishwasher_M_Metal_Dishwasher>

                        over "_Game_Materials_Laborraum_M_Metal_Dishwasher_M_Metal_Dishwasher" (
                            prepend apiSchemas = ["MaterialBindingAPI"]
                        )
                        {
                            rel material:binding = </_materials/_Game_Materials_Laborraum_M_Metal_Dishwasher_M_Metal_Dishwasher>
                        }

                        over "_Game_Materials_Laborraum_M_Rubber_Plastic_M_Rubber_Plastic" (
                            prepend apiSchemas = ["MaterialBindingAPI"]
                        )
                        {
                            rel material:binding = </_materials/_Game_Materials_Laborraum_M_Rubber_Plastic_M_Rubber_Plastic>
                        }
                    }
                }

                def Xform "dishwasher_collision_0" (
                    prepend apiSchemas = ["PhysicsMassAPI"]
                )
                {
                    point3f physics:centerOfMass = (0, 0, 0)
                    float physics:density = 100
                    float3 physics:diagonalInertia = (-23.674686, -21.863699, 87.42639)
                    float physics:mass = 17.445786
                    quatf physics:principalAxes = (-0.037468743, 0.9981903, -0.02101586, -0.042078767)
                    matrix4d xformOp:transform = ( (0.197879, 0, 0, 0), (0, 0.007724, 0, 0), (0, 0, 0.420898, 0), (0.244142, 0.291193, 0.25785, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]

                    def Cube "Cube" (
                        prepend apiSchemas = ["PhysicsCollisionAPI"]
                    )
                    {
                        float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                        bool physics:collisionEnabled = 1
                        color3f[] primvars:displayColor = [(1, 0, 0)]
                        float[] primvars:displayOpacity = [0.5]
                    }
                }

                def Xform "dishwasher_collision_1" (
                    prepend apiSchemas = ["PhysicsMassAPI"]
                )
                {
                    point3f physics:centerOfMass = (0, 0, 0)
                    float physics:density = 100
                    float3 physics:diagonalInertia = (-23.674686, -21.863699, 87.42639)
                    float physics:mass = 17.445786
                    quatf physics:principalAxes = (-0.037468743, 0.9981903, -0.02101586, -0.042078767)
                    matrix4d xformOp:transform = ( (0.197879, 0, 0, 0), (0, 0.007724, 0, 0), (0, 0, 0.420898, 0), (0.244142, -0.291193, 0.25785, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]

                    def Cube "Cube" (
                        prepend apiSchemas = ["PhysicsCollisionAPI"]
                    )
                    {
                        float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                        bool physics:collisionEnabled = 1
                        color3f[] primvars:displayColor = [(1, 0, 0)]
                        float[] primvars:displayOpacity = [0.5]
                    }
                }

                def Xform "dishwasher_collision_2" (
                    prepend apiSchemas = ["PhysicsMassAPI"]
                )
                {
                    point3f physics:centerOfMass = (0, 0, 0)
                    float physics:density = 100
                    float3 physics:diagonalInertia = (-23.674686, -21.863699, 87.42639)
                    float physics:mass = 17.445786
                    quatf physics:principalAxes = (-0.037468743, 0.9981903, -0.02101586, -0.042078767)
                    matrix4d xformOp:transform = ( (0.064761, 0, 0, 0), (0, 0.007724, 0, 0), (0, 0, 0.351941, 0), (-0.018498, 0.291193, 0.328806, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]

                    def Cube "Cube" (
                        prepend apiSchemas = ["PhysicsCollisionAPI"]
                    )
                    {
                        float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                        bool physics:collisionEnabled = 1
                        color3f[] primvars:displayColor = [(1, 0, 0)]
                        float[] primvars:displayOpacity = [0.5]
                    }
                }

                def Xform "dishwasher_collision_3" (
                    prepend apiSchemas = ["PhysicsMassAPI"]
                )
                {
                    point3f physics:centerOfMass = (0, 0, 0)
                    float physics:density = 100
                    float3 physics:diagonalInertia = (-23.674686, -21.863699, 87.42639)
                    float physics:mass = 17.445786
                    quatf physics:principalAxes = (-0.037468743, 0.9981903, -0.02101586, -0.042078767)
                    matrix4d xformOp:transform = ( (0.064761, 0, 0, 0), (0, 0.007724, 0, 0), (0, 0, 0.351941, 0), (-0.018498, -0.291193, 0.328806, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]

                    def Cube "Cube" (
                        prepend apiSchemas = ["PhysicsCollisionAPI"]
                    )
                    {
                        float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                        bool physics:collisionEnabled = 1
                        color3f[] primvars:displayColor = [(1, 0, 0)]
                        float[] primvars:displayOpacity = [0.5]
                    }
                }

                def Xform "dishwasher_collision_4" (
                    prepend apiSchemas = ["PhysicsMassAPI"]
                )
                {
                    point3f physics:centerOfMass = (0, 0, 0)
                    float physics:density = 100
                    float3 physics:diagonalInertia = (-23.674686, -21.863699, 87.42639)
                    float physics:mass = 17.445786
                    quatf physics:principalAxes = (-0.037468743, 0.9981903, -0.02101586, -0.042078767)
                    matrix4d xformOp:transform = ( (0.002413, 0, 0, 0), (0, 0.298917, 0, 0), (0, 0, 0.420898, 0), (0.439555, 0, 0.25785, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]

                    def Cube "Cube" (
                        prepend apiSchemas = ["PhysicsCollisionAPI"]
                    )
                    {
                        float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                        bool physics:collisionEnabled = 1
                        color3f[] primvars:displayColor = [(1, 0, 0)]
                        float[] primvars:displayOpacity = [0.5]
                    }
                }

                def Xform "dishwasher_collision_5" (
                    prepend apiSchemas = ["PhysicsMassAPI"]
                )
                {
                    point3f physics:centerOfMass = (0, 0, 0)
                    float physics:density = 100
                    float3 physics:diagonalInertia = (-23.674686, -21.863699, 87.42639)
                    float physics:mass = 17.445786
                    quatf physics:principalAxes = (-0.037468743, 0.9981903, -0.02101586, -0.042078767)
                    matrix4d xformOp:transform = ( (0.258487, 0, 0, 0), (0, 0.298917, 0, 0), (0, 0, 0.006749, 0), (0.183466, 0, 0.671998, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]

                    def Cube "Cube" (
                        prepend apiSchemas = ["PhysicsCollisionAPI"]
                    )
                    {
                        float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                        bool physics:collisionEnabled = 1
                        color3f[] primvars:displayColor = [(1, 0, 0)]
                        float[] primvars:displayOpacity = [0.5]
                    }
                }

                def Xform "dishwasher_collision_6" (
                    prepend apiSchemas = ["PhysicsMassAPI"]
                )
                {
                    point3f physics:centerOfMass = (0, 0, 0)
                    float physics:density = 100
                    float3 physics:diagonalInertia = (-23.674686, -21.863699, 87.42639)
                    float physics:mass = 17.445786
                    quatf physics:principalAxes = (-0.037468743, 0.9981903, -0.02101586, -0.042078767)
                    matrix4d xformOp:transform = ( (0.258487, 0, 0, 0), (0, 0.298917, 0, 0), (0, 0, 0.083552, 0), (0.183466, 0, -0.079608, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]

                    def Cube "Cube" (
                        prepend apiSchemas = ["PhysicsCollisionAPI"]
                    )
                    {
                        float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                        bool physics:collisionEnabled = 1
                        color3f[] primvars:displayColor = [(1, 0, 0)]
                        float[] primvars:displayOpacity = [0.5]
                    }
                }

                def PhysicsRevoluteJoint "dishwasher_front_joint"
                {
                    uniform token physics:axis = "Z"
                    rel physics:body0 = </apartment_root/kitchen_root/kitchen2_root/dishwasher>
                    rel physics:body1 = </apartment_root/dishwasher_front>
                    bool physics:collisionEnabled = 0
                    point3f physics:localPos0 = (-0.07612121, 0.00031149, 0.00728645)
                    point3f physics:localPos1 = (0, 0, 0)
                    quatf physics:localRot0 = (0, 0, 0.70710677, -0.70710677)
                    quatf physics:localRot1 = (0, 0, 1, 0)
                    float physics:lowerLimit = 0
                    float physics:upperLimit = 90
                }
            }

            def Xform "cabinet8"
            {
                matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (2.49268082, 3.37232117, 0.49448143, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]

                def Xform "cabinet8_visual_0" (
                    prepend references = @./../meshes/usd/visual/SM_Kitchen_08_Sink_Base.usda@</SM_Kitchen_08_Sink_Base>
                )
                {
                    matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]

                    over "SM_Kitchen_08_Sink_Base" (
                        prepend apiSchemas = ["MaterialBindingAPI"]
                    )
                    {
                        rel material:binding = </_materials/_Game_Materials_Laborraum_M_Plastic_White_M_Plastic_White_004>
                    }
                }

                def Xform "cabinet8_collision_0" (
                    prepend apiSchemas = ["PhysicsMassAPI"]
                )
                {
                    point3f physics:centerOfMass = (0, 0, 0)
                    float physics:density = 100
                    float3 physics:diagonalInertia = (-22.30877, -18.260296, 48.61338)
                    float physics:mass = 2.372125
                    quatf physics:principalAxes = (0.9000472, -0.34886488, 0.1717452, -0.19675355)
                    matrix4d xformOp:transform = ( (0.277025, 0, 0, 0), (0, 0.007942, 0, 0), (0, 0, 0.398895, 0), (0, 0.291912, 0, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]

                    def Cube "Cube" (
                        prepend apiSchemas = ["PhysicsCollisionAPI"]
                    )
                    {
                        float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                        bool physics:collisionEnabled = 1
                        color3f[] primvars:displayColor = [(1, 0, 0)]
                        float[] primvars:displayOpacity = [0.5]
                    }
                }

                def Xform "cabinet8_collision_1" (
                    prepend apiSchemas = ["PhysicsMassAPI"]
                )
                {
                    point3f physics:centerOfMass = (0, 0, 0)
                    float physics:density = 100
                    float3 physics:diagonalInertia = (-22.30877, -18.260296, 48.61338)
                    float physics:mass = 2.372125
                    quatf physics:principalAxes = (0.9000472, -0.34886488, 0.1717452, -0.19675355)
                    matrix4d xformOp:transform = ( (0.277025, 0, 0, 0), (0, 0.007942, 0, 0), (0, 0, 0.398895, 0), (0, -0.291912, 0, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]

                    def Cube "Cube" (
                        prepend apiSchemas = ["PhysicsCollisionAPI"]
                    )
                    {
                        float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                        bool physics:collisionEnabled = 1
                        color3f[] primvars:displayColor = [(1, 0, 0)]
                        float[] primvars:displayOpacity = [0.5]
                    }
                }

                def Xform "cabinet8_collision_2" (
                    prepend apiSchemas = ["PhysicsMassAPI"]
                )
                {
                    point3f physics:centerOfMass = (0, 0, 0)
                    float physics:density = 100
                    float3 physics:diagonalInertia = (-22.30877, -18.260296, 48.61338)
                    float physics:mass = 2.372125
                    quatf physics:principalAxes = (0.9000472, -0.34886488, 0.1717452, -0.19675355)
                    matrix4d xformOp:transform = ( (0.003944, 0, 0, 0), (0, 0.284067, 0, 0), (0, 0, 0.382909, 0), (0.26153, 0, 0, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]

                    def Cube "Cube" (
                        prepend apiSchemas = ["PhysicsCollisionAPI"]
                    )
                    {
                        float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                        bool physics:collisionEnabled = 1
                        color3f[] primvars:displayColor = [(1, 0, 0)]
                        float[] primvars:displayOpacity = [0.5]
                    }
                }

                def Xform "cabinet8_collision_3" (
                    prepend apiSchemas = ["PhysicsMassAPI"]
                )
                {
                    point3f physics:centerOfMass = (0, 0, 0)
                    float physics:density = 100
                    float3 physics:diagonalInertia = (-22.30877, -18.260296, 48.61338)
                    float physics:mass = 2.372125
                    quatf physics:principalAxes = (0.9000472, -0.34886488, 0.1717452, -0.19675355)
                    matrix4d xformOp:transform = ( (0.04, 0, 0, 0), (0, 0.284067, 0, 0), (0, 0, 0.008, 0), (0.217476, 0, 0.39091, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]

                    def Cube "Cube" (
                        prepend apiSchemas = ["PhysicsCollisionAPI"]
                    )
                    {
                        float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                        bool physics:collisionEnabled = 1
                        color3f[] primvars:displayColor = [(1, 0, 0)]
                        float[] primvars:displayOpacity = [0.5]
                    }
                }

                def Xform "cabinet8_collision_4" (
                    prepend apiSchemas = ["PhysicsMassAPI"]
                )
                {
                    point3f physics:centerOfMass = (0, 0, 0)
                    float physics:density = 100
                    float3 physics:diagonalInertia = (-22.30877, -18.260296, 48.61338)
                    float physics:mass = 2.372125
                    quatf physics:principalAxes = (0.9000472, -0.34886488, 0.1717452, -0.19675355)
                    matrix4d xformOp:transform = ( (0.277025, 0, 0, 0), (0, 0.284067, 0, 0), (0, 0, 0.008, 0), (0, 0, -0.391005, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]

                    def Cube "Cube" (
                        prepend apiSchemas = ["PhysicsCollisionAPI"]
                    )
                    {
                        float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                        bool physics:collisionEnabled = 1
                        color3f[] primvars:displayColor = [(1, 0, 0)]
                        float[] primvars:displayOpacity = [0.5]
                    }
                }

                def PhysicsPrismaticJoint "sink_drawer1_joint"
                {
                    uniform token physics:axis = "Z"
                    rel physics:body0 = </apartment_root/kitchen_root/kitchen2_root/cabinet8>
                    rel physics:body1 = </apartment_root/sink_drawer1>
                    bool physics:collisionEnabled = 0
                    point3f physics:localPos0 = (-0.05086624, 0.00013535, 0.0032)
                    point3f physics:localPos1 = (0, 0, 0)
                    quatf physics:localRot0 = (0.7071068, 0, -0.7071068, 0)
                    quatf physics:localRot1 = (0.7071068, 0, -0.7071068, 0)
                    float physics:lowerLimit = 0
                    float physics:upperLimit = 0.45
                }

                def PhysicsPrismaticJoint "sink_drawer2_joint"
                {
                    uniform token physics:axis = "Z"
                    rel physics:body0 = </apartment_root/kitchen_root/kitchen2_root/cabinet8>
                    rel physics:body1 = </apartment_root/sink_drawer2>
                    bool physics:collisionEnabled = 0
                    point3f physics:localPos0 = (-0.07299484, 0.00142344, 0.16437714)
                    point3f physics:localPos1 = (0, 0, 0)
                    quatf physics:localRot0 = (0.7071068, 0, -0.7071068, 0)
                    quatf physics:localRot1 = (0.7071068, 0, -0.7071068, 0)
                    float physics:lowerLimit = 0
                    float physics:upperLimit = 0.3
                }
            }

            def Xform "cabinet9"
            {
                matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (2.49288239, 2.77268799, 0.49406776, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]

                def Xform "cabinet9_visual_0" (
                    prepend references = @./../meshes/usd/visual/SM_Kitchen_09_Base.usda@</SM_Kitchen_09_Base>
                )
                {
                    matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]

                    over "SM_Kitchen_09_Base" (
                        prepend apiSchemas = ["MaterialBindingAPI"]
                    )
                    {
                        rel material:binding = </_materials/_Game_Materials_Laborraum_M_Plastic_White_M_Plastic_White_007>

                        over "_Game_Materials_Laborraum_M_Metal_Chrome_M_Metal_Chrome" (
                            prepend apiSchemas = ["MaterialBindingAPI"]
                        )
                        {
                            rel material:binding = </_materials/_Game_Materials_Laborraum_M_Metal_Chrome_M_Metal_Chrome>
                        }

                        over "_Game_Materials_Laborraum_M_Plastic_White_M_Plastic_White_007" (
                            prepend apiSchemas = ["MaterialBindingAPI"]
                        )
                        {
                            rel material:binding = </_materials/_Game_Materials_Laborraum_M_Plastic_White_M_Plastic_White_007>
                        }
                    }
                }

                def Xform "cabinet9_collision_0" (
                    prepend apiSchemas = ["PhysicsMassAPI"]
                )
                {
                    point3f physics:centerOfMass = (0, 0, 0)
                    float physics:density = 100
                    float3 physics:diagonalInertia = (-23.180628, -18.979626, 51.417446)
                    float physics:mass = 2.3936782
                    quatf physics:principalAxes = (0.8999928, -0.3515026, 0.1725769, -0.19151004)
                    matrix4d xformOp:transform = ( (0.277025, 0, 0, 0), (0, 0.007942, 0, 0), (0, 0, 0.398895, 0), (0, 0.291912, 0, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]

                    def Cube "Cube" (
                        prepend apiSchemas = ["PhysicsCollisionAPI"]
                    )
                    {
                        float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                        bool physics:collisionEnabled = 1
                        color3f[] primvars:displayColor = [(1, 0, 0)]
                        float[] primvars:displayOpacity = [0.5]
                    }
                }

                def Xform "cabinet9_collision_1" (
                    prepend apiSchemas = ["PhysicsMassAPI"]
                )
                {
                    point3f physics:centerOfMass = (0, 0, 0)
                    float physics:density = 100
                    float3 physics:diagonalInertia = (-23.180628, -18.979626, 51.417446)
                    float physics:mass = 2.3936782
                    quatf physics:principalAxes = (0.8999928, -0.3515026, 0.1725769, -0.19151004)
                    matrix4d xformOp:transform = ( (0.277025, 0, 0, 0), (0, 0.007942, 0, 0), (0, 0, 0.398895, 0), (0, -0.291912, 0, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]

                    def Cube "Cube" (
                        prepend apiSchemas = ["PhysicsCollisionAPI"]
                    )
                    {
                        float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                        bool physics:collisionEnabled = 1
                        color3f[] primvars:displayColor = [(1, 0, 0)]
                        float[] primvars:displayOpacity = [0.5]
                    }
                }

                def Xform "cabinet9_collision_2" (
                    prepend apiSchemas = ["PhysicsMassAPI"]
                )
                {
                    point3f physics:centerOfMass = (0, 0, 0)
                    float physics:density = 100
                    float3 physics:diagonalInertia = (-23.180628, -18.979626, 51.417446)
                    float physics:mass = 2.3936782
                    quatf physics:principalAxes = (0.8999928, -0.3515026, 0.1725769, -0.19151004)
                    matrix4d xformOp:transform = ( (0.003944, 0, 0, 0), (0, 0.284067, 0, 0), (0, 0, 0.382909, 0), (0.26153, 0, 0, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]

                    def Cube "Cube" (
                        prepend apiSchemas = ["PhysicsCollisionAPI"]
                    )
                    {
                        float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                        bool physics:collisionEnabled = 1
                        color3f[] primvars:displayColor = [(1, 0, 0)]
                        float[] primvars:displayOpacity = [0.5]
                    }
                }

                def Xform "cabinet9_collision_3" (
                    prepend apiSchemas = ["PhysicsMassAPI"]
                )
                {
                    point3f physics:centerOfMass = (0, 0, 0)
                    float physics:density = 100
                    float3 physics:diagonalInertia = (-23.180628, -18.979626, 51.417446)
                    float physics:mass = 2.3936782
                    quatf physics:principalAxes = (0.8999928, -0.3515026, 0.1725769, -0.19151004)
                    matrix4d xformOp:transform = ( (0.04, 0, 0, 0), (0, 0.284067, 0, 0), (0, 0, 0.008, 0), (0.217476, 0, 0.39091, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]

                    def Cube "Cube" (
                        prepend apiSchemas = ["PhysicsCollisionAPI"]
                    )
                    {
                        float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                        bool physics:collisionEnabled = 1
                        color3f[] primvars:displayColor = [(1, 0, 0)]
                        float[] primvars:displayOpacity = [0.5]
                    }
                }

                def Xform "cabinet9_collision_4" (
                    prepend apiSchemas = ["PhysicsMassAPI"]
                )
                {
                    point3f physics:centerOfMass = (0, 0, 0)
                    float physics:density = 100
                    float3 physics:diagonalInertia = (-23.180628, -18.979626, 51.417446)
                    float physics:mass = 2.3936782
                    quatf physics:principalAxes = (0.8999928, -0.3515026, 0.1725769, -0.19151004)
                    matrix4d xformOp:transform = ( (0.277025, 0, 0, 0), (0, 0.284067, 0, 0), (0, 0, 0.008, 0), (0, 0, -0.391005, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]

                    def Cube "Cube" (
                        prepend apiSchemas = ["PhysicsCollisionAPI"]
                    )
                    {
                        float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                        bool physics:collisionEnabled = 1
                        color3f[] primvars:displayColor = [(1, 0, 0)]
                        float[] primvars:displayOpacity = [0.5]
                    }
                }

                def PhysicsPrismaticJoint "cabinet9_drawer1_joint"
                {
                    uniform token physics:axis = "Z"
                    rel physics:body0 = </apartment_root/kitchen_root/kitchen2_root/cabinet9>
                    rel physics:body1 = </apartment_root/cabinet9_drawer1>
                    bool physics:collisionEnabled = 0
                    point3f physics:localPos0 = (-0.05079589, -0.00175364, 0.33208442)
                    point3f physics:localPos1 = (0, 0, 0)
                    quatf physics:localRot0 = (0.7071068, 0, -0.7071068, 0)
                    quatf physics:localRot1 = (0.7071068, 0, -0.7071068, 0)
                    float physics:lowerLimit = 0
                    float physics:upperLimit = 0.45
                }

                def PhysicsPrismaticJoint "cabinet9_drawer2_joint"
                {
                    uniform token physics:axis = "Z"
                    rel physics:body0 = </apartment_root/kitchen_root/kitchen2_root/cabinet9>
                    rel physics:body1 = </apartment_root/cabinet9_drawer2>
                    bool physics:collisionEnabled = 0
                    point3f physics:localPos0 = (-0.05075302, -0.00065196, 0.13494465)
                    point3f physics:localPos1 = (0, 0, 0)
                    quatf physics:localRot0 = (0.7071068, 0, -0.7071068, 0)
                    quatf physics:localRot1 = (0.7071068, 0, -0.7071068, 0)
                    float physics:lowerLimit = 0
                    float physics:upperLimit = 0.45
                }

                def PhysicsPrismaticJoint "cabinet9_drawer3_joint"
                {
                    uniform token physics:axis = "Z"
                    rel physics:body0 = </apartment_root/kitchen_root/kitchen2_root/cabinet9>
                    rel physics:body1 = </apartment_root/cabinet9_drawer3>
                    bool physics:collisionEnabled = 0
                    point3f physics:localPos0 = (-0.05045226, -0.00167063, -0.19611332)
                    point3f physics:localPos1 = (0, 0, 0)
                    quatf physics:localRot0 = (0.7071068, 0, -0.7071068, 0)
                    quatf physics:localRot1 = (0.7071068, 0, -0.7071068, 0)
                    float physics:lowerLimit = 0
                    float physics:upperLimit = 0.45
                }
            }

            def Xform "cabinet10"
            {
                matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (2.49299103, 2.2719194, 0.5011195, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]

                def Xform "cabinet10_visual_0" (
                    prepend references = @./../meshes/usd/visual/SM_Kitchen_10_Base.usda@</SM_Kitchen_10_Base>
                )
                {
                    matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]

                    over "SM_Kitchen_10_Base" (
                        prepend apiSchemas = ["MaterialBindingAPI"]
                    )
                    {
                        rel material:binding = </_materials/_Game_Materials_Laborraum_M_Plastic_White_M_Plastic_White_012>

                        over "_Game_Materials_Laborraum_M_Metal_Brushed_M_Metal_Brushed_003" (
                            prepend apiSchemas = ["MaterialBindingAPI"]
                        )
                        {
                            rel material:binding = </_materials/_Game_Materials_Laborraum_M_Metal_Brushed_M_Metal_Brushed_003>
                        }

                        over "_Game_Materials_Laborraum_M_Plastic_White_M_Plastic_White_012" (
                            prepend apiSchemas = ["MaterialBindingAPI"]
                        )
                        {
                            rel material:binding = </_materials/_Game_Materials_Laborraum_M_Plastic_White_M_Plastic_White_012>
                        }
                    }
                }

                def Xform "cabinet10_collision_0" (
                    prepend apiSchemas = ["PhysicsMassAPI"]
                )
                {
                    point3f physics:centerOfMass = (0, 0, 0)
                    float physics:density = 100
                    float3 physics:diagonalInertia = (-18.060179, -14.643586, 35.56239)
                    float physics:mass = 2.06971
                    quatf physics:principalAxes = (-0.06348074, 0.9944086, -0.03479899, -0.07688169)
                    matrix4d xformOp:transform = ( (0.27726, 0, 0, 0), (0, 0.008, 0, 0), (0, 0, 0.399006, 0), (0, 0.191779, 0, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]

                    def Cube "Cube" (
                        prepend apiSchemas = ["PhysicsCollisionAPI"]
                    )
                    {
                        float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                        bool physics:collisionEnabled = 1
                        color3f[] primvars:displayColor = [(1, 0, 0)]
                        float[] primvars:displayOpacity = [0.5]
                    }
                }

                def Xform "cabinet10_collision_1" (
                    prepend apiSchemas = ["PhysicsMassAPI"]
                )
                {
                    point3f physics:centerOfMass = (0, 0, 0)
                    float physics:density = 100
                    float3 physics:diagonalInertia = (-18.060179, -14.643586, 35.56239)
                    float physics:mass = 2.06971
                    quatf physics:principalAxes = (-0.06348074, 0.9944086, -0.03479899, -0.07688169)
                    matrix4d xformOp:transform = ( (0.27726, 0, 0, 0), (0, 0.008, 0, 0), (0, 0, 0.399006, 0), (0, -0.191779, 0, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]

                    def Cube "Cube" (
                        prepend apiSchemas = ["PhysicsCollisionAPI"]
                    )
                    {
                        float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                        bool physics:collisionEnabled = 1
                        color3f[] primvars:displayColor = [(1, 0, 0)]
                        float[] primvars:displayOpacity = [0.5]
                    }
                }

                def Xform "cabinet10_collision_2" (
                    prepend apiSchemas = ["PhysicsMassAPI"]
                )
                {
                    point3f physics:centerOfMass = (0, 0, 0)
                    float physics:density = 100
                    float3 physics:diagonalInertia = (-18.060179, -14.643586, 35.56239)
                    float physics:mass = 2.06971
                    quatf physics:principalAxes = (-0.06348074, 0.9944086, -0.03479899, -0.07688169)
                    matrix4d xformOp:transform = ( (0.27726, 0, 0, 0), (0, 0.184833, 0, 0), (0, 0, 0.008, 0), (0, 0, -0.391006, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]

                    def Cube "Cube" (
                        prepend apiSchemas = ["PhysicsCollisionAPI"]
                    )
                    {
                        float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                        bool physics:collisionEnabled = 1
                        color3f[] primvars:displayColor = [(1, 0, 0)]
                        float[] primvars:displayOpacity = [0.5]
                    }
                }

                def Xform "cabinet10_collision_3" (
                    prepend apiSchemas = ["PhysicsMassAPI"]
                )
                {
                    point3f physics:centerOfMass = (0, 0, 0)
                    float physics:density = 100
                    float3 physics:diagonalInertia = (-18.060179, -14.643586, 35.56239)
                    float physics:mass = 2.06971
                    quatf physics:principalAxes = (-0.06348074, 0.9944086, -0.03479899, -0.07688169)
                    matrix4d xformOp:transform = ( (0.04, 0, 0, 0), (0, 0.184833, 0, 0), (0, 0, 0.008, 0), (0.217476, 0, 0.390909, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]

                    def Cube "Cube" (
                        prepend apiSchemas = ["PhysicsCollisionAPI"]
                    )
                    {
                        float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                        bool physics:collisionEnabled = 1
                        color3f[] primvars:displayColor = [(1, 0, 0)]
                        float[] primvars:displayOpacity = [0.5]
                    }
                }

                def Xform "cabinet10_collision_4" (
                    prepend apiSchemas = ["PhysicsMassAPI"]
                )
                {
                    point3f physics:centerOfMass = (0, 0, 0)
                    float physics:density = 100
                    float3 physics:diagonalInertia = (-18.060179, -14.643586, 35.56239)
                    float physics:mass = 2.06971
                    quatf physics:principalAxes = (-0.06348074, 0.9944086, -0.03479899, -0.07688169)
                    matrix4d xformOp:transform = ( (0.004, 0, 0, 0), (0, 0.184833, 0, 0), (0, 0, 0.38291, 0), (0.261473, 0, 0, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]

                    def Cube "Cube" (
                        prepend apiSchemas = ["PhysicsCollisionAPI"]
                    )
                    {
                        float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                        bool physics:collisionEnabled = 1
                        color3f[] primvars:displayColor = [(1, 0, 0)]
                        float[] primvars:displayOpacity = [0.5]
                    }
                }

                def PhysicsPrismaticJoint "cabinet10_drawer1_joint"
                {
                    uniform token physics:axis = "Z"
                    rel physics:body0 = </apartment_root/kitchen_root/kitchen2_root/cabinet10>
                    rel physics:body1 = </apartment_root/cabinet10_drawer1>
                    bool physics:collisionEnabled = 0
                    point3f physics:localPos0 = (-0.05095718, 0.00062459, 0.32565242)
                    point3f physics:localPos1 = (0, 0, 0)
                    quatf physics:localRot0 = (0.7071068, 0, -0.7071068, 0)
                    quatf physics:localRot1 = (0.7071068, 0, -0.7071068, 0)
                    float physics:lowerLimit = 0
                    float physics:upperLimit = 0.45
                }

                def PhysicsPrismaticJoint "cabinet10_drawer2_joint"
                {
                    uniform token physics:axis = "Z"
                    rel physics:body0 = </apartment_root/kitchen_root/kitchen2_root/cabinet10>
                    rel physics:body1 = </apartment_root/cabinet10_drawer2>
                    bool physics:collisionEnabled = 0
                    point3f physics:localPos0 = (-0.0507138, -0.00006861, 0.12805203)
                    point3f physics:localPos1 = (0, 0, 0)
                    quatf physics:localRot0 = (0.7071068, 0, -0.7071068, 0)
                    quatf physics:localRot1 = (0.7071068, 0, -0.7071068, 0)
                    float physics:lowerLimit = 0
                    float physics:upperLimit = 0.45
                }

                def PhysicsPrismaticJoint "cabinet10_drawer3_joint"
                {
                    uniform token physics:axis = "Z"
                    rel physics:body0 = </apartment_root/kitchen_root/kitchen2_root/cabinet10>
                    rel physics:body1 = </apartment_root/cabinet10_drawer3>
                    bool physics:collisionEnabled = 0
                    point3f physics:localPos0 = (-0.05040313, -0.00036921, -0.20396724)
                    point3f physics:localPos1 = (0, 0, 0)
                    quatf physics:localRot0 = (0.7071068, 0, -0.7071068, 0)
                    quatf physics:localRot1 = (0.7071068, 0, -0.7071068, 0)
                    float physics:lowerLimit = 0
                    float physics:upperLimit = 0.45
                }
            }

            def Xform "cabinet11"
            {
                matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (2.49293671, 1.62155807, 0.50984447, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]

                def Xform "cabinet11_visual_0" (
                    prepend references = @./../meshes/usd/visual/SM_Kitchen_11_Base.usda@</SM_Kitchen_11_Base>
                )
                {
                    matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]

                    over "SM_Kitchen_11_Base" (
                        prepend apiSchemas = ["MaterialBindingAPI"]
                    )
                    {
                        rel material:binding = </_materials/_Game_Materials_Laborraum_M_Plastic_White_M_Plastic_White_016>

                        over "_Game_Materials_Laborraum_M_Metal_Chrome_M_Metal_Chrome_006" (
                            prepend apiSchemas = ["MaterialBindingAPI"]
                        )
                        {
                            rel material:binding = </_materials/_Game_Materials_Laborraum_M_Metal_Chrome_M_Metal_Chrome_006>
                        }

                        over "_Game_Materials_Laborraum_M_Plastic_White_M_Plastic_White_016" (
                            prepend apiSchemas = ["MaterialBindingAPI"]
                        )
                        {
                            rel material:binding = </_materials/_Game_Materials_Laborraum_M_Plastic_White_M_Plastic_White_016>
                        }
                    }
                }

                def Xform "cabinet11_collision_0" (
                    prepend apiSchemas = ["PhysicsMassAPI"]
                )
                {
                    point3f physics:centerOfMass = (0, 0, 0)
                    float physics:density = 100
                    float3 physics:diagonalInertia = (-43.210693, -31.089743, 94.46817)
                    float physics:mass = 2.8821092
                    quatf physics:principalAxes = (0.87029165, -0.44756937, 0.15640518, -0.13345999)
                    matrix4d xformOp:transform = ( (0.27726, 0, 0, 0), (0, 0.008, 0, 0), (0, 0, 0.399006, 0), (0, -0.441952, 0, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]

                    def Cube "Cube" (
                        prepend apiSchemas = ["PhysicsCollisionAPI"]
                    )
                    {
                        float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                        bool physics:collisionEnabled = 1
                        color3f[] primvars:displayColor = [(1, 0, 0)]
                        float[] primvars:displayOpacity = [0.5]
                    }
                }

                def Xform "cabinet11_collision_1" (
                    prepend apiSchemas = ["PhysicsMassAPI"]
                )
                {
                    point3f physics:centerOfMass = (0, 0, 0)
                    float physics:density = 100
                    float3 physics:diagonalInertia = (-43.210693, -31.089743, 94.46817)
                    float physics:mass = 2.8821092
                    quatf physics:principalAxes = (0.87029165, -0.44756937, 0.15640518, -0.13345999)
                    matrix4d xformOp:transform = ( (0.27726, 0, 0, 0), (0, 0.008, 0, 0), (0, 0, 0.399006, 0), (0, -0.441952, 0, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]

                    def Cube "Cube" (
                        prepend apiSchemas = ["PhysicsCollisionAPI"]
                    )
                    {
                        float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                        bool physics:collisionEnabled = 1
                        color3f[] primvars:displayColor = [(1, 0, 0)]
                        float[] primvars:displayOpacity = [0.5]
                    }
                }

                def Xform "cabinet11_collision_2" (
                    prepend apiSchemas = ["PhysicsMassAPI"]
                )
                {
                    point3f physics:centerOfMass = (0, 0, 0)
                    float physics:density = 100
                    float3 physics:diagonalInertia = (-43.210693, -31.089743, 94.46817)
                    float physics:mass = 2.8821092
                    quatf physics:principalAxes = (0.87029165, -0.44756937, 0.15640518, -0.13345999)
                    matrix4d xformOp:transform = ( (0.27726, 0, 0, 0), (0, 0.43394, 0, 0), (0, 0, 0.008, 0), (0, 0, -0.391006, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]

                    def Cube "Cube" (
                        prepend apiSchemas = ["PhysicsCollisionAPI"]
                    )
                    {
                        float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                        bool physics:collisionEnabled = 1
                        color3f[] primvars:displayColor = [(1, 0, 0)]
                        float[] primvars:displayOpacity = [0.5]
                    }
                }

                def Xform "cabinet11_collision_3" (
                    prepend apiSchemas = ["PhysicsMassAPI"]
                )
                {
                    point3f physics:centerOfMass = (0, 0, 0)
                    float physics:density = 100
                    float3 physics:diagonalInertia = (-43.210693, -31.089743, 94.46817)
                    float physics:mass = 2.8821092
                    quatf physics:principalAxes = (0.87029165, -0.44756937, 0.15640518, -0.13345999)
                    matrix4d xformOp:transform = ( (0.04, 0, 0, 0), (0, 0.43394, 0, 0), (0, 0, 0.008, 0), (0.217476, 0, 0.390909, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]

                    def Cube "Cube" (
                        prepend apiSchemas = ["PhysicsCollisionAPI"]
                    )
                    {
                        float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                        bool physics:collisionEnabled = 1
                        color3f[] primvars:displayColor = [(1, 0, 0)]
                        float[] primvars:displayOpacity = [0.5]
                    }
                }

                def Xform "cabinet11_collision_4" (
                    prepend apiSchemas = ["PhysicsMassAPI"]
                )
                {
                    point3f physics:centerOfMass = (0, 0, 0)
                    float physics:density = 100
                    float3 physics:diagonalInertia = (-43.210693, -31.089743, 94.46817)
                    float physics:mass = 2.8821092
                    quatf physics:principalAxes = (0.87029165, -0.44756937, 0.15640518, -0.13345999)
                    matrix4d xformOp:transform = ( (0.004, 0, 0, 0), (0, 0.43394, 0, 0), (0, 0, 0.38291, 0), (0.261473, 0, 0, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]

                    def Cube "Cube" (
                        prepend apiSchemas = ["PhysicsCollisionAPI"]
                    )
                    {
                        float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                        bool physics:collisionEnabled = 1
                        color3f[] primvars:displayColor = [(1, 0, 0)]
                        float[] primvars:displayOpacity = [0.5]
                    }
                }

                def PhysicsPrismaticJoint "cabinet11_drawer1_joint"
                {
                    uniform token physics:axis = "Z"
                    rel physics:body0 = </apartment_root/kitchen_root/kitchen2_root/cabinet11>
                    rel physics:body1 = </apartment_root/cabinet11_drawer1>
                    bool physics:collisionEnabled = 0
                    point3f physics:localPos0 = (-0.05082244, 0.00063939, 0.31816876)
                    point3f physics:localPos1 = (0, 0, 0)
                    quatf physics:localRot0 = (0.7071068, 0, -0.7071068, 0)
                    quatf physics:localRot1 = (0.7071068, 0, -0.7071068, 0)
                    float physics:lowerLimit = 0
                    float physics:upperLimit = 0.45
                }

                def PhysicsPrismaticJoint "cabinet11_drawer2_joint"
                {
                    uniform token physics:axis = "Z"
                    rel physics:body0 = </apartment_root/kitchen_root/kitchen2_root/cabinet11>
                    rel physics:body1 = </apartment_root/cabinet11_drawer2>
                    bool physics:collisionEnabled = 0
                    point3f physics:localPos0 = (-0.05030883, 0.0004598, 0.11917843)
                    point3f physics:localPos1 = (0, 0, 0)
                    quatf physics:localRot0 = (0.7071068, 0, -0.7071068, 0)
                    quatf physics:localRot1 = (0.7071068, 0, -0.7071068, 0)
                    float physics:lowerLimit = 0
                    float physics:upperLimit = 0.45
                }

                def PhysicsPrismaticJoint "cabinet11_drawer3_joint"
                {
                    uniform token physics:axis = "Z"
                    rel physics:body0 = </apartment_root/kitchen_root/kitchen2_root/cabinet11>
                    rel physics:body1 = </apartment_root/cabinet11_drawer3>
                    bool physics:collisionEnabled = 0
                    point3f physics:localPos0 = (-0.05077515, 0.00146352, -0.21330786)
                    point3f physics:localPos1 = (0, 0, 0)
                    quatf physics:localRot0 = (0.7071068, 0, -0.7071068, 0)
                    quatf physics:localRot1 = (0.7071068, 0, -0.7071068, 0)
                    float physics:lowerLimit = 0
                    float physics:upperLimit = 0.45
                }
            }

            def Xform "kitchen2_base_board"
            {
                matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (2.21094345, 2.40967743, 0.04963645, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]

                def Xform "kitchen2_base_board_visual_0" (
                    prepend references = @./../meshes/usd/visual/SM_Kitchen_Base_Board_02.usda@</SM_Kitchen_Base_Board_02>
                )
                {
                    matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]

                    over "SM_Kitchen_Base_Board_02" (
                        prepend apiSchemas = ["MaterialBindingAPI"]
                    )
                    {
                        rel material:binding = </_materials/_Game_Materials_Laborraum_M_Kitchen_Fronts_M_Kitchen_Fronts_012>
                    }
                }

                def Xform "kitchen2_base_board_collision_0" (
                    prepend apiSchemas = ["PhysicsMassAPI"]
                )
                {
                    point3f physics:centerOfMass = (0, 0, 0)
                    float physics:density = 100
                    float3 physics:diagonalInertia = (-64.15885, -46.83368, 85.081474)
                    float physics:mass = 0.6223968
                    quatf physics:principalAxes = (0.15247408, 0.378843, 0.69091856, -0.596541)
                    matrix4d xformOp:transform = ( (0.01, 0, 0, 0), (0, 1.55624, 0, 0), (0, 0, 0.05, 0), (0, 0.3023, 0, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]

                    def Cube "Cube" (
                        prepend apiSchemas = ["PhysicsCollisionAPI"]
                    )
                    {
                        float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                        bool physics:collisionEnabled = 1
                        color3f[] primvars:displayColor = [(1, 0, 0)]
                        float[] primvars:displayOpacity = [0.5]
                    }
                }
            }

            def Xform "island_cover1"
            {
                matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (2.86824768, 2.71960388, 0.4503175, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]

                def Xform "island_cover1_visual_0" (
                    prepend references = @./../meshes/usd/visual/SM_Kitchen_Island_Cover_01.usda@</SM_Kitchen_Island_Cover_01>
                )
                {
                    matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]

                    over "SM_Kitchen_Island_Cover_01" (
                        prepend apiSchemas = ["MaterialBindingAPI"]
                    )
                    {
                        rel material:binding = </_materials/_Game_Materials_Laborraum_M_Kitchen_Fronts_M_Kitchen_Fronts_013>
                    }
                }

                def Xform "island_cover1_collision_0" (
                    prepend apiSchemas = ["PhysicsMassAPI"]
                )
                {
                    point3f physics:centerOfMass = (0, 0, 0)
                    float physics:density = 100
                    float3 physics:diagonalInertia = (-476.94653, -366.21753, 593.02075)
                    float physics:mass = 5.6786394
                    quatf physics:principalAxes = (0.10927795, -0.08776645, 0.9892212, -0.04238811)
                    matrix4d xformOp:transform = ( (0.009625, 0, 0, 0), (0, 1.56783, 0, 0), (0, 0, 0.451805, 0), (0, 0, 0, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]

                    def Cube "Cube" (
                        prepend apiSchemas = ["PhysicsCollisionAPI"]
                    )
                    {
                        float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                        bool physics:collisionEnabled = 1
                        color3f[] primvars:displayColor = [(1, 0, 0)]
                        float[] primvars:displayOpacity = [0.5]
                    }
                }
            }

            def Xform "island_cover3"
            {
                matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (2.53831085, 4.27729736, 0.45175999, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]

                def Xform "island_cover3_visual_0" (
                    prepend references = @./../meshes/usd/visual/SM_Kitchen_Island_Cover_03.usda@</SM_Kitchen_Island_Cover_03>
                )
                {
                    matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]

                    over "SM_Kitchen_Island_Cover_03" (
                        prepend apiSchemas = ["MaterialBindingAPI"]
                    )
                    {
                        rel material:binding = </_materials/_Game_Materials_Laborraum_M_Kitchen_Fronts_M_Kitchen_Fronts_014>
                    }
                }

                def Xform "island_cover3_collision_0" (
                    prepend apiSchemas = ["PhysicsMassAPI"]
                )
                {
                    point3f physics:centerOfMass = (0, 0, 0)
                    float physics:density = 100
                    float3 physics:diagonalInertia = (-11.336036, -5.742002, 11.1020565)
                    float physics:mass = 1.2204736
                    quatf physics:principalAxes = (0.68503624, -0.2797702, 0.10952151, -0.6636709)
                    matrix4d xformOp:transform = ( (0.339444, 0, 0, 0), (0, 0.01, 0, 0), (0, 0, 0.451805, 0), (0, 0, 0, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]

                    def Cube "Cube" (
                        prepend apiSchemas = ["PhysicsCollisionAPI"]
                    )
                    {
                        float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                        bool physics:collisionEnabled = 1
                        color3f[] primvars:displayColor = [(1, 0, 0)]
                        float[] primvars:displayOpacity = [0.5]
                    }
                }
            }

            def Xform "island_cover5"
            {
                matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (2.53749664, 1.16088593, 0.44601364, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]

                def Xform "island_cover5_visual_0" (
                    prepend references = @./../meshes/usd/visual/SM_Kitchen_Island_Cover_03.usda@</SM_Kitchen_Island_Cover_03>
                )
                {
                    matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]

                    over "SM_Kitchen_Island_Cover_03" (
                        prepend apiSchemas = ["MaterialBindingAPI"]
                    )
                    {
                        rel material:binding = </_materials/_Game_Materials_Laborraum_M_Kitchen_Fronts_M_Kitchen_Fronts_014>
                    }
                }

                def Xform "island_cover5_collision_0" (
                    prepend apiSchemas = ["PhysicsMassAPI"]
                )
                {
                    point3f physics:centerOfMass = (0, 0, 0)
                    float physics:density = 100
                    float3 physics:diagonalInertia = (-11.336036, -5.742002, 11.1020565)
                    float physics:mass = 1.2204736
                    quatf physics:principalAxes = (0.68503624, -0.2797702, 0.10952151, -0.6636709)
                    matrix4d xformOp:transform = ( (0.339444, 0, 0, 0), (0, 0.01, 0, 0), (0, 0, 0.451805, 0), (0, 0, 0, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]

                    def Cube "Cube" (
                        prepend apiSchemas = ["PhysicsCollisionAPI"]
                    )
                    {
                        float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                        bool physics:collisionEnabled = 1
                        color3f[] primvars:displayColor = [(1, 0, 0)]
                        float[] primvars:displayOpacity = [0.5]
                    }
                }
            }
        }
    }

    def Xform "cabinet1_door" (
        prepend apiSchemas = ["PhysicsRigidBodyAPI"]
    )
    {
        bool physics:rigidBodyEnabled = 1
        matrix4d xformOp:transform = ( (-1, 1.2246467991473532e-16, 0, 0), (-1.2246467991473532e-16, -1, 0, 0), (0, 0, 1, 0), (0.56463219, 1.18675873, 1.79140605, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]

        def Xform "cabinet1_door_visual_0" (
            prepend references = @./../meshes/usd/visual/SM_Kitchen_01_Door_01.usda@</SM_Kitchen_01_Door_01>
        )
        {
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            over "SM_Kitchen_01_Door_01_002" (
                prepend apiSchemas = ["MaterialBindingAPI"]
            )
            {
                rel material:binding = </_materials/_Game_Materials_Laborraum_M_Kitchen_Fronts_M_Kitchen_Fronts_003>

                over "_Game_Materials_Laborraum_M_Metal_Chrome_M_Metal_Chrome_002" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    rel material:binding = </_materials/_Game_Materials_Laborraum_M_Metal_Chrome_M_Metal_Chrome_002>
                }

                over "_Game_Materials_Laborraum_M_Metal_Brushed_M_Metal_Brushed_002" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    rel material:binding = </_materials/_Game_Materials_Laborraum_M_Metal_Brushed_M_Metal_Brushed_002>
                }

                over "_Game_Materials_Laborraum_M_Kitchen_Fronts_M_Kitchen_Fronts_003" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    rel material:binding = </_materials/_Game_Materials_Laborraum_M_Kitchen_Fronts_M_Kitchen_Fronts_003>
                }
            }
        }

        def Xform "cabinet1_door_collision_0" (
            prepend apiSchemas = ["PhysicsMassAPI"]
        )
        {
            point3f physics:centerOfMass = (0, 0, 0)
            float physics:density = 100
            float3 physics:diagonalInertia = (-8.552459, -3.8531199, 18.842733)
            float physics:mass = 0.98272604
            quatf physics:principalAxes = (0.9820642, 0.02118214, 0.16507328, -0.08861173)
            matrix4d xformOp:transform = ( (0.0095, 0, 0, 0), (0, 0.298468, 0, 0), (0, 0, 0.433405, 0), (0, -0.285091, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Cube "Cube" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(1, 0, 0)]
                float[] primvars:displayOpacity = [0.5]
            }
        }

        def Xform "cabinet1_door_handle"
        {
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 2.220446049250313e-16, 1, 0), (0, -1, 2.220446049250313e-16, 0), (-0.03598882, -0.46315559, -0.38983368, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Xform "cabinet1_door_handle_visual_0" (
                prepend references = @./../meshes/usd/visual/SM_Kitchen_Handle.usda@</SM_Kitchen_Handle>
            )
            {
                matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]

                over "SM_Kitchen_Handle" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    rel material:binding = </_materials/_Game_Materials_Laborraum_M_Metal_Brushed_M_Metal_Brushed_003>
                }
            }

            def Xform "cabinet1_door_handle_collision_0" (
                prepend apiSchemas = ["PhysicsMassAPI"]
            )
            {
                point3f physics:centerOfMass = (0, 0, 0)
                float physics:density = 100
                float3 physics:diagonalInertia = (-0.002638943, -0.0016319633, 0.0048724143)
                float physics:mass = 0.0034548815
                quatf physics:principalAxes = (-0.18830949, -0.39285627, 0.8974556, -0.06911583)
                matrix4d xformOp:transform = ( (0.01, 0, 0, 0), (0, 0.0065, 0, 0), (0, 0, 0.0065, 0), (0.0164985, 0, 0.08, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]

                def Cube "Cube" (
                    prepend apiSchemas = ["PhysicsCollisionAPI"]
                )
                {
                    float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                    bool physics:collisionEnabled = 1
                    color3f[] primvars:displayColor = [(1, 0, 0)]
                    float[] primvars:displayOpacity = [0.5]
                }
            }

            def Xform "cabinet1_door_handle_collision_1" (
                prepend apiSchemas = ["PhysicsMassAPI"]
            )
            {
                point3f physics:centerOfMass = (0, 0, 0)
                float physics:density = 100
                float3 physics:diagonalInertia = (-0.002638943, -0.0016319633, 0.0048724143)
                float physics:mass = 0.0034548815
                quatf physics:principalAxes = (-0.18830949, -0.39285627, 0.8974556, -0.06911583)
                matrix4d xformOp:transform = ( (0.01, 0, 0, 0), (0, 0.0065, 0, 0), (0, 0, 0.0065, 0), (0.0164985, 0, -0.08, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]

                def Cube "Cube" (
                    prepend apiSchemas = ["PhysicsCollisionAPI"]
                )
                {
                    float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                    bool physics:collisionEnabled = 1
                    color3f[] primvars:displayColor = [(1, 0, 0)]
                    float[] primvars:displayOpacity = [0.5]
                }
            }

            def Xform "cabinet1_door_handle_collision_2" (
                prepend apiSchemas = ["PhysicsMassAPI"]
            )
            {
                point3f physics:centerOfMass = (0, 0, 0)
                float physics:density = 100
                float3 physics:diagonalInertia = (-0.002638943, -0.0016319633, 0.0048724143)
                float physics:mass = 0.0034548815
                quatf physics:principalAxes = (-0.18830949, -0.39285627, 0.8974556, -0.06911583)
                matrix4d xformOp:transform = ( (0.0065, 0, 0, 0), (0, 0.0065, 0, 0), (0, 0, 0.086516, 0), (0, 0, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]

                def Cube "Cube" (
                    prepend apiSchemas = ["PhysicsCollisionAPI"]
                )
                {
                    float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                    bool physics:collisionEnabled = 1
                    color3f[] primvars:displayColor = [(1, 0, 0)]
                    float[] primvars:displayOpacity = [0.5]
                }
            }
        }
    }

    def Xform "cabinet1_drawer1" (
        prepend apiSchemas = ["PhysicsRigidBodyAPI"]
    )
    {
        bool physics:rigidBodyEnabled = 1
        matrix4d xformOp:transform = ( (-1, 1.2246467991473532e-16, 0, 0), (-1.2246467991473532e-16, -1, 0, 0), (0, 0, 1, 0), (0.33142237, 1.47797888, 0.6278209699999999, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]

        def Xform "cabinet1_drawer1_visual_0" (
            prepend references = @./../meshes/usd/visual/SM_Kitchen_01_Drawer_01.usda@</SM_Kitchen_01_Drawer_01>
        )
        {
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            over "SM_Kitchen_01_Drawer_01" (
                prepend apiSchemas = ["MaterialBindingAPI"]
            )
            {
                rel material:binding = </_materials/_Game_Materials_Laborraum_M_Drawer_Mat_M_Drawer_Mat>

                over "_Game_Materials_Laborraum_M_Plastic_White_M_Plastic_White_002" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    rel material:binding = </_materials/_Game_Materials_Laborraum_M_Plastic_White_M_Plastic_White_002>
                }

                over "_Game_Materials_Laborraum_M_Metal_Chrome_M_Metal_Chrome_003" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    rel material:binding = </_materials/_Game_Materials_Laborraum_M_Metal_Chrome_M_Metal_Chrome_003>
                }

                over "_Game_Materials_Laborraum_M_Kitchen_Fronts_M_Kitchen_Fronts_004" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    rel material:binding = </_materials/_Game_Materials_Laborraum_M_Kitchen_Fronts_M_Kitchen_Fronts_004>
                }

                over "_Game_Materials_Laborraum_M_Drawer_Mat_M_Drawer_Mat" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    rel material:binding = </_materials/_Game_Materials_Laborraum_M_Drawer_Mat_M_Drawer_Mat>
                }
            }
        }

        def Xform "cabinet1_drawer1_collision_0" (
            prepend apiSchemas = ["PhysicsMassAPI"]
        )
        {
            point3f physics:centerOfMass = (0, 0, 0)
            float physics:density = 100
            float3 physics:diagonalInertia = (-5.168784, -2.8338704, 10.105074)
            float physics:mass = 0.8978792
            quatf physics:principalAxes = (-0.24490221, -0.15010454, 0.35128942, 0.8911157)
            matrix4d xformOp:transform = ( (0.0095, 0, 0, 0), (0, 0.298468, 0, 0), (0, 0, 0.131486, 0), (-0.233977, 0, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Cube "Cube" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(1, 0, 0)]
                float[] primvars:displayOpacity = [0.5]
            }
        }

        def Xform "cabinet1_drawer1_collision_1" (
            prepend apiSchemas = ["PhysicsMassAPI"]
        )
        {
            point3f physics:centerOfMass = (0, 0, 0)
            float physics:density = 100
            float3 physics:diagonalInertia = (-5.168784, -2.8338704, 10.105074)
            float physics:mass = 0.8978792
            quatf physics:principalAxes = (-0.24490221, -0.15010454, 0.35128942, 0.8911157)
            matrix4d xformOp:transform = ( (0.24585, 0, 0, 0), (0, 0.0079221, 0, 0), (0, 0, 0.0111962, 0), (0.021336, -0.26865, 0.0412455, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Cube "Cube" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(1, 0, 0)]
                float[] primvars:displayOpacity = [0.5]
            }
        }

        def Xform "cabinet1_drawer1_collision_2" (
            prepend apiSchemas = ["PhysicsMassAPI"]
        )
        {
            point3f physics:centerOfMass = (0, 0, 0)
            float physics:density = 100
            float3 physics:diagonalInertia = (-5.168784, -2.8338704, 10.105074)
            float physics:mass = 0.8978792
            quatf physics:principalAxes = (-0.24490221, -0.15010454, 0.35128942, 0.8911157)
            matrix4d xformOp:transform = ( (0.24585, 0, 0, 0), (0, 0.0079221, 0, 0), (0, 0, 0.0111962, 0), (0.021336, 0.26865, 0.0412455, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Cube "Cube" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(1, 0, 0)]
                float[] primvars:displayOpacity = [0.5]
            }
        }

        def Xform "cabinet1_drawer1_collision_3" (
            prepend apiSchemas = ["PhysicsMassAPI"]
        )
        {
            point3f physics:centerOfMass = (0, 0, 0)
            float physics:density = 100
            float3 physics:diagonalInertia = (-5.168784, -2.8338704, 10.105074)
            float physics:mass = 0.8978792
            quatf physics:principalAxes = (-0.24490221, -0.15010454, 0.35128942, 0.8911157)
            matrix4d xformOp:transform = ( (0.24585, 0, 0, 0), (0, 0.0079221, 0, 0), (0, 0, 0.041748, 0), (0.021336, -0.26865, -0.078968, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Cube "Cube" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(1, 0, 0)]
                float[] primvars:displayOpacity = [0.5]
            }
        }

        def Xform "cabinet1_drawer1_collision_4" (
            prepend apiSchemas = ["PhysicsMassAPI"]
        )
        {
            point3f physics:centerOfMass = (0, 0, 0)
            float physics:density = 100
            float3 physics:diagonalInertia = (-5.168784, -2.8338704, 10.105074)
            float physics:mass = 0.8978792
            quatf physics:principalAxes = (-0.24490221, -0.15010454, 0.35128942, 0.8911157)
            matrix4d xformOp:transform = ( (0.24585, 0, 0, 0), (0, 0.0079221, 0, 0), (0, 0, 0.026549, 0), (0.021336, 0.26865, -0.0941, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Cube "Cube" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(1, 0, 0)]
                float[] primvars:displayOpacity = [0.5]
            }
        }

        def Xform "cabinet1_drawer1_collision_5" (
            prepend apiSchemas = ["PhysicsMassAPI"]
        )
        {
            point3f physics:centerOfMass = (0, 0, 0)
            float physics:density = 100
            float3 physics:diagonalInertia = (-5.168784, -2.8338704, 10.105074)
            float physics:mass = 0.8978792
            quatf physics:principalAxes = (-0.24490221, -0.15010454, 0.35128942, 0.8911157)
            matrix4d xformOp:transform = ( (0.24578, 0, 0, 0), (0, 0.26182, 0, 0), (0, 0, 0.008, 0), (0.021399, 0, -0.114232, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Cube "Cube" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(1, 0, 0)]
                float[] primvars:displayOpacity = [0.5]
            }
        }

        def Xform "cabinet1_drawer1_collision_6" (
            prepend apiSchemas = ["PhysicsMassAPI"]
        )
        {
            point3f physics:centerOfMass = (0, 0, 0)
            float physics:density = 100
            float3 physics:diagonalInertia = (-5.168784, -2.8338704, 10.105074)
            float physics:mass = 0.8978792
            quatf physics:principalAxes = (-0.24490221, -0.15010454, 0.35128942, 0.8911157)
            matrix4d xformOp:transform = ( (0.00932692, 0, 0, 0), (0, 0.26182, 0, 0), (0, 0, 0.084435, 0), (0.26, 0, -0.038, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Cube "Cube" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(1, 0, 0)]
                float[] primvars:displayOpacity = [0.5]
            }
        }

        def Xform "cabinet1_drawer1_handle"
        {
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 2.220446049250313e-16, 1, 0), (0, -1, 2.220446049250313e-16, 0), (-0.26831836, 0.00091816, 0.08401428, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Xform "cabinet1_drawer1_handle_visual_0" (
                prepend references = @./../meshes/usd/visual/SM_Kitchen_Handle.usda@</SM_Kitchen_Handle>
            )
            {
                matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]

                over "SM_Kitchen_Handle" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    rel material:binding = </_materials/_Game_Materials_Laborraum_M_Metal_Brushed_M_Metal_Brushed_003>
                }
            }

            def Xform "cabinet1_drawer1_handle_collision_0" (
                prepend apiSchemas = ["PhysicsMassAPI"]
            )
            {
                point3f physics:centerOfMass = (0, 0, 0)
                float physics:density = 100
                float3 physics:diagonalInertia = (-5.168784, -2.8338704, 10.105074)
                float physics:mass = 0.8978792
                quatf physics:principalAxes = (-0.24490221, -0.15010454, 0.35128942, 0.8911157)
                matrix4d xformOp:transform = ( (0.01, 0, 0, 0), (0, 0.0065, 0, 0), (0, 0, 0.0065, 0), (0.0164985, 0, 0.08, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]

                def Cube "Cube" (
                    prepend apiSchemas = ["PhysicsCollisionAPI"]
                )
                {
                    float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                    bool physics:collisionEnabled = 1
                    color3f[] primvars:displayColor = [(1, 0, 0)]
                    float[] primvars:displayOpacity = [0.5]
                }
            }

            def Xform "cabinet1_drawer1_handle_collision_1" (
                prepend apiSchemas = ["PhysicsMassAPI"]
            )
            {
                point3f physics:centerOfMass = (0, 0, 0)
                float physics:density = 100
                float3 physics:diagonalInertia = (-5.168784, -2.8338704, 10.105074)
                float physics:mass = 0.8978792
                quatf physics:principalAxes = (-0.24490221, -0.15010454, 0.35128942, 0.8911157)
                matrix4d xformOp:transform = ( (0.01, 0, 0, 0), (0, 0.0065, 0, 0), (0, 0, 0.0065, 0), (0.0164985, 0, -0.08, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]

                def Cube "Cube" (
                    prepend apiSchemas = ["PhysicsCollisionAPI"]
                )
                {
                    float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                    bool physics:collisionEnabled = 1
                    color3f[] primvars:displayColor = [(1, 0, 0)]
                    float[] primvars:displayOpacity = [0.5]
                }
            }

            def Xform "cabinet1_drawer1_handle_collision_2" (
                prepend apiSchemas = ["PhysicsMassAPI"]
            )
            {
                point3f physics:centerOfMass = (0, 0, 0)
                float physics:density = 100
                float3 physics:diagonalInertia = (-5.168784, -2.8338704, 10.105074)
                float physics:mass = 0.8978792
                quatf physics:principalAxes = (-0.24490221, -0.15010454, 0.35128942, 0.8911157)
                matrix4d xformOp:transform = ( (0.0065, 0, 0, 0), (0, 0.0065, 0, 0), (0, 0, 0.086516, 0), (0, 0, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]

                def Cube "Cube" (
                    prepend apiSchemas = ["PhysicsCollisionAPI"]
                )
                {
                    float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                    bool physics:collisionEnabled = 1
                    color3f[] primvars:displayColor = [(1, 0, 0)]
                    float[] primvars:displayOpacity = [0.5]
                }
            }
        }
    }

    def Xform "cabinet1_drawer2" (
        prepend apiSchemas = ["PhysicsRigidBodyAPI"]
    )
    {
        bool physics:rigidBodyEnabled = 1
        matrix4d xformOp:transform = ( (-1, 1.2246467991473532e-16, 0, 0), (-1.2246467991473532e-16, -1, 0, 0), (0, 0, 1, 0), (0.33063219, 1.47775873, 0.29840605, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]

        def Xform "cabinet1_drawer2_visual_0" (
            prepend references = @./../meshes/usd/visual/SM_Kitchen_01_Drawer_02.usda@</SM_Kitchen_01_Drawer_02>
        )
        {
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            over "SM_Kitchen_01_Drawer_02" (
                prepend apiSchemas = ["MaterialBindingAPI"]
            )
            {
                rel material:binding = </_materials/_Game_Materials_Laborraum_M_Drawer_Mat_M_Drawer_Mat_001>

                over "_Game_Materials_Laborraum_M_Plastic_White_M_Plastic_White_003" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    rel material:binding = </_materials/_Game_Materials_Laborraum_M_Plastic_White_M_Plastic_White_003>
                }

                over "_Game_Materials_Laborraum_M_Metal_Chrome_M_Metal_Chrome_004" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    rel material:binding = </_materials/_Game_Materials_Laborraum_M_Metal_Chrome_M_Metal_Chrome_004>
                }

                over "_Game_Materials_Laborraum_M_Kitchen_Fronts_M_Kitchen_Fronts_005" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    rel material:binding = </_materials/_Game_Materials_Laborraum_M_Kitchen_Fronts_M_Kitchen_Fronts_005>
                }

                over "_Game_Materials_Laborraum_M_Drawer_Mat_M_Drawer_Mat_001" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    rel material:binding = </_materials/_Game_Materials_Laborraum_M_Drawer_Mat_M_Drawer_Mat_001>
                }
            }
        }

        def Xform "cabinet1_drawer2_collision_0" (
            prepend apiSchemas = ["PhysicsMassAPI"]
        )
        {
            point3f physics:centerOfMass = (0, 0, 0)
            float physics:density = 100
            float3 physics:diagonalInertia = (-5.449442, -3.814377, 12.130113)
            float physics:mass = 1.0737832
            quatf physics:principalAxes = (-0.22344175, -0.13998188, 0.3611832, 0.8944415)
            matrix4d xformOp:transform = ( (0.0095, 0, 0, 0), (0, 0.298468, 0, 0), (0, 0, 0.19714, 0), (-0.233977, 0, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Cube "Cube" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(1, 0, 0)]
                float[] primvars:displayOpacity = [0.5]
            }
        }

        def Xform "cabinet1_drawer2_collision_1" (
            prepend apiSchemas = ["PhysicsMassAPI"]
        )
        {
            point3f physics:centerOfMass = (0, 0, 0)
            float physics:density = 100
            float3 physics:diagonalInertia = (-5.449442, -3.814377, 12.130113)
            float physics:mass = 1.0737832
            quatf physics:principalAxes = (-0.22344175, -0.13998188, 0.3611832, 0.8944415)
            matrix4d xformOp:transform = ( (0.24585, 0, 0, 0), (0, 0.0079221, 0, 0), (0, 0, 0.0111962, 0), (0.021336, -0.26865, -0.0084109, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Cube "Cube" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(1, 0, 0)]
                float[] primvars:displayOpacity = [0.5]
            }
        }

        def Xform "cabinet1_drawer2_collision_2" (
            prepend apiSchemas = ["PhysicsMassAPI"]
        )
        {
            point3f physics:centerOfMass = (0, 0, 0)
            float physics:density = 100
            float3 physics:diagonalInertia = (-5.449442, -3.814377, 12.130113)
            float physics:mass = 1.0737832
            quatf physics:principalAxes = (-0.22344175, -0.13998188, 0.3611832, 0.8944415)
            matrix4d xformOp:transform = ( (0.24585, 0, 0, 0), (0, 0.0079221, 0, 0), (0, 0, 0.0111962, 0), (0.021336, 0.26865, -0.0084109, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Cube "Cube" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(1, 0, 0)]
                float[] primvars:displayOpacity = [0.5]
            }
        }

        def Xform "cabinet1_drawer2_collision_3" (
            prepend apiSchemas = ["PhysicsMassAPI"]
        )
        {
            point3f physics:centerOfMass = (0, 0, 0)
            float physics:density = 100
            float3 physics:diagonalInertia = (-5.449442, -3.814377, 12.130113)
            float physics:mass = 1.0737832
            quatf physics:principalAxes = (-0.22344175, -0.13998188, 0.3611832, 0.8944415)
            matrix4d xformOp:transform = ( (0.24585, 0, 0, 0), (0, 0.0079221, 0, 0), (0, 0, 0.041751, 0), (0.021336, -0.26865, -0.12854, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Cube "Cube" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(1, 0, 0)]
                float[] primvars:displayOpacity = [0.5]
            }
        }

        def Xform "cabinet1_drawer2_collision_4" (
            prepend apiSchemas = ["PhysicsMassAPI"]
        )
        {
            point3f physics:centerOfMass = (0, 0, 0)
            float physics:density = 100
            float3 physics:diagonalInertia = (-5.449442, -3.814377, 12.130113)
            float physics:mass = 1.0737832
            quatf physics:principalAxes = (-0.22344175, -0.13998188, 0.3611832, 0.8944415)
            matrix4d xformOp:transform = ( (0.24585, 0, 0, 0), (0, 0.0079221, 0, 0), (0, 0, 0.041751, 0), (0.021336, 0.26865, -0.12854, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Cube "Cube" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(1, 0, 0)]
                float[] primvars:displayOpacity = [0.5]
            }
        }

        def Xform "cabinet1_drawer2_collision_5" (
            prepend apiSchemas = ["PhysicsMassAPI"]
        )
        {
            point3f physics:centerOfMass = (0, 0, 0)
            float physics:density = 100
            float3 physics:diagonalInertia = (-5.449442, -3.814377, 12.130113)
            float physics:mass = 1.0737832
            quatf physics:principalAxes = (-0.22344175, -0.13998188, 0.3611832, 0.8944415)
            matrix4d xformOp:transform = ( (0.24578, 0, 0, 0), (0, 0.26182, 0, 0), (0, 0, 0.008, 0), (0.021399, 0, -0.16226, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Cube "Cube" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(1, 0, 0)]
                float[] primvars:displayOpacity = [0.5]
            }
        }

        def Xform "cabinet1_drawer2_collision_6" (
            prepend apiSchemas = ["PhysicsMassAPI"]
        )
        {
            point3f physics:centerOfMass = (0, 0, 0)
            float physics:density = 100
            float3 physics:diagonalInertia = (-5.449442, -3.814377, 12.130113)
            float physics:mass = 1.0737832
            quatf physics:principalAxes = (-0.22344175, -0.13998188, 0.3611832, 0.8944415)
            matrix4d xformOp:transform = ( (0.00932692, 0, 0, 0), (0, 0.26182, 0, 0), (0, 0, 0.0758612, 0), (0.26, 0, -0.0797358, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Cube "Cube" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(1, 0, 0)]
                float[] primvars:displayOpacity = [0.5]
            }
        }

        def Xform "cabinet1_drawer2_handle"
        {
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 2.220446049250313e-16, 1, 0), (0, -1, 2.220446049250313e-16, 0), (-0.26948316, -0.00145845, 0.150606, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Xform "cabinet1_drawer2_handle_visual_0" (
                prepend references = @./../meshes/usd/visual/SM_Kitchen_Handle.usda@</SM_Kitchen_Handle>
            )
            {
                matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]

                over "SM_Kitchen_Handle" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    rel material:binding = </_materials/_Game_Materials_Laborraum_M_Metal_Brushed_M_Metal_Brushed_003>
                }
            }

            def Xform "cabinet1_drawer2_handle_collision_0" (
                prepend apiSchemas = ["PhysicsMassAPI"]
            )
            {
                point3f physics:centerOfMass = (0, 0, 0)
                float physics:density = 100
                float3 physics:diagonalInertia = (-5.449442, -3.814377, 12.130113)
                float physics:mass = 1.0737832
                quatf physics:principalAxes = (-0.22344175, -0.13998188, 0.3611832, 0.8944415)
                matrix4d xformOp:transform = ( (0.01, 0, 0, 0), (0, 0.0065, 0, 0), (0, 0, 0.0065, 0), (0.0164985, 0, 0.08, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]

                def Cube "Cube" (
                    prepend apiSchemas = ["PhysicsCollisionAPI"]
                )
                {
                    float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                    bool physics:collisionEnabled = 1
                    color3f[] primvars:displayColor = [(1, 0, 0)]
                    float[] primvars:displayOpacity = [0.5]
                }
            }

            def Xform "cabinet1_drawer2_handle_collision_1" (
                prepend apiSchemas = ["PhysicsMassAPI"]
            )
            {
                point3f physics:centerOfMass = (0, 0, 0)
                float physics:density = 100
                float3 physics:diagonalInertia = (-5.449442, -3.814377, 12.130113)
                float physics:mass = 1.0737832
                quatf physics:principalAxes = (-0.22344175, -0.13998188, 0.3611832, 0.8944415)
                matrix4d xformOp:transform = ( (0.01, 0, 0, 0), (0, 0.0065, 0, 0), (0, 0, 0.0065, 0), (0.0164985, 0, -0.08, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]

                def Cube "Cube" (
                    prepend apiSchemas = ["PhysicsCollisionAPI"]
                )
                {
                    float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                    bool physics:collisionEnabled = 1
                    color3f[] primvars:displayColor = [(1, 0, 0)]
                    float[] primvars:displayOpacity = [0.5]
                }
            }

            def Xform "cabinet1_drawer2_handle_collision_2" (
                prepend apiSchemas = ["PhysicsMassAPI"]
            )
            {
                point3f physics:centerOfMass = (0, 0, 0)
                float physics:density = 100
                float3 physics:diagonalInertia = (-5.449442, -3.814377, 12.130113)
                float physics:mass = 1.0737832
                quatf physics:principalAxes = (-0.22344175, -0.13998188, 0.3611832, 0.8944415)
                matrix4d xformOp:transform = ( (0.0065, 0, 0, 0), (0, 0.0065, 0, 0), (0, 0, 0.086516, 0), (0, 0, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]

                def Cube "Cube" (
                    prepend apiSchemas = ["PhysicsCollisionAPI"]
                )
                {
                    float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                    bool physics:collisionEnabled = 1
                    color3f[] primvars:displayColor = [(1, 0, 0)]
                    float[] primvars:displayOpacity = [0.5]
                }
            }
        }
    }

    def Xform "oven_door" (
        prepend apiSchemas = ["PhysicsRigidBodyAPI"]
    )
    {
        bool physics:rigidBodyEnabled = 1
        matrix4d xformOp:transform = ( (2.719262146893782e-32, 2.220446049250313e-16, -1, 0), (-1, -9.957992501029599e-17, 0, 0), (-9.957992501029599e-17, 1, 2.220446049250313e-16, 0), (0.55859076, 1.47911843, 0.77173355, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]

        def Xform "oven_door_visual_0" (
            prepend references = @./../meshes/usd/visual/SM_Oven_Door.usda@</SM_Oven_Door>
        )
        {
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            over "SM_Oven_Door" (
                prepend apiSchemas = ["MaterialBindingAPI"]
            )
            {
                rel material:binding = </_materials/_Game_Materials_Laborraum_M_Glass_Oven_M_Glass_Oven_001>

                over "_Game_Materials_Laborraum_M_Glass_Oven_Door_M_Glass_Oven_Do" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    rel material:binding = </_materials/_Game_Materials_Laborraum_M_Glass_Oven_Door_M_Glass_Oven_Do>
                }

                over "_Game_Materials_Laborraum_M_Rubber_Plastic_M_Rubber_Plastic_002" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    rel material:binding = </_materials/_Game_Materials_Laborraum_M_Rubber_Plastic_M_Rubber_Plastic_002>
                }

                over "_Game_Materials_Laborraum_M_OvenBase_M_OvenBase_001" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    rel material:binding = </_materials/_Game_Materials_Laborraum_M_OvenBase_M_OvenBase_001>
                }

                over "_Game_Materials_Laborraum_M_Glass_Oven_M_Glass_Oven_001" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    rel material:binding = </_materials/_Game_Materials_Laborraum_M_Glass_Oven_M_Glass_Oven_001>
                }
            }
        }

        def Xform "oven_door_collision_0" (
            prepend apiSchemas = ["PhysicsMassAPI"]
        )
        {
            point3f physics:centerOfMass = (0, 0, 0)
            float physics:density = 100
            float3 physics:diagonalInertia = (-4.4797125, -2.0985637, 10.561741)
            float physics:mass = 0.019226577
            quatf physics:principalAxes = (0.39592364, 0.721872, -0.4746533, -0.31120655)
            matrix4d xformOp:transform = ( (0.235848, 0, 0, 0), (0, 0.018499, 0, 0), (0, 0, 0.295294, 0), (-0.226757, 0.005395, -0.002993, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Cube "Cube" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(1, 0, 0)]
                float[] primvars:displayOpacity = [0.5]
            }
        }
    }

    def Xform "cabinet2_door" (
        prepend apiSchemas = ["PhysicsRigidBodyAPI"]
    )
    {
        bool physics:rigidBodyEnabled = 1
        matrix4d xformOp:transform = ( (-1, 1.2246467991473532e-16, 0, 0), (-1.2246467991473532e-16, -1, 0, 0), (0, 0, 1, 0), (0.5642308, 1.79048429, 1.16344779, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]

        def Xform "cabinet2_door_visual_0" (
            prepend references = @./../meshes/usd/visual/SM_Kitchen_02_Door.usda@</SM_Kitchen_02_Door>
        )
        {
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            over "SM_Kitchen_02_Door_001" (
                prepend apiSchemas = ["MaterialBindingAPI"]
            )
            {
                rel material:binding = </_materials/_Game_Materials_Laborraum_M_Kitchen_Fronts_M_Kitchen_Fronts_006>

                over "_Game_Materials_Laborraum_M_Metal_Chrome_M_Metal_Chrome_007" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    rel material:binding = </_materials/_Game_Materials_Laborraum_M_Metal_Chrome_M_Metal_Chrome_007>
                }

                over "_Game_Materials_Laborraum_M_Kitchen_Fronts_M_Kitchen_Fronts_006" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    rel material:binding = </_materials/_Game_Materials_Laborraum_M_Kitchen_Fronts_M_Kitchen_Fronts_006>
                }
            }
        }

        def Xform "cabinet2_door_collision_0" (
            prepend apiSchemas = ["PhysicsMassAPI"]
        )
        {
            point3f physics:centerOfMass = (0, 0, 0)
            float physics:density = 100
            float3 physics:diagonalInertia = (-39.997124, -21.751907, 91.43974)
            float physics:mass = 1.6019
            quatf physics:principalAxes = (0.24109606, 0.9666183, 0.048708666, 0.0717581)
            matrix4d xformOp:transform = ( (0.0095, 0, 0, 0), (0, 0.198479, 0, 0), (0, 0, 1.06138, 0), (-0.000653, -0.185074, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Cube "Cube" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(1, 0, 0)]
                float[] primvars:displayOpacity = [0.5]
            }
        }

        def Xform "cabinet2_door_handle"
        {
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 2.220446049250313e-16, 1, 0), (0, -1, 2.220446049250313e-16, 0), (-0.02184994, -0.25886013, -0.10518866, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Xform "cabinet2_door_handle_visual_0" (
                prepend references = @./../meshes/usd/visual/SM_Kitchen_Handle.usda@</SM_Kitchen_Handle>
            )
            {
                matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]

                over "SM_Kitchen_Handle" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    rel material:binding = </_materials/_Game_Materials_Laborraum_M_Metal_Brushed_M_Metal_Brushed_003>
                }
            }

            def Xform "cabinet2_door_handle_collision_0" (
                prepend apiSchemas = ["PhysicsMassAPI"]
            )
            {
                point3f physics:centerOfMass = (0, 0, 0)
                float physics:density = 100
                float3 physics:diagonalInertia = (-39.997124, -21.751907, 91.43974)
                float physics:mass = 1.6019
                quatf physics:principalAxes = (0.24109606, 0.9666183, 0.048708666, 0.0717581)
                matrix4d xformOp:transform = ( (0.01, 0, 0, 0), (0, 0.0065, 0, 0), (0, 0, 0.0065, 0), (0.0164985, 0, 0.08, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]

                def Cube "Cube" (
                    prepend apiSchemas = ["PhysicsCollisionAPI"]
                )
                {
                    float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                    bool physics:collisionEnabled = 1
                    color3f[] primvars:displayColor = [(1, 0, 0)]
                    float[] primvars:displayOpacity = [0.5]
                }
            }

            def Xform "cabinet2_door_handle_collision_1" (
                prepend apiSchemas = ["PhysicsMassAPI"]
            )
            {
                point3f physics:centerOfMass = (0, 0, 0)
                float physics:density = 100
                float3 physics:diagonalInertia = (-39.997124, -21.751907, 91.43974)
                float physics:mass = 1.6019
                quatf physics:principalAxes = (0.24109606, 0.9666183, 0.048708666, 0.0717581)
                matrix4d xformOp:transform = ( (0.01, 0, 0, 0), (0, 0.0065, 0, 0), (0, 0, 0.0065, 0), (0.0164985, 0, -0.08, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]

                def Cube "Cube" (
                    prepend apiSchemas = ["PhysicsCollisionAPI"]
                )
                {
                    float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                    bool physics:collisionEnabled = 1
                    color3f[] primvars:displayColor = [(1, 0, 0)]
                    float[] primvars:displayOpacity = [0.5]
                }
            }

            def Xform "cabinet2_door_handle_collision_2" (
                prepend apiSchemas = ["PhysicsMassAPI"]
            )
            {
                point3f physics:centerOfMass = (0, 0, 0)
                float physics:density = 100
                float3 physics:diagonalInertia = (-39.997124, -21.751907, 91.43974)
                float physics:mass = 1.6019
                quatf physics:principalAxes = (0.24109606, 0.9666183, 0.048708666, 0.0717581)
                matrix4d xformOp:transform = ( (0.0065, 0, 0, 0), (0, 0.0065, 0, 0), (0, 0, 0.086516, 0), (0, 0, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]

                def Cube "Cube" (
                    prepend apiSchemas = ["PhysicsCollisionAPI"]
                )
                {
                    float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                    bool physics:collisionEnabled = 1
                    color3f[] primvars:displayColor = [(1, 0, 0)]
                    float[] primvars:displayOpacity = [0.5]
                }
            }
        }
    }

    def Xform "cabinet2_drawer1" (
        prepend apiSchemas = ["PhysicsRigidBodyAPI"]
    )
    {
        bool physics:rigidBodyEnabled = 1
        matrix4d xformOp:transform = ( (-1, 1.2246467991473532e-16, 0, 0), (-1.2246467991473532e-16, -1, 0, 0), (0, 0, 1, 0), (0.28455711, 1.97570891, 1.74285125, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]

        def Xform "cabinet2_drawer1_visual_0" (
            prepend references = @./../meshes/usd/visual/SM_Kitchen_02_Drawer_01.usda@</SM_Kitchen_02_Drawer_01>
        )
        {
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            over "SM_Kitchen_02_Drawer_01" (
                prepend apiSchemas = ["MaterialBindingAPI"]
            )
            {
                rel material:binding = </_materials/_Game_Materials_Laborraum_M_Drawer_Mat_M_Drawer_Mat_002>

                over "_Game_Materials_Laborraum_M_Metal_Chrome_M_Metal_Chrome_009" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    rel material:binding = </_materials/_Game_Materials_Laborraum_M_Metal_Chrome_M_Metal_Chrome_009>
                }

                over "_Game_Materials_Laborraum_M_Plastic_White_M_Plastic_White_006" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    rel material:binding = </_materials/_Game_Materials_Laborraum_M_Plastic_White_M_Plastic_White_006>
                }

                over "_Game_Materials_Laborraum_M_Drawer_Mat_M_Drawer_Mat_002" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    rel material:binding = </_materials/_Game_Materials_Laborraum_M_Drawer_Mat_M_Drawer_Mat_002>
                }
            }
        }

        def Xform "cabinet2_drawer1_collision_0" (
            prepend apiSchemas = ["PhysicsMassAPI"]
        )
        {
            point3f physics:centerOfMass = (0, 0, 0)
            float physics:density = 100
            float3 physics:diagonalInertia = (-1.9416206, -0.9968829, 3.4259748)
            float physics:mass = 0.48342413
            quatf physics:principalAxes = (-0.5736558, -0.21801256, 0.76776356, -0.18419749)
            matrix4d xformOp:transform = ( (0.0085, 0, 0, 0), (0, 0.180981, 0, 0), (0, 0, 0.050495, 0), (-0.242975, 0, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Cube "Cube" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(1, 0, 0)]
                float[] primvars:displayOpacity = [0.5]
            }
        }

        def Xform "cabinet2_drawer1_collision_1" (
            prepend apiSchemas = ["PhysicsMassAPI"]
        )
        {
            point3f physics:centerOfMass = (0, 0, 0)
            float physics:density = 100
            float3 physics:diagonalInertia = (-1.9416206, -0.9968829, 3.4259748)
            float physics:mass = 0.48342413
            quatf physics:principalAxes = (-0.5736558, -0.21801256, 0.76776356, -0.18419749)
            matrix4d xformOp:transform = ( (0.008064, 0, 0, 0), (0, 0.180981, 0, 0), (0, 0, 0.050495, 0), (0.235441, 0, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Cube "Cube" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(1, 0, 0)]
                float[] primvars:displayOpacity = [0.5]
            }
        }

        def Xform "cabinet2_drawer1_collision_2" (
            prepend apiSchemas = ["PhysicsMassAPI"]
        )
        {
            point3f physics:centerOfMass = (0, 0, 0)
            float physics:density = 100
            float3 physics:diagonalInertia = (-1.9416206, -0.9968829, 3.4259748)
            float physics:mass = 0.48342413
            quatf physics:principalAxes = (-0.5736558, -0.21801256, 0.76776356, -0.18419749)
            matrix4d xformOp:transform = ( (0.247489, 0, 0, 0), (0, 0.008, 0, 0), (0, 0, 0.050495, 0), (-0.003984, 0.170578, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Cube "Cube" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(1, 0, 0)]
                float[] primvars:displayOpacity = [0.5]
            }
        }

        def Xform "cabinet2_drawer1_collision_3" (
            prepend apiSchemas = ["PhysicsMassAPI"]
        )
        {
            point3f physics:centerOfMass = (0, 0, 0)
            float physics:density = 100
            float3 physics:diagonalInertia = (-1.9416206, -0.9968829, 3.4259748)
            float physics:mass = 0.48342413
            quatf physics:principalAxes = (-0.5736558, -0.21801256, 0.76776356, -0.18419749)
            matrix4d xformOp:transform = ( (0.247489, 0, 0, 0), (0, 0.008, 0, 0), (0, 0, 0.050495, 0), (-0.003984, -0.170578, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Cube "Cube" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(1, 0, 0)]
                float[] primvars:displayOpacity = [0.5]
            }
        }

        def Xform "cabinet2_drawer1_collision_4" (
            prepend apiSchemas = ["PhysicsMassAPI"]
        )
        {
            point3f physics:centerOfMass = (0, 0, 0)
            float physics:density = 100
            float3 physics:diagonalInertia = (-1.9416206, -0.9968829, 3.4259748)
            float physics:mass = 0.48342413
            quatf physics:principalAxes = (-0.5736558, -0.21801256, 0.76776356, -0.18419749)
            matrix4d xformOp:transform = ( (0.247489, 0, 0, 0), (0, 0.180981, 0, 0), (0, 0, 0.010749, 0), (-0.003984, 0, -0.039746, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Cube "Cube" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(1, 0, 0)]
                float[] primvars:displayOpacity = [0.5]
            }
        }
    }

    def Xform "cabinet2_drawer2" (
        prepend apiSchemas = ["PhysicsRigidBodyAPI"]
    )
    {
        bool physics:rigidBodyEnabled = 1
        matrix4d xformOp:transform = ( (-1, 1.2246467991473532e-16, 0, 0), (-1.2246467991473532e-16, -1, 0, 0), (0, 0, 1, 0), (0.28455711, 1.9783996700000002, 1.58513854, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]

        def Xform "cabinet2_drawer2_visual_0" (
            prepend references = @./../meshes/usd/visual/SM_Kitchen_02_Drawer_02.usda@</SM_Kitchen_02_Drawer_02>
        )
        {
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            over "SM_Kitchen_02_Drawer_02" (
                prepend apiSchemas = ["MaterialBindingAPI"]
            )
            {
                rel material:binding = </_materials/_Game_Materials_Laborraum_M_Drawer_Mat_M_Drawer_Mat_003>

                over "_Game_Materials_Laborraum_M_Metal_Chrome_M_Metal_Chrome_010" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    rel material:binding = </_materials/_Game_Materials_Laborraum_M_Metal_Chrome_M_Metal_Chrome_010>
                }

                over "_Game_Materials_Laborraum_M_Plastic_White_M_Plastic_White_007" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    rel material:binding = </_materials/_Game_Materials_Laborraum_M_Plastic_White_M_Plastic_White_007>
                }

                over "_Game_Materials_Laborraum_M_Drawer_Mat_M_Drawer_Mat_003" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    rel material:binding = </_materials/_Game_Materials_Laborraum_M_Drawer_Mat_M_Drawer_Mat_003>
                }
            }
        }

        def Xform "cabinet2_drawer2_collision_0" (
            prepend apiSchemas = ["PhysicsMassAPI"]
        )
        {
            point3f physics:centerOfMass = (0, 0, 0)
            float physics:density = 100
            float3 physics:diagonalInertia = (-2.256894, -1.3536373, 4.6985965)
            float physics:mass = 0.5777372
            quatf physics:principalAxes = (-0.5554302, -0.21707855, 0.78277975, -0.17784847)
            matrix4d xformOp:transform = ( (0.006898, 0, 0, 0), (0, 0.180981, 0, 0), (0, 0, 0.049, 0), (-0.242374, 0, -0.042, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Cube "Cube" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(1, 0, 0)]
                float[] primvars:displayOpacity = [0.5]
            }
        }

        def Xform "cabinet2_drawer2_collision_1" (
            prepend apiSchemas = ["PhysicsMassAPI"]
        )
        {
            point3f physics:centerOfMass = (0, 0, 0)
            float physics:density = 100
            float3 physics:diagonalInertia = (-2.256894, -1.3536373, 4.6985965)
            float physics:mass = 0.5777372
            quatf physics:principalAxes = (-0.5554302, -0.21707855, 0.78277975, -0.17784847)
            matrix4d xformOp:transform = ( (0.006898, 0, 0, 0), (0, 0.180981, 0, 0), (0, 0, 0.010149, 0), (-0.242374, 0, 0.060843, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Cube "Cube" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(1, 0, 0)]
                float[] primvars:displayOpacity = [0.5]
            }
        }

        def Xform "cabinet2_drawer2_collision_2" (
            prepend apiSchemas = ["PhysicsMassAPI"]
        )
        {
            point3f physics:centerOfMass = (0, 0, 0)
            float physics:density = 100
            float3 physics:diagonalInertia = (-2.256894, -1.3536373, 4.6985965)
            float physics:mass = 0.5777372
            quatf physics:principalAxes = (-0.5554302, -0.21707855, 0.78277975, -0.17784847)
            matrix4d xformOp:transform = ( (0.008393, 0, 0, 0), (0, 0.032441, 0, 0), (0, 0, 0.09099, 0), (-0.242869, 0.148428, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Cube "Cube" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(1, 0, 0)]
                float[] primvars:displayOpacity = [0.5]
            }
        }

        def Xform "cabinet2_drawer2_collision_3" (
            prepend apiSchemas = ["PhysicsMassAPI"]
        )
        {
            point3f physics:centerOfMass = (0, 0, 0)
            float physics:density = 100
            float3 physics:diagonalInertia = (-2.256894, -1.3536373, 4.6985965)
            float physics:mass = 0.5777372
            quatf physics:principalAxes = (-0.5554302, -0.21707855, 0.78277975, -0.17784847)
            matrix4d xformOp:transform = ( (0.008393, 0, 0, 0), (0, 0.032441, 0, 0), (0, 0, 0.09099, 0), (-0.242869, -0.148428, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Cube "Cube" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(1, 0, 0)]
                float[] primvars:displayOpacity = [0.5]
            }
        }

        def Xform "cabinet2_drawer2_collision_4" (
            prepend apiSchemas = ["PhysicsMassAPI"]
        )
        {
            point3f physics:centerOfMass = (0, 0, 0)
            float physics:density = 100
            float3 physics:diagonalInertia = (-2.256894, -1.3536373, 4.6985965)
            float physics:mass = 0.5777372
            quatf physics:principalAxes = (-0.5554302, -0.21707855, 0.78277975, -0.17784847)
            matrix4d xformOp:transform = ( (0.008064, 0, 0, 0), (0, 0.180981, 0, 0), (0, 0, 0.090879, 0), (0.235441, 0, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Cube "Cube" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(1, 0, 0)]
                float[] primvars:displayOpacity = [0.5]
            }
        }

        def Xform "cabinet2_drawer2_collision_5" (
            prepend apiSchemas = ["PhysicsMassAPI"]
        )
        {
            point3f physics:centerOfMass = (0, 0, 0)
            float physics:density = 100
            float3 physics:diagonalInertia = (-2.256894, -1.3536373, 4.6985965)
            float physics:mass = 0.5777372
            quatf physics:principalAxes = (-0.5554302, -0.21707855, 0.78277975, -0.17784847)
            matrix4d xformOp:transform = ( (0.247489, 0, 0, 0), (0, 0.008, 0, 0), (0, 0, 0.011649, 0), (-0.003984, 0.170578, 0.075342, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Cube "Cube" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(1, 0, 0)]
                float[] primvars:displayOpacity = [0.5]
            }
        }

        def Xform "cabinet2_drawer2_collision_6" (
            prepend apiSchemas = ["PhysicsMassAPI"]
        )
        {
            point3f physics:centerOfMass = (0, 0, 0)
            float physics:density = 100
            float3 physics:diagonalInertia = (-2.256894, -1.3536373, 4.6985965)
            float physics:mass = 0.5777372
            quatf physics:principalAxes = (-0.5554302, -0.21707855, 0.78277975, -0.17784847)
            matrix4d xformOp:transform = ( (0.247489, 0, 0, 0), (0, 0.008, 0, 0), (0, 0, 0.011649, 0), (-0.003984, -0.170578, 0.075342, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Cube "Cube" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(1, 0, 0)]
                float[] primvars:displayOpacity = [0.5]
            }
        }

        def Xform "cabinet2_drawer2_collision_7" (
            prepend apiSchemas = ["PhysicsMassAPI"]
        )
        {
            point3f physics:centerOfMass = (0, 0, 0)
            float physics:density = 100
            float3 physics:diagonalInertia = (-2.256894, -1.3536373, 4.6985965)
            float physics:mass = 0.5777372
            quatf physics:principalAxes = (-0.5554302, -0.21707855, 0.78277975, -0.17784847)
            matrix4d xformOp:transform = ( (0.247489, 0, 0, 0), (0, 0.008, 0, 0), (0, 0, 0.043553, 0), (-0.003984, 0.170578, -0.043743, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Cube "Cube" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(1, 0, 0)]
                float[] primvars:displayOpacity = [0.5]
            }
        }

        def Xform "cabinet2_drawer2_collision_8" (
            prepend apiSchemas = ["PhysicsMassAPI"]
        )
        {
            point3f physics:centerOfMass = (0, 0, 0)
            float physics:density = 100
            float3 physics:diagonalInertia = (-2.256894, -1.3536373, 4.6985965)
            float physics:mass = 0.5777372
            quatf physics:principalAxes = (-0.5554302, -0.21707855, 0.78277975, -0.17784847)
            matrix4d xformOp:transform = ( (0.247489, 0, 0, 0), (0, 0.008, 0, 0), (0, 0, 0.043553, 0), (-0.003984, -0.170578, -0.043743, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Cube "Cube" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(1, 0, 0)]
                float[] primvars:displayOpacity = [0.5]
            }
        }

        def Xform "cabinet2_drawer2_collision_9" (
            prepend apiSchemas = ["PhysicsMassAPI"]
        )
        {
            point3f physics:centerOfMass = (0, 0, 0)
            float physics:density = 100
            float3 physics:diagonalInertia = (-2.256894, -1.3536373, 4.6985965)
            float physics:mass = 0.5777372
            quatf physics:principalAxes = (-0.5554302, -0.21707855, 0.78277975, -0.17784847)
            matrix4d xformOp:transform = ( (0.247489, 0, 0, 0), (0, 0.180981, 0, 0), (0, 0, 0.010749, 0), (-0.003984, 0, -0.080242, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Cube "Cube" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(1, 0, 0)]
                float[] primvars:displayOpacity = [0.5]
            }
        }
    }

    def Xform "cabinet2_drawer3" (
        prepend apiSchemas = ["PhysicsRigidBodyAPI"]
    )
    {
        bool physics:rigidBodyEnabled = 1
        matrix4d xformOp:transform = ( (-1, 1.2246467991473532e-16, 0, 0), (-1.2246467991473532e-16, -1, 0, 0), (0, 0, 1, 0), (0.28455711, 1.9783996700000002, 1.30528564, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]

        def Xform "cabinet2_drawer3_visual_0" (
            prepend references = @./../meshes/usd/visual/SM_Kitchen_02_Drawer_02.usda@</SM_Kitchen_02_Drawer_02>
        )
        {
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            over "SM_Kitchen_02_Drawer_02" (
                prepend apiSchemas = ["MaterialBindingAPI"]
            )
            {
                rel material:binding = </_materials/_Game_Materials_Laborraum_M_Drawer_Mat_M_Drawer_Mat_003>

                over "_Game_Materials_Laborraum_M_Metal_Chrome_M_Metal_Chrome_010" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    rel material:binding = </_materials/_Game_Materials_Laborraum_M_Metal_Chrome_M_Metal_Chrome_010>
                }

                over "_Game_Materials_Laborraum_M_Plastic_White_M_Plastic_White_007" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    rel material:binding = </_materials/_Game_Materials_Laborraum_M_Plastic_White_M_Plastic_White_007>
                }

                over "_Game_Materials_Laborraum_M_Drawer_Mat_M_Drawer_Mat_003" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    rel material:binding = </_materials/_Game_Materials_Laborraum_M_Drawer_Mat_M_Drawer_Mat_003>
                }
            }
        }

        def Xform "cabinet2_drawer3_collision_0" (
            prepend apiSchemas = ["PhysicsMassAPI"]
        )
        {
            point3f physics:centerOfMass = (0, 0, 0)
            float physics:density = 100
            float3 physics:diagonalInertia = (-2.256894, -1.3536373, 4.6985965)
            float physics:mass = 0.5777372
            quatf physics:principalAxes = (-0.5554302, -0.21707855, 0.78277975, -0.17784847)
            matrix4d xformOp:transform = ( (0.006898, 0, 0, 0), (0, 0.180981, 0, 0), (0, 0, 0.049, 0), (-0.242374, 0, -0.042, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Cube "Cube" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(1, 0, 0)]
                float[] primvars:displayOpacity = [0.5]
            }
        }

        def Xform "cabinet2_drawer3_collision_1" (
            prepend apiSchemas = ["PhysicsMassAPI"]
        )
        {
            point3f physics:centerOfMass = (0, 0, 0)
            float physics:density = 100
            float3 physics:diagonalInertia = (-2.256894, -1.3536373, 4.6985965)
            float physics:mass = 0.5777372
            quatf physics:principalAxes = (-0.5554302, -0.21707855, 0.78277975, -0.17784847)
            matrix4d xformOp:transform = ( (0.006898, 0, 0, 0), (0, 0.180981, 0, 0), (0, 0, 0.010149, 0), (-0.242374, 0, 0.060843, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Cube "Cube" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(1, 0, 0)]
                float[] primvars:displayOpacity = [0.5]
            }
        }

        def Xform "cabinet2_drawer3_collision_2" (
            prepend apiSchemas = ["PhysicsMassAPI"]
        )
        {
            point3f physics:centerOfMass = (0, 0, 0)
            float physics:density = 100
            float3 physics:diagonalInertia = (-2.256894, -1.3536373, 4.6985965)
            float physics:mass = 0.5777372
            quatf physics:principalAxes = (-0.5554302, -0.21707855, 0.78277975, -0.17784847)
            matrix4d xformOp:transform = ( (0.008393, 0, 0, 0), (0, 0.032441, 0, 0), (0, 0, 0.09099, 0), (-0.242869, 0.148428, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Cube "Cube" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(1, 0, 0)]
                float[] primvars:displayOpacity = [0.5]
            }
        }

        def Xform "cabinet2_drawer3_collision_3" (
            prepend apiSchemas = ["PhysicsMassAPI"]
        )
        {
            point3f physics:centerOfMass = (0, 0, 0)
            float physics:density = 100
            float3 physics:diagonalInertia = (-2.256894, -1.3536373, 4.6985965)
            float physics:mass = 0.5777372
            quatf physics:principalAxes = (-0.5554302, -0.21707855, 0.78277975, -0.17784847)
            matrix4d xformOp:transform = ( (0.008393, 0, 0, 0), (0, 0.032441, 0, 0), (0, 0, 0.09099, 0), (-0.242869, -0.148428, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Cube "Cube" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(1, 0, 0)]
                float[] primvars:displayOpacity = [0.5]
            }
        }

        def Xform "cabinet2_drawer3_collision_4" (
            prepend apiSchemas = ["PhysicsMassAPI"]
        )
        {
            point3f physics:centerOfMass = (0, 0, 0)
            float physics:density = 100
            float3 physics:diagonalInertia = (-2.256894, -1.3536373, 4.6985965)
            float physics:mass = 0.5777372
            quatf physics:principalAxes = (-0.5554302, -0.21707855, 0.78277975, -0.17784847)
            matrix4d xformOp:transform = ( (0.008064, 0, 0, 0), (0, 0.180981, 0, 0), (0, 0, 0.090879, 0), (0.235441, 0, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Cube "Cube" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(1, 0, 0)]
                float[] primvars:displayOpacity = [0.5]
            }
        }

        def Xform "cabinet2_drawer3_collision_5" (
            prepend apiSchemas = ["PhysicsMassAPI"]
        )
        {
            point3f physics:centerOfMass = (0, 0, 0)
            float physics:density = 100
            float3 physics:diagonalInertia = (-2.256894, -1.3536373, 4.6985965)
            float physics:mass = 0.5777372
            quatf physics:principalAxes = (-0.5554302, -0.21707855, 0.78277975, -0.17784847)
            matrix4d xformOp:transform = ( (0.247489, 0, 0, 0), (0, 0.008, 0, 0), (0, 0, 0.011649, 0), (-0.003984, 0.170578, 0.075342, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Cube "Cube" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(1, 0, 0)]
                float[] primvars:displayOpacity = [0.5]
            }
        }

        def Xform "cabinet2_drawer3_collision_6" (
            prepend apiSchemas = ["PhysicsMassAPI"]
        )
        {
            point3f physics:centerOfMass = (0, 0, 0)
            float physics:density = 100
            float3 physics:diagonalInertia = (-2.256894, -1.3536373, 4.6985965)
            float physics:mass = 0.5777372
            quatf physics:principalAxes = (-0.5554302, -0.21707855, 0.78277975, -0.17784847)
            matrix4d xformOp:transform = ( (0.247489, 0, 0, 0), (0, 0.008, 0, 0), (0, 0, 0.011649, 0), (-0.003984, -0.170578, 0.075342, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Cube "Cube" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(1, 0, 0)]
                float[] primvars:displayOpacity = [0.5]
            }
        }

        def Xform "cabinet2_drawer3_collision_7" (
            prepend apiSchemas = ["PhysicsMassAPI"]
        )
        {
            point3f physics:centerOfMass = (0, 0, 0)
            float physics:density = 100
            float3 physics:diagonalInertia = (-2.256894, -1.3536373, 4.6985965)
            float physics:mass = 0.5777372
            quatf physics:principalAxes = (-0.5554302, -0.21707855, 0.78277975, -0.17784847)
            matrix4d xformOp:transform = ( (0.247489, 0, 0, 0), (0, 0.008, 0, 0), (0, 0, 0.043553, 0), (-0.003984, 0.170578, -0.043743, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Cube "Cube" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(1, 0, 0)]
                float[] primvars:displayOpacity = [0.5]
            }
        }

        def Xform "cabinet2_drawer3_collision_8" (
            prepend apiSchemas = ["PhysicsMassAPI"]
        )
        {
            point3f physics:centerOfMass = (0, 0, 0)
            float physics:density = 100
            float3 physics:diagonalInertia = (-2.256894, -1.3536373, 4.6985965)
            float physics:mass = 0.5777372
            quatf physics:principalAxes = (-0.5554302, -0.21707855, 0.78277975, -0.17784847)
            matrix4d xformOp:transform = ( (0.247489, 0, 0, 0), (0, 0.008, 0, 0), (0, 0, 0.043553, 0), (-0.003984, -0.170578, -0.043743, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Cube "Cube" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(1, 0, 0)]
                float[] primvars:displayOpacity = [0.5]
            }
        }

        def Xform "cabinet2_drawer3_collision_9" (
            prepend apiSchemas = ["PhysicsMassAPI"]
        )
        {
            point3f physics:centerOfMass = (0, 0, 0)
            float physics:density = 100
            float3 physics:diagonalInertia = (-2.256894, -1.3536373, 4.6985965)
            float physics:mass = 0.5777372
            quatf physics:principalAxes = (-0.5554302, -0.21707855, 0.78277975, -0.17784847)
            matrix4d xformOp:transform = ( (0.247489, 0, 0, 0), (0, 0.180981, 0, 0), (0, 0, 0.010749, 0), (-0.003984, 0, -0.080242, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Cube "Cube" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(1, 0, 0)]
                float[] primvars:displayOpacity = [0.5]
            }
        }
    }

    def Xform "cabinet2_drawer4" (
        prepend apiSchemas = ["PhysicsRigidBodyAPI"]
    )
    {
        bool physics:rigidBodyEnabled = 1
        matrix4d xformOp:transform = ( (-1, 1.2246467991473532e-16, 0, 0), (-1.2246467991473532e-16, -1, 0, 0), (0, 0, 1, 0), (0.28455711, 1.97570891, 0.9199520099999999, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]

        def Xform "cabinet2_drawer4_visual_0" (
            prepend references = @./../meshes/usd/visual/SM_Kitchen_02_Drawer_02.usda@</SM_Kitchen_02_Drawer_02>
        )
        {
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            over "SM_Kitchen_02_Drawer_02" (
                prepend apiSchemas = ["MaterialBindingAPI"]
            )
            {
                rel material:binding = </_materials/_Game_Materials_Laborraum_M_Drawer_Mat_M_Drawer_Mat_003>

                over "_Game_Materials_Laborraum_M_Metal_Chrome_M_Metal_Chrome_010" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    rel material:binding = </_materials/_Game_Materials_Laborraum_M_Metal_Chrome_M_Metal_Chrome_010>
                }

                over "_Game_Materials_Laborraum_M_Plastic_White_M_Plastic_White_007" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    rel material:binding = </_materials/_Game_Materials_Laborraum_M_Plastic_White_M_Plastic_White_007>
                }

                over "_Game_Materials_Laborraum_M_Drawer_Mat_M_Drawer_Mat_003" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    rel material:binding = </_materials/_Game_Materials_Laborraum_M_Drawer_Mat_M_Drawer_Mat_003>
                }
            }
        }

        def Xform "cabinet2_drawer4_collision_0" (
            prepend apiSchemas = ["PhysicsMassAPI"]
        )
        {
            point3f physics:centerOfMass = (0, 0, 0)
            float physics:density = 100
            float3 physics:diagonalInertia = (-2.256894, -1.3536373, 4.6985965)
            float physics:mass = 0.5777372
            quatf physics:principalAxes = (-0.5554302, -0.21707855, 0.78277975, -0.17784847)
            matrix4d xformOp:transform = ( (0.006898, 0, 0, 0), (0, 0.180981, 0, 0), (0, 0, 0.049, 0), (-0.242374, 0, -0.042, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Cube "Cube" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(1, 0, 0)]
                float[] primvars:displayOpacity = [0.5]
            }
        }

        def Xform "cabinet2_drawer4_collision_1" (
            prepend apiSchemas = ["PhysicsMassAPI"]
        )
        {
            point3f physics:centerOfMass = (0, 0, 0)
            float physics:density = 100
            float3 physics:diagonalInertia = (-2.256894, -1.3536373, 4.6985965)
            float physics:mass = 0.5777372
            quatf physics:principalAxes = (-0.5554302, -0.21707855, 0.78277975, -0.17784847)
            matrix4d xformOp:transform = ( (0.006898, 0, 0, 0), (0, 0.180981, 0, 0), (0, 0, 0.010149, 0), (-0.242374, 0, 0.060843, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Cube "Cube" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(1, 0, 0)]
                float[] primvars:displayOpacity = [0.5]
            }
        }

        def Xform "cabinet2_drawer4_collision_2" (
            prepend apiSchemas = ["PhysicsMassAPI"]
        )
        {
            point3f physics:centerOfMass = (0, 0, 0)
            float physics:density = 100
            float3 physics:diagonalInertia = (-2.256894, -1.3536373, 4.6985965)
            float physics:mass = 0.5777372
            quatf physics:principalAxes = (-0.5554302, -0.21707855, 0.78277975, -0.17784847)
            matrix4d xformOp:transform = ( (0.008393, 0, 0, 0), (0, 0.032441, 0, 0), (0, 0, 0.09099, 0), (-0.242869, 0.148428, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Cube "Cube" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(1, 0, 0)]
                float[] primvars:displayOpacity = [0.5]
            }
        }

        def Xform "cabinet2_drawer4_collision_3" (
            prepend apiSchemas = ["PhysicsMassAPI"]
        )
        {
            point3f physics:centerOfMass = (0, 0, 0)
            float physics:density = 100
            float3 physics:diagonalInertia = (-2.256894, -1.3536373, 4.6985965)
            float physics:mass = 0.5777372
            quatf physics:principalAxes = (-0.5554302, -0.21707855, 0.78277975, -0.17784847)
            matrix4d xformOp:transform = ( (0.008393, 0, 0, 0), (0, 0.032441, 0, 0), (0, 0, 0.09099, 0), (-0.242869, -0.148428, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Cube "Cube" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(1, 0, 0)]
                float[] primvars:displayOpacity = [0.5]
            }
        }

        def Xform "cabinet2_drawer4_collision_4" (
            prepend apiSchemas = ["PhysicsMassAPI"]
        )
        {
            point3f physics:centerOfMass = (0, 0, 0)
            float physics:density = 100
            float3 physics:diagonalInertia = (-2.256894, -1.3536373, 4.6985965)
            float physics:mass = 0.5777372
            quatf physics:principalAxes = (-0.5554302, -0.21707855, 0.78277975, -0.17784847)
            matrix4d xformOp:transform = ( (0.008064, 0, 0, 0), (0, 0.180981, 0, 0), (0, 0, 0.090879, 0), (0.235441, 0, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Cube "Cube" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(1, 0, 0)]
                float[] primvars:displayOpacity = [0.5]
            }
        }

        def Xform "cabinet2_drawer4_collision_5" (
            prepend apiSchemas = ["PhysicsMassAPI"]
        )
        {
            point3f physics:centerOfMass = (0, 0, 0)
            float physics:density = 100
            float3 physics:diagonalInertia = (-2.256894, -1.3536373, 4.6985965)
            float physics:mass = 0.5777372
            quatf physics:principalAxes = (-0.5554302, -0.21707855, 0.78277975, -0.17784847)
            matrix4d xformOp:transform = ( (0.247489, 0, 0, 0), (0, 0.008, 0, 0), (0, 0, 0.011649, 0), (-0.003984, 0.170578, 0.075342, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Cube "Cube" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(1, 0, 0)]
                float[] primvars:displayOpacity = [0.5]
            }
        }

        def Xform "cabinet2_drawer4_collision_6" (
            prepend apiSchemas = ["PhysicsMassAPI"]
        )
        {
            point3f physics:centerOfMass = (0, 0, 0)
            float physics:density = 100
            float3 physics:diagonalInertia = (-2.256894, -1.3536373, 4.6985965)
            float physics:mass = 0.5777372
            quatf physics:principalAxes = (-0.5554302, -0.21707855, 0.78277975, -0.17784847)
            matrix4d xformOp:transform = ( (0.247489, 0, 0, 0), (0, 0.008, 0, 0), (0, 0, 0.011649, 0), (-0.003984, -0.170578, 0.075342, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Cube "Cube" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(1, 0, 0)]
                float[] primvars:displayOpacity = [0.5]
            }
        }

        def Xform "cabinet2_drawer4_collision_7" (
            prepend apiSchemas = ["PhysicsMassAPI"]
        )
        {
            point3f physics:centerOfMass = (0, 0, 0)
            float physics:density = 100
            float3 physics:diagonalInertia = (-2.256894, -1.3536373, 4.6985965)
            float physics:mass = 0.5777372
            quatf physics:principalAxes = (-0.5554302, -0.21707855, 0.78277975, -0.17784847)
            matrix4d xformOp:transform = ( (0.247489, 0, 0, 0), (0, 0.008, 0, 0), (0, 0, 0.043553, 0), (-0.003984, 0.170578, -0.043743, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Cube "Cube" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(1, 0, 0)]
                float[] primvars:displayOpacity = [0.5]
            }
        }

        def Xform "cabinet2_drawer4_collision_8" (
            prepend apiSchemas = ["PhysicsMassAPI"]
        )
        {
            point3f physics:centerOfMass = (0, 0, 0)
            float physics:density = 100
            float3 physics:diagonalInertia = (-2.256894, -1.3536373, 4.6985965)
            float physics:mass = 0.5777372
            quatf physics:principalAxes = (-0.5554302, -0.21707855, 0.78277975, -0.17784847)
            matrix4d xformOp:transform = ( (0.247489, 0, 0, 0), (0, 0.008, 0, 0), (0, 0, 0.043553, 0), (-0.003984, -0.170578, -0.043743, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Cube "Cube" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(1, 0, 0)]
                float[] primvars:displayOpacity = [0.5]
            }
        }

        def Xform "cabinet2_drawer4_collision_9" (
            prepend apiSchemas = ["PhysicsMassAPI"]
        )
        {
            point3f physics:centerOfMass = (0, 0, 0)
            float physics:density = 100
            float3 physics:diagonalInertia = (-2.256894, -1.3536373, 4.6985965)
            float physics:mass = 0.5777372
            quatf physics:principalAxes = (-0.5554302, -0.21707855, 0.78277975, -0.17784847)
            matrix4d xformOp:transform = ( (0.247489, 0, 0, 0), (0, 0.180981, 0, 0), (0, 0, 0.010749, 0), (-0.003984, 0, -0.080242, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Cube "Cube" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(1, 0, 0)]
                float[] primvars:displayOpacity = [0.5]
            }
        }
    }

    def Xform "cabinet2_drawer5" (
        prepend apiSchemas = ["PhysicsRigidBodyAPI"]
    )
    {
        bool physics:rigidBodyEnabled = 1
        matrix4d xformOp:transform = ( (-1, 1.2246467991473532e-16, 0, 0), (-1.2246467991473532e-16, -1, 0, 0), (0, 0, 1, 0), (0.28455711, 1.97570891, 0.64429321, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]

        def Xform "cabinet2_drawer5_visual_0" (
            prepend references = @./../meshes/usd/visual/SM_Kitchen_02_Drawer_02.usda@</SM_Kitchen_02_Drawer_02>
        )
        {
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            over "SM_Kitchen_02_Drawer_02" (
                prepend apiSchemas = ["MaterialBindingAPI"]
            )
            {
                rel material:binding = </_materials/_Game_Materials_Laborraum_M_Drawer_Mat_M_Drawer_Mat_003>

                over "_Game_Materials_Laborraum_M_Metal_Chrome_M_Metal_Chrome_010" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    rel material:binding = </_materials/_Game_Materials_Laborraum_M_Metal_Chrome_M_Metal_Chrome_010>
                }

                over "_Game_Materials_Laborraum_M_Plastic_White_M_Plastic_White_007" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    rel material:binding = </_materials/_Game_Materials_Laborraum_M_Plastic_White_M_Plastic_White_007>
                }

                over "_Game_Materials_Laborraum_M_Drawer_Mat_M_Drawer_Mat_003" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    rel material:binding = </_materials/_Game_Materials_Laborraum_M_Drawer_Mat_M_Drawer_Mat_003>
                }
            }
        }

        def Xform "cabinet2_drawer5_collision_0" (
            prepend apiSchemas = ["PhysicsMassAPI"]
        )
        {
            point3f physics:centerOfMass = (0, 0, 0)
            float physics:density = 100
            float3 physics:diagonalInertia = (-2.256894, -1.3536373, 4.6985965)
            float physics:mass = 0.5777372
            quatf physics:principalAxes = (-0.5554302, -0.21707855, 0.78277975, -0.17784847)
            matrix4d xformOp:transform = ( (0.006898, 0, 0, 0), (0, 0.180981, 0, 0), (0, 0, 0.049, 0), (-0.242374, 0, -0.042, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Cube "Cube" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(1, 0, 0)]
                float[] primvars:displayOpacity = [0.5]
            }
        }

        def Xform "cabinet2_drawer5_collision_1" (
            prepend apiSchemas = ["PhysicsMassAPI"]
        )
        {
            point3f physics:centerOfMass = (0, 0, 0)
            float physics:density = 100
            float3 physics:diagonalInertia = (-2.256894, -1.3536373, 4.6985965)
            float physics:mass = 0.5777372
            quatf physics:principalAxes = (-0.5554302, -0.21707855, 0.78277975, -0.17784847)
            matrix4d xformOp:transform = ( (0.006898, 0, 0, 0), (0, 0.180981, 0, 0), (0, 0, 0.010149, 0), (-0.242374, 0, 0.060843, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Cube "Cube" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(1, 0, 0)]
                float[] primvars:displayOpacity = [0.5]
            }
        }

        def Xform "cabinet2_drawer5_collision_2" (
            prepend apiSchemas = ["PhysicsMassAPI"]
        )
        {
            point3f physics:centerOfMass = (0, 0, 0)
            float physics:density = 100
            float3 physics:diagonalInertia = (-2.256894, -1.3536373, 4.6985965)
            float physics:mass = 0.5777372
            quatf physics:principalAxes = (-0.5554302, -0.21707855, 0.78277975, -0.17784847)
            matrix4d xformOp:transform = ( (0.008393, 0, 0, 0), (0, 0.032441, 0, 0), (0, 0, 0.09099, 0), (-0.242869, 0.148428, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Cube "Cube" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(1, 0, 0)]
                float[] primvars:displayOpacity = [0.5]
            }
        }

        def Xform "cabinet2_drawer5_collision_3" (
            prepend apiSchemas = ["PhysicsMassAPI"]
        )
        {
            point3f physics:centerOfMass = (0, 0, 0)
            float physics:density = 100
            float3 physics:diagonalInertia = (-2.256894, -1.3536373, 4.6985965)
            float physics:mass = 0.5777372
            quatf physics:principalAxes = (-0.5554302, -0.21707855, 0.78277975, -0.17784847)
            matrix4d xformOp:transform = ( (0.008393, 0, 0, 0), (0, 0.032441, 0, 0), (0, 0, 0.09099, 0), (-0.242869, -0.148428, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Cube "Cube" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(1, 0, 0)]
                float[] primvars:displayOpacity = [0.5]
            }
        }

        def Xform "cabinet2_drawer5_collision_4" (
            prepend apiSchemas = ["PhysicsMassAPI"]
        )
        {
            point3f physics:centerOfMass = (0, 0, 0)
            float physics:density = 100
            float3 physics:diagonalInertia = (-2.256894, -1.3536373, 4.6985965)
            float physics:mass = 0.5777372
            quatf physics:principalAxes = (-0.5554302, -0.21707855, 0.78277975, -0.17784847)
            matrix4d xformOp:transform = ( (0.008064, 0, 0, 0), (0, 0.180981, 0, 0), (0, 0, 0.090879, 0), (0.235441, 0, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Cube "Cube" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(1, 0, 0)]
                float[] primvars:displayOpacity = [0.5]
            }
        }

        def Xform "cabinet2_drawer5_collision_5" (
            prepend apiSchemas = ["PhysicsMassAPI"]
        )
        {
            point3f physics:centerOfMass = (0, 0, 0)
            float physics:density = 100
            float3 physics:diagonalInertia = (-2.256894, -1.3536373, 4.6985965)
            float physics:mass = 0.5777372
            quatf physics:principalAxes = (-0.5554302, -0.21707855, 0.78277975, -0.17784847)
            matrix4d xformOp:transform = ( (0.247489, 0, 0, 0), (0, 0.008, 0, 0), (0, 0, 0.011649, 0), (-0.003984, 0.170578, 0.075342, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Cube "Cube" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(1, 0, 0)]
                float[] primvars:displayOpacity = [0.5]
            }
        }

        def Xform "cabinet2_drawer5_collision_6" (
            prepend apiSchemas = ["PhysicsMassAPI"]
        )
        {
            point3f physics:centerOfMass = (0, 0, 0)
            float physics:density = 100
            float3 physics:diagonalInertia = (-2.256894, -1.3536373, 4.6985965)
            float physics:mass = 0.5777372
            quatf physics:principalAxes = (-0.5554302, -0.21707855, 0.78277975, -0.17784847)
            matrix4d xformOp:transform = ( (0.247489, 0, 0, 0), (0, 0.008, 0, 0), (0, 0, 0.011649, 0), (-0.003984, -0.170578, 0.075342, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Cube "Cube" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(1, 0, 0)]
                float[] primvars:displayOpacity = [0.5]
            }
        }

        def Xform "cabinet2_drawer5_collision_7" (
            prepend apiSchemas = ["PhysicsMassAPI"]
        )
        {
            point3f physics:centerOfMass = (0, 0, 0)
            float physics:density = 100
            float3 physics:diagonalInertia = (-2.256894, -1.3536373, 4.6985965)
            float physics:mass = 0.5777372
            quatf physics:principalAxes = (-0.5554302, -0.21707855, 0.78277975, -0.17784847)
            matrix4d xformOp:transform = ( (0.247489, 0, 0, 0), (0, 0.008, 0, 0), (0, 0, 0.043553, 0), (-0.003984, 0.170578, -0.043743, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Cube "Cube" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(1, 0, 0)]
                float[] primvars:displayOpacity = [0.5]
            }
        }

        def Xform "cabinet2_drawer5_collision_8" (
            prepend apiSchemas = ["PhysicsMassAPI"]
        )
        {
            point3f physics:centerOfMass = (0, 0, 0)
            float physics:density = 100
            float3 physics:diagonalInertia = (-2.256894, -1.3536373, 4.6985965)
            float physics:mass = 0.5777372
            quatf physics:principalAxes = (-0.5554302, -0.21707855, 0.78277975, -0.17784847)
            matrix4d xformOp:transform = ( (0.247489, 0, 0, 0), (0, 0.008, 0, 0), (0, 0, 0.043553, 0), (-0.003984, -0.170578, -0.043743, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Cube "Cube" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(1, 0, 0)]
                float[] primvars:displayOpacity = [0.5]
            }
        }

        def Xform "cabinet2_drawer5_collision_9" (
            prepend apiSchemas = ["PhysicsMassAPI"]
        )
        {
            point3f physics:centerOfMass = (0, 0, 0)
            float physics:density = 100
            float3 physics:diagonalInertia = (-2.256894, -1.3536373, 4.6985965)
            float physics:mass = 0.5777372
            quatf physics:principalAxes = (-0.5554302, -0.21707855, 0.78277975, -0.17784847)
            matrix4d xformOp:transform = ( (0.247489, 0, 0, 0), (0, 0.180981, 0, 0), (0, 0, 0.010749, 0), (-0.003984, 0, -0.080242, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Cube "Cube" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(1, 0, 0)]
                float[] primvars:displayOpacity = [0.5]
            }
        }
    }

    def Xform "cabinet2_drawer6" (
        prepend apiSchemas = ["PhysicsRigidBodyAPI"]
    )
    {
        bool physics:rigidBodyEnabled = 1
        matrix4d xformOp:transform = ( (-1, 1.2246467991473532e-16, 0, 0), (-1.2246467991473532e-16, -1, 0, 0), (0, 0, 1, 0), (0.28455711, 1.97570891, 0.20719710999999996, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]

        def Xform "cabinet2_drawer6_visual_0" (
            prepend references = @./../meshes/usd/visual/SM_Kitchen_02_Drawer_02.usda@</SM_Kitchen_02_Drawer_02>
        )
        {
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            over "SM_Kitchen_02_Drawer_02" (
                prepend apiSchemas = ["MaterialBindingAPI"]
            )
            {
                rel material:binding = </_materials/_Game_Materials_Laborraum_M_Drawer_Mat_M_Drawer_Mat_003>

                over "_Game_Materials_Laborraum_M_Metal_Chrome_M_Metal_Chrome_010" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    rel material:binding = </_materials/_Game_Materials_Laborraum_M_Metal_Chrome_M_Metal_Chrome_010>
                }

                over "_Game_Materials_Laborraum_M_Plastic_White_M_Plastic_White_007" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    rel material:binding = </_materials/_Game_Materials_Laborraum_M_Plastic_White_M_Plastic_White_007>
                }

                over "_Game_Materials_Laborraum_M_Drawer_Mat_M_Drawer_Mat_003" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    rel material:binding = </_materials/_Game_Materials_Laborraum_M_Drawer_Mat_M_Drawer_Mat_003>
                }
            }
        }

        def Xform "cabinet2_drawer6_collision_0" (
            prepend apiSchemas = ["PhysicsMassAPI"]
        )
        {
            point3f physics:centerOfMass = (0, 0, 0)
            float physics:density = 100
            float3 physics:diagonalInertia = (-2.256894, -1.3536373, 4.6985965)
            float physics:mass = 0.5777372
            quatf physics:principalAxes = (-0.5554302, -0.21707855, 0.78277975, -0.17784847)
            matrix4d xformOp:transform = ( (0.006898, 0, 0, 0), (0, 0.180981, 0, 0), (0, 0, 0.049, 0), (-0.242374, 0, -0.042, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Cube "Cube" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(1, 0, 0)]
                float[] primvars:displayOpacity = [0.5]
            }
        }

        def Xform "cabinet2_drawer6_collision_1" (
            prepend apiSchemas = ["PhysicsMassAPI"]
        )
        {
            point3f physics:centerOfMass = (0, 0, 0)
            float physics:density = 100
            float3 physics:diagonalInertia = (-2.256894, -1.3536373, 4.6985965)
            float physics:mass = 0.5777372
            quatf physics:principalAxes = (-0.5554302, -0.21707855, 0.78277975, -0.17784847)
            matrix4d xformOp:transform = ( (0.006898, 0, 0, 0), (0, 0.180981, 0, 0), (0, 0, 0.010149, 0), (-0.242374, 0, 0.060843, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Cube "Cube" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(1, 0, 0)]
                float[] primvars:displayOpacity = [0.5]
            }
        }

        def Xform "cabinet2_drawer6_collision_2" (
            prepend apiSchemas = ["PhysicsMassAPI"]
        )
        {
            point3f physics:centerOfMass = (0, 0, 0)
            float physics:density = 100
            float3 physics:diagonalInertia = (-2.256894, -1.3536373, 4.6985965)
            float physics:mass = 0.5777372
            quatf physics:principalAxes = (-0.5554302, -0.21707855, 0.78277975, -0.17784847)
            matrix4d xformOp:transform = ( (0.008393, 0, 0, 0), (0, 0.032441, 0, 0), (0, 0, 0.09099, 0), (-0.242869, 0.148428, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Cube "Cube" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(1, 0, 0)]
                float[] primvars:displayOpacity = [0.5]
            }
        }

        def Xform "cabinet2_drawer6_collision_3" (
            prepend apiSchemas = ["PhysicsMassAPI"]
        )
        {
            point3f physics:centerOfMass = (0, 0, 0)
            float physics:density = 100
            float3 physics:diagonalInertia = (-2.256894, -1.3536373, 4.6985965)
            float physics:mass = 0.5777372
            quatf physics:principalAxes = (-0.5554302, -0.21707855, 0.78277975, -0.17784847)
            matrix4d xformOp:transform = ( (0.008393, 0, 0, 0), (0, 0.032441, 0, 0), (0, 0, 0.09099, 0), (-0.242869, -0.148428, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Cube "Cube" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(1, 0, 0)]
                float[] primvars:displayOpacity = [0.5]
            }
        }

        def Xform "cabinet2_drawer6_collision_4" (
            prepend apiSchemas = ["PhysicsMassAPI"]
        )
        {
            point3f physics:centerOfMass = (0, 0, 0)
            float physics:density = 100
            float3 physics:diagonalInertia = (-2.256894, -1.3536373, 4.6985965)
            float physics:mass = 0.5777372
            quatf physics:principalAxes = (-0.5554302, -0.21707855, 0.78277975, -0.17784847)
            matrix4d xformOp:transform = ( (0.008064, 0, 0, 0), (0, 0.180981, 0, 0), (0, 0, 0.090879, 0), (0.235441, 0, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Cube "Cube" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(1, 0, 0)]
                float[] primvars:displayOpacity = [0.5]
            }
        }

        def Xform "cabinet2_drawer6_collision_5" (
            prepend apiSchemas = ["PhysicsMassAPI"]
        )
        {
            point3f physics:centerOfMass = (0, 0, 0)
            float physics:density = 100
            float3 physics:diagonalInertia = (-2.256894, -1.3536373, 4.6985965)
            float physics:mass = 0.5777372
            quatf physics:principalAxes = (-0.5554302, -0.21707855, 0.78277975, -0.17784847)
            matrix4d xformOp:transform = ( (0.247489, 0, 0, 0), (0, 0.008, 0, 0), (0, 0, 0.011649, 0), (-0.003984, 0.170578, 0.075342, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Cube "Cube" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(1, 0, 0)]
                float[] primvars:displayOpacity = [0.5]
            }
        }

        def Xform "cabinet2_drawer6_collision_6" (
            prepend apiSchemas = ["PhysicsMassAPI"]
        )
        {
            point3f physics:centerOfMass = (0, 0, 0)
            float physics:density = 100
            float3 physics:diagonalInertia = (-2.256894, -1.3536373, 4.6985965)
            float physics:mass = 0.5777372
            quatf physics:principalAxes = (-0.5554302, -0.21707855, 0.78277975, -0.17784847)
            matrix4d xformOp:transform = ( (0.247489, 0, 0, 0), (0, 0.008, 0, 0), (0, 0, 0.011649, 0), (-0.003984, -0.170578, 0.075342, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Cube "Cube" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(1, 0, 0)]
                float[] primvars:displayOpacity = [0.5]
            }
        }

        def Xform "cabinet2_drawer6_collision_7" (
            prepend apiSchemas = ["PhysicsMassAPI"]
        )
        {
            point3f physics:centerOfMass = (0, 0, 0)
            float physics:density = 100
            float3 physics:diagonalInertia = (-2.256894, -1.3536373, 4.6985965)
            float physics:mass = 0.5777372
            quatf physics:principalAxes = (-0.5554302, -0.21707855, 0.78277975, -0.17784847)
            matrix4d xformOp:transform = ( (0.247489, 0, 0, 0), (0, 0.008, 0, 0), (0, 0, 0.043553, 0), (-0.003984, 0.170578, -0.043743, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Cube "Cube" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(1, 0, 0)]
                float[] primvars:displayOpacity = [0.5]
            }
        }

        def Xform "cabinet2_drawer6_collision_8" (
            prepend apiSchemas = ["PhysicsMassAPI"]
        )
        {
            point3f physics:centerOfMass = (0, 0, 0)
            float physics:density = 100
            float3 physics:diagonalInertia = (-2.256894, -1.3536373, 4.6985965)
            float physics:mass = 0.5777372
            quatf physics:principalAxes = (-0.5554302, -0.21707855, 0.78277975, -0.17784847)
            matrix4d xformOp:transform = ( (0.247489, 0, 0, 0), (0, 0.008, 0, 0), (0, 0, 0.043553, 0), (-0.003984, -0.170578, -0.043743, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Cube "Cube" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(1, 0, 0)]
                float[] primvars:displayOpacity = [0.5]
            }
        }

        def Xform "cabinet2_drawer6_collision_9" (
            prepend apiSchemas = ["PhysicsMassAPI"]
        )
        {
            point3f physics:centerOfMass = (0, 0, 0)
            float physics:density = 100
            float3 physics:diagonalInertia = (-2.256894, -1.3536373, 4.6985965)
            float physics:mass = 0.5777372
            quatf physics:principalAxes = (-0.5554302, -0.21707855, 0.78277975, -0.17784847)
            matrix4d xformOp:transform = ( (0.247489, 0, 0, 0), (0, 0.180981, 0, 0), (0, 0, 0.010749, 0), (-0.003984, 0, -0.080242, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Cube "Cube" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(1, 0, 0)]
                float[] primvars:displayOpacity = [0.5]
            }
        }
    }

    def Xform "fridge_door1" (
        prepend apiSchemas = ["PhysicsRigidBodyAPI"]
    )
    {
        bool physics:rigidBodyEnabled = 1
        matrix4d xformOp:transform = ( (-1, 1.2246467991473532e-16, 0, 0), (-1.2246467991473532e-16, -1, 0, 0), (0, 0, 1, 0), (0.5722444, 2.18075296, 1.41961884, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]

        def Xform "fridge_door1_visual_0" (
            prepend references = @./../meshes/usd/visual/SM_Fridge_Door_01.usda@</SM_Fridge_Door_01>
        )
        {
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            over "SM_Fridge_Door_01" (
                prepend apiSchemas = ["MaterialBindingAPI"]
            )
            {
                rel material:binding = </_materials/_Game_Materials_Laborraum_M_Kitchen_Fronts_M_Kitchen_Fronts_008>

                over "_Game_Materials_Laborraum_M_Rubber_Plastic_M_Rubber_Plastic_005" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    rel material:binding = </_materials/_Game_Materials_Laborraum_M_Rubber_Plastic_M_Rubber_Plastic_005>
                }

                over "_Game_Materials_Laborraum_M_Plastic_White_M_Plastic_White_009" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    rel material:binding = </_materials/_Game_Materials_Laborraum_M_Plastic_White_M_Plastic_White_009>
                }

                over "_Game_Materials_Laborraum_M_Metal_Chrome_M_Metal_Chrome_011" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    rel material:binding = </_materials/_Game_Materials_Laborraum_M_Metal_Chrome_M_Metal_Chrome_011>
                }

                over "_Game_Materials_Laborraum_M_Metal_Brushed_M_Metal_Brushed_004" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    rel material:binding = </_materials/_Game_Materials_Laborraum_M_Metal_Brushed_M_Metal_Brushed_004>
                }

                over "_Game_Materials_Laborraum_M_Kitchen_Fronts_M_Kitchen_Fronts_008" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    rel material:binding = </_materials/_Game_Materials_Laborraum_M_Kitchen_Fronts_M_Kitchen_Fronts_008>
                }
            }
        }

        def Xform "fridge_door1_collision_0" (
            prepend apiSchemas = ["PhysicsMassAPI"]
        )
        {
            point3f physics:centerOfMass = (0, 0, 0)
            float physics:density = 100
            float3 physics:diagonalInertia = (-37.82068, -15.367005, 75.71652)
            float physics:mass = 2.7844727
            quatf physics:principalAxes = (0.0111727975, 0.99619466, -0.08092843, 0.030363806)
            matrix4d xformOp:transform = ( (0.009277, 0, 0, 0), (0, 0.298246, 0, 0), (0, 0, 0.668339, 0), (0.006948, -0.297325, 0.139709, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Cube "Cube" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(1, 0, 0)]
                float[] primvars:displayOpacity = [0.5]
            }
        }

        def Xform "fridge_door1_collision_1" (
            prepend apiSchemas = ["PhysicsMassAPI"]
        )
        {
            point3f physics:centerOfMass = (0, 0, 0)
            float physics:density = 100
            float3 physics:diagonalInertia = (-37.82068, -15.367005, 75.71652)
            float physics:mass = 2.7844727
            quatf physics:principalAxes = (0.0111727975, 0.99619466, -0.08092843, 0.030363806)
            matrix4d xformOp:transform = ( (0.0125, 0, 0, 0), (0, 0.276867, 0, 0), (0, 0, 0.494447, 0), (0.03605, -0.295455, -0.001115, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Cube "Cube" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(1, 0, 0)]
                float[] primvars:displayOpacity = [0.5]
            }
        }

        def Xform "fridge_door1_handle"
        {
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 2.220446049250313e-16, 1, 0), (0, -1, 2.220446049250313e-16, 0), (-0.02799103, -0.46534321, -0.3616, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Xform "fridge_door1_handle_visual_0" (
                prepend references = @./../meshes/usd/visual/SM_Kitchen_Handle.usda@</SM_Kitchen_Handle>
            )
            {
                matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]

                over "SM_Kitchen_Handle" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    rel material:binding = </_materials/_Game_Materials_Laborraum_M_Metal_Brushed_M_Metal_Brushed_003>
                }
            }

            def Xform "fridge_door1_handle_collision_0" (
                prepend apiSchemas = ["PhysicsMassAPI"]
            )
            {
                point3f physics:centerOfMass = (0, 0, 0)
                float physics:density = 100
                float3 physics:diagonalInertia = (-37.82068, -15.367005, 75.71652)
                float physics:mass = 2.7844727
                quatf physics:principalAxes = (0.0111727975, 0.99619466, -0.08092843, 0.030363806)
                matrix4d xformOp:transform = ( (0.01, 0, 0, 0), (0, 0.0065, 0, 0), (0, 0, 0.0065, 0), (0.0164985, 0, 0.08, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]

                def Cube "Cube" (
                    prepend apiSchemas = ["PhysicsCollisionAPI"]
                )
                {
                    float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                    bool physics:collisionEnabled = 1
                    color3f[] primvars:displayColor = [(1, 0, 0)]
                    float[] primvars:displayOpacity = [0.5]
                }
            }

            def Xform "fridge_door1_handle_collision_1" (
                prepend apiSchemas = ["PhysicsMassAPI"]
            )
            {
                point3f physics:centerOfMass = (0, 0, 0)
                float physics:density = 100
                float3 physics:diagonalInertia = (-37.82068, -15.367005, 75.71652)
                float physics:mass = 2.7844727
                quatf physics:principalAxes = (0.0111727975, 0.99619466, -0.08092843, 0.030363806)
                matrix4d xformOp:transform = ( (0.01, 0, 0, 0), (0, 0.0065, 0, 0), (0, 0, 0.0065, 0), (0.0164985, 0, -0.08, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]

                def Cube "Cube" (
                    prepend apiSchemas = ["PhysicsCollisionAPI"]
                )
                {
                    float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                    bool physics:collisionEnabled = 1
                    color3f[] primvars:displayColor = [(1, 0, 0)]
                    float[] primvars:displayOpacity = [0.5]
                }
            }

            def Xform "fridge_door1_handle_collision_2" (
                prepend apiSchemas = ["PhysicsMassAPI"]
            )
            {
                point3f physics:centerOfMass = (0, 0, 0)
                float physics:density = 100
                float3 physics:diagonalInertia = (-37.82068, -15.367005, 75.71652)
                float physics:mass = 2.7844727
                quatf physics:principalAxes = (0.0111727975, 0.99619466, -0.08092843, 0.030363806)
                matrix4d xformOp:transform = ( (0.0065, 0, 0, 0), (0, 0.0065, 0, 0), (0, 0, 0.086516, 0), (0, 0, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]

                def Cube "Cube" (
                    prepend apiSchemas = ["PhysicsCollisionAPI"]
                )
                {
                    float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                    bool physics:collisionEnabled = 1
                    color3f[] primvars:displayColor = [(1, 0, 0)]
                    float[] primvars:displayOpacity = [0.5]
                }
            }
        }

        def Xform "fridge_door_tray1"
        {
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0.10379066, -0.29726078, -0.01565247, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Xform "fridge_door_tray1_visual_0" (
                prepend references = @./../meshes/usd/visual/SM_Fridge_Door_Tray_01.usda@</SM_Fridge_Door_Tray_01>
            )
            {
                matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]

                over "SM_Fridge_Door_Tray_01" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    rel material:binding = </_materials/_Game_Materials_Laborraum_M_Plastic_Fridge_M_Plastic_Fridge_001>

                    over "_Game_Materials_Laborraum_M_Metal_Dark_M_Metal_Dark" (
                        prepend apiSchemas = ["MaterialBindingAPI"]
                    )
                    {
                        rel material:binding = </_materials/_Game_Materials_Laborraum_M_Metal_Dark_M_Metal_Dark>
                    }

                    over "_Game_Materials_Laborraum_M_Metal_Brushed_M_Metal_Brushed_005" (
                        prepend apiSchemas = ["MaterialBindingAPI"]
                    )
                    {
                        rel material:binding = </_materials/_Game_Materials_Laborraum_M_Metal_Brushed_M_Metal_Brushed_005>
                    }

                    over "_Game_Materials_Laborraum_M_Plastic_Fridge_M_Plastic_Fridge_001" (
                        prepend apiSchemas = ["MaterialBindingAPI"]
                    )
                    {
                        rel material:binding = </_materials/_Game_Materials_Laborraum_M_Plastic_Fridge_M_Plastic_Fridge_001>
                    }
                }
            }

            def Xform "fridge_door_tray1_collision_0" (
                prepend apiSchemas = ["PhysicsMassAPI"]
            )
            {
                point3f physics:centerOfMass = (0, 0, 0)
                float physics:density = 100
                float3 physics:diagonalInertia = (-0.43244922, -0.33156142, 0.7535612)
                float physics:mass = 0.016634978
                quatf physics:principalAxes = (-0.1751669, -0.20340607, 0.13218878, 0.95418483)
                matrix4d xformOp:transform = ( (0.001, 0, 0, 0), (0, 0.210927, 0, 0), (0, 0, 0.047787, 0), (0.054273, 0, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]

                def Cube "Cube" (
                    prepend apiSchemas = ["PhysicsCollisionAPI"]
                )
                {
                    float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                    bool physics:collisionEnabled = 1
                    color3f[] primvars:displayColor = [(1, 0, 0)]
                    float[] primvars:displayOpacity = [0.5]
                }
            }

            def Xform "fridge_door_tray1_collision_1" (
                prepend apiSchemas = ["PhysicsMassAPI"]
            )
            {
                point3f physics:centerOfMass = (0, 0, 0)
                float physics:density = 100
                float3 physics:diagonalInertia = (-0.43244922, -0.33156142, 0.7535612)
                float physics:mass = 0.016634978
                quatf physics:principalAxes = (-0.1751669, -0.20340607, 0.13218878, 0.95418483)
                matrix4d xformOp:transform = ( (0.001, 0, 0, 0), (0, 0.210927, 0, 0), (0, 0, 0.047787, 0), (-0.054273, 0, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]

                def Cube "Cube" (
                    prepend apiSchemas = ["PhysicsCollisionAPI"]
                )
                {
                    float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                    bool physics:collisionEnabled = 1
                    color3f[] primvars:displayColor = [(1, 0, 0)]
                    float[] primvars:displayOpacity = [0.5]
                }
            }

            def Xform "fridge_door_tray1_collision_2" (
                prepend apiSchemas = ["PhysicsMassAPI"]
            )
            {
                point3f physics:centerOfMass = (0, 0, 0)
                float physics:density = 100
                float3 physics:diagonalInertia = (-0.43244922, -0.33156142, 0.7535612)
                float physics:mass = 0.016634978
                quatf physics:principalAxes = (-0.1751669, -0.20340607, 0.13218878, 0.95418483)
                matrix4d xformOp:transform = ( (0.05471, 0, 0, 0), (0, 0.001, 0, 0), (0, 0, 0.047787, 0), (0, 0.209978, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]

                def Cube "Cube" (
                    prepend apiSchemas = ["PhysicsCollisionAPI"]
                )
                {
                    float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                    bool physics:collisionEnabled = 1
                    color3f[] primvars:displayColor = [(1, 0, 0)]
                    float[] primvars:displayOpacity = [0.5]
                }
            }

            def Xform "fridge_door_tray1_collision_3" (
                prepend apiSchemas = ["PhysicsMassAPI"]
            )
            {
                point3f physics:centerOfMass = (0, 0, 0)
                float physics:density = 100
                float3 physics:diagonalInertia = (-0.43244922, -0.33156142, 0.7535612)
                float physics:mass = 0.016634978
                quatf physics:principalAxes = (-0.1751669, -0.20340607, 0.13218878, 0.95418483)
                matrix4d xformOp:transform = ( (0.05471, 0, 0, 0), (0, 0.001, 0, 0), (0, 0, 0.047787, 0), (0, -0.209978, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]

                def Cube "Cube" (
                    prepend apiSchemas = ["PhysicsCollisionAPI"]
                )
                {
                    float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                    bool physics:collisionEnabled = 1
                    color3f[] primvars:displayColor = [(1, 0, 0)]
                    float[] primvars:displayOpacity = [0.5]
                }
            }

            def Xform "fridge_door_tray1_collision_4" (
                prepend apiSchemas = ["PhysicsMassAPI"]
            )
            {
                point3f physics:centerOfMass = (0, 0, 0)
                float physics:density = 100
                float3 physics:diagonalInertia = (-0.43244922, -0.33156142, 0.7535612)
                float physics:mass = 0.016634978
                quatf physics:principalAxes = (-0.1751669, -0.20340607, 0.13218878, 0.95418483)
                matrix4d xformOp:transform = ( (0.05471, 0, 0, 0), (0, 0.210927, 0, 0), (0, 0, 0.001, 0), (0, 0, -0.047166, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]

                def Cube "Cube" (
                    prepend apiSchemas = ["PhysicsCollisionAPI"]
                )
                {
                    float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                    bool physics:collisionEnabled = 1
                    color3f[] primvars:displayColor = [(1, 0, 0)]
                    float[] primvars:displayOpacity = [0.5]
                }
            }
        }

        def Xform "fridge_door_tray2"
        {
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0.10176933, -0.29847088, 0.22387222, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Xform "fridge_door_tray2_visual_0" (
                prepend references = @./../meshes/usd/visual/SM_Fridge_Door_Tray_02.usda@</SM_Fridge_Door_Tray_02>
            )
            {
                matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]

                over "SM_Fridge_Door_Tray_02" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    rel material:binding = </_materials/_Game_Materials_Laborraum_M_Plastic_Fridge_M_Plastic_Fridge_002>

                    over "_Game_Materials_Laborraum_M_Metal_Brushed_M_Metal_Brushed_007" (
                        prepend apiSchemas = ["MaterialBindingAPI"]
                    )
                    {
                        rel material:binding = </_materials/_Game_Materials_Laborraum_M_Metal_Brushed_M_Metal_Brushed_007>
                    }

                    over "_Game_Materials_Laborraum_M_Plastic_Fridge_M_Plastic_Fridge_002" (
                        prepend apiSchemas = ["MaterialBindingAPI"]
                    )
                    {
                        rel material:binding = </_materials/_Game_Materials_Laborraum_M_Plastic_Fridge_M_Plastic_Fridge_002>
                    }
                }
            }

            def Xform "fridge_door_tray2_collision_0" (
                prepend apiSchemas = ["PhysicsMassAPI"]
            )
            {
                point3f physics:centerOfMass = (0, 0, 0)
                float physics:density = 100
                float3 physics:diagonalInertia = (-0.30474418, -0.22613789, 0.4876026)
                float physics:mass = 0.013283517
                quatf physics:principalAxes = (0.16298608, 0.9355804, 0.20845202, 0.23382181)
                matrix4d xformOp:transform = ( (0.001, 0, 0, 0), (0, 0.210977, 0, 0), (0, 0, 0.026901, 0), (0.054019, 0, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]

                def Cube "Cube" (
                    prepend apiSchemas = ["PhysicsCollisionAPI"]
                )
                {
                    float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                    bool physics:collisionEnabled = 1
                    color3f[] primvars:displayColor = [(1, 0, 0)]
                    float[] primvars:displayOpacity = [0.5]
                }
            }

            def Xform "fridge_door_tray2_collision_1" (
                prepend apiSchemas = ["PhysicsMassAPI"]
            )
            {
                point3f physics:centerOfMass = (0, 0, 0)
                float physics:density = 100
                float3 physics:diagonalInertia = (-0.30474418, -0.22613789, 0.4876026)
                float physics:mass = 0.013283517
                quatf physics:principalAxes = (0.16298608, 0.9355804, 0.20845202, 0.23382181)
                matrix4d xformOp:transform = ( (0.001, 0, 0, 0), (0, 0.210977, 0, 0), (0, 0, 0.026901, 0), (-0.054019, 0, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]

                def Cube "Cube" (
                    prepend apiSchemas = ["PhysicsCollisionAPI"]
                )
                {
                    float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                    bool physics:collisionEnabled = 1
                    color3f[] primvars:displayColor = [(1, 0, 0)]
                    float[] primvars:displayOpacity = [0.5]
                }
            }

            def Xform "fridge_door_tray2_collision_2" (
                prepend apiSchemas = ["PhysicsMassAPI"]
            )
            {
                point3f physics:centerOfMass = (0, 0, 0)
                float physics:density = 100
                float3 physics:diagonalInertia = (-0.30474418, -0.22613789, 0.4876026)
                float physics:mass = 0.013283517
                quatf physics:principalAxes = (0.16298608, 0.9355804, 0.20845202, 0.23382181)
                matrix4d xformOp:transform = ( (0.054994, 0, 0, 0), (0, 0.001, 0, 0), (0, 0, 0.026901, 0), (0, 0.209978, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]

                def Cube "Cube" (
                    prepend apiSchemas = ["PhysicsCollisionAPI"]
                )
                {
                    float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                    bool physics:collisionEnabled = 1
                    color3f[] primvars:displayColor = [(1, 0, 0)]
                    float[] primvars:displayOpacity = [0.5]
                }
            }

            def Xform "fridge_door_tray2_collision_3" (
                prepend apiSchemas = ["PhysicsMassAPI"]
            )
            {
                point3f physics:centerOfMass = (0, 0, 0)
                float physics:density = 100
                float3 physics:diagonalInertia = (-0.30474418, -0.22613789, 0.4876026)
                float physics:mass = 0.013283517
                quatf physics:principalAxes = (0.16298608, 0.9355804, 0.20845202, 0.23382181)
                matrix4d xformOp:transform = ( (0.054994, 0, 0, 0), (0, 0.001, 0, 0), (0, 0, 0.026901, 0), (0, -0.209978, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]

                def Cube "Cube" (
                    prepend apiSchemas = ["PhysicsCollisionAPI"]
                )
                {
                    float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                    bool physics:collisionEnabled = 1
                    color3f[] primvars:displayColor = [(1, 0, 0)]
                    float[] primvars:displayOpacity = [0.5]
                }
            }

            def Xform "fridge_door_tray2_collision_4" (
                prepend apiSchemas = ["PhysicsMassAPI"]
            )
            {
                point3f physics:centerOfMass = (0, 0, 0)
                float physics:density = 100
                float3 physics:diagonalInertia = (-0.30474418, -0.22613789, 0.4876026)
                float physics:mass = 0.013283517
                quatf physics:principalAxes = (0.16298608, 0.9355804, 0.20845202, 0.23382181)
                matrix4d xformOp:transform = ( (0.054994, 0, 0, 0), (0, 0.210977, 0, 0), (0, 0, 0.001, 0), (0, 0, -0.025903, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]

                def Cube "Cube" (
                    prepend apiSchemas = ["PhysicsCollisionAPI"]
                )
                {
                    float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                    bool physics:collisionEnabled = 1
                    color3f[] primvars:displayColor = [(1, 0, 0)]
                    float[] primvars:displayOpacity = [0.5]
                }
            }

            def Xform "fridge_egg_tray"
            {
                matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (-0.00226576, 0.0853089, 0.00069855, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]

                def Xform "fridge_egg_tray_visual_0" (
                    prepend references = @./../meshes/usd/visual/SM_Fridge_Egg_Tray.usda@</SM_Fridge_Egg_Tray>
                )
                {
                    matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]

                    over "SM_Fridge_Egg_Tray" (
                        prepend apiSchemas = ["MaterialBindingAPI"]
                    )
                    {
                        rel material:binding = </_materials/_Game_Materials_Laborraum_M_Rubber_Plastic_M_Rubber_Plastic_007>
                    }
                }
            }
        }
    }

    def Xform "fridge_door2" (
        prepend apiSchemas = ["PhysicsRigidBodyAPI"]
    )
    {
        bool physics:rigidBodyEnabled = 1
        matrix4d xformOp:transform = ( (-1, 1.2246467991473532e-16, 0, 0), (-1.2246467991473532e-16, -1, 0, 0), (0, 0, 1, 0), (0.5722444, 2.18080852, 0.52487099, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]

        def Xform "fridge_door2_visual_0" (
            prepend references = @./../meshes/usd/visual/SM_Fridge_Door_02.usda@</SM_Fridge_Door_02>
        )
        {
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            over "SM_Fridge_Door_02" (
                prepend apiSchemas = ["MaterialBindingAPI"]
            )
            {
                rel material:binding = </_materials/_Game_Materials_Laborraum_M_Kitchen_Fronts_M_Kitchen_Fronts_009>

                over "_Game_Materials_Laborraum_M_Rubber_Plastic_M_Rubber_Plastic_008" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    rel material:binding = </_materials/_Game_Materials_Laborraum_M_Rubber_Plastic_M_Rubber_Plastic_008>
                }

                over "_Game_Materials_Laborraum_M_Plastic_White_M_Plastic_White_011" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    rel material:binding = </_materials/_Game_Materials_Laborraum_M_Plastic_White_M_Plastic_White_011>
                }

                over "_Game_Materials_Laborraum_M_Metal_Chrome_M_Metal_Chrome_012" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    rel material:binding = </_materials/_Game_Materials_Laborraum_M_Metal_Chrome_M_Metal_Chrome_012>
                }

                over "_Game_Materials_Laborraum_M_Kitchen_Fronts_M_Kitchen_Fronts_009" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    rel material:binding = </_materials/_Game_Materials_Laborraum_M_Kitchen_Fronts_M_Kitchen_Fronts_009>
                }
            }
        }

        def Xform "fridge_door2_collision_0" (
            prepend apiSchemas = ["PhysicsMassAPI"]
        )
        {
            point3f physics:centerOfMass = (0, 0, 0)
            float physics:density = 100
            float3 physics:diagonalInertia = (-15.162766, -7.570549, 33.79961)
            float physics:mass = 2.3547938
            quatf physics:principalAxes = (0.99211925, 0.021089012, 0.106029965, -0.06334243)
            matrix4d xformOp:transform = ( (0.009277, 0, 0, 0), (0, 0.298246, 0, 0), (0, 0, 0.39297, 0), (0.006948, -0.297325, -0.028308, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Cube "Cube" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(1, 0, 0)]
                float[] primvars:displayOpacity = [0.5]
            }
        }

        def Xform "fridge_door2_collision_1" (
            prepend apiSchemas = ["PhysicsMassAPI"]
        )
        {
            point3f physics:centerOfMass = (0, 0, 0)
            float physics:density = 100
            float3 physics:diagonalInertia = (-15.162766, -7.570549, 33.79961)
            float physics:mass = 2.3547938
            quatf physics:principalAxes = (0.99211925, 0.021089012, 0.106029965, -0.06334243)
            matrix4d xformOp:transform = ( (0.0125, 0, 0, 0), (0, 0.276867, 0, 0), (0, 0, 0.311166, 0), (0.03605, -0.295455, 0.019366, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Cube "Cube" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(1, 0, 0)]
                float[] primvars:displayOpacity = [0.5]
            }
        }

        def Xform "fridge_door2_handle"
        {
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 2.220446049250313e-16, 1, 0), (0, -1, 2.220446049250313e-16, 0), (0.02804657, -0.46538265, 0.31786839, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Xform "fridge_door2_handle_visual_0" (
                prepend references = @./../meshes/usd/visual/SM_Kitchen_Handle.usda@</SM_Kitchen_Handle>
            )
            {
                matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]

                over "SM_Kitchen_Handle" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    rel material:binding = </_materials/_Game_Materials_Laborraum_M_Metal_Brushed_M_Metal_Brushed_003>
                }
            }

            def Xform "fridge_door2_handle_collision_0" (
                prepend apiSchemas = ["PhysicsMassAPI"]
            )
            {
                point3f physics:centerOfMass = (0, 0, 0)
                float physics:density = 100
                float3 physics:diagonalInertia = (-15.162766, -7.570549, 33.79961)
                float physics:mass = 2.3547938
                quatf physics:principalAxes = (0.99211925, 0.021089012, 0.106029965, -0.06334243)
                matrix4d xformOp:transform = ( (0.01, 0, 0, 0), (0, 0.0065, 0, 0), (0, 0, 0.0065, 0), (0.0164985, 0, 0.08, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]

                def Cube "Cube" (
                    prepend apiSchemas = ["PhysicsCollisionAPI"]
                )
                {
                    float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                    bool physics:collisionEnabled = 1
                    color3f[] primvars:displayColor = [(1, 0, 0)]
                    float[] primvars:displayOpacity = [0.5]
                }
            }

            def Xform "fridge_door2_handle_collision_1" (
                prepend apiSchemas = ["PhysicsMassAPI"]
            )
            {
                point3f physics:centerOfMass = (0, 0, 0)
                float physics:density = 100
                float3 physics:diagonalInertia = (-15.162766, -7.570549, 33.79961)
                float physics:mass = 2.3547938
                quatf physics:principalAxes = (0.99211925, 0.021089012, 0.106029965, -0.06334243)
                matrix4d xformOp:transform = ( (0.01, 0, 0, 0), (0, 0.0065, 0, 0), (0, 0, 0.0065, 0), (0.0164985, 0, -0.08, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]

                def Cube "Cube" (
                    prepend apiSchemas = ["PhysicsCollisionAPI"]
                )
                {
                    float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                    bool physics:collisionEnabled = 1
                    color3f[] primvars:displayColor = [(1, 0, 0)]
                    float[] primvars:displayOpacity = [0.5]
                }
            }

            def Xform "fridge_door2_handle_collision_2" (
                prepend apiSchemas = ["PhysicsMassAPI"]
            )
            {
                point3f physics:centerOfMass = (0, 0, 0)
                float physics:density = 100
                float3 physics:diagonalInertia = (-15.162766, -7.570549, 33.79961)
                float physics:mass = 2.3547938
                quatf physics:principalAxes = (0.99211925, 0.021089012, 0.106029965, -0.06334243)
                matrix4d xformOp:transform = ( (0.0065, 0, 0, 0), (0, 0.0065, 0, 0), (0, 0, 0.086516, 0), (0, 0, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]

                def Cube "Cube" (
                    prepend apiSchemas = ["PhysicsCollisionAPI"]
                )
                {
                    float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                    bool physics:collisionEnabled = 1
                    color3f[] primvars:displayColor = [(1, 0, 0)]
                    float[] primvars:displayOpacity = [0.5]
                }
            }
        }
    }

    def Xform "fridge_drawer1" (
        prepend apiSchemas = ["PhysicsRigidBodyAPI"]
    )
    {
        bool physics:rigidBodyEnabled = 1
        matrix4d xformOp:transform = ( (-1, 1.2246467991473532e-16, 0, 0), (-1.2246467991473532e-16, -1, 0, 0), (0, 0, 1, 0), (0.30625637, 2.48058723, 1.19144227, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]

        def Xform "fridge_drawer1_visual_0" (
            prepend references = @./../meshes/usd/visual/SM_Fridge_Drawer_01.usda@</SM_Fridge_Drawer_01>
        )
        {
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            over "SM_Fridge_Drawer_01_001" (
                prepend apiSchemas = ["MaterialBindingAPI"]
            )
            {
                rel material:binding = </_materials/_Game_Materials_Laborraum_M_Metal_Fridge_M_Metal_Fridge_003>

                over "_Game_Materials_Laborraum_M_Plastic_White_M_Plastic_White_014" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    rel material:binding = </_materials/_Game_Materials_Laborraum_M_Plastic_White_M_Plastic_White_014>
                }

                over "_Game_Materials_Laborraum_M_Plastic_Fridge_M_Plastic_Fridge_004" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    rel material:binding = </_materials/_Game_Materials_Laborraum_M_Plastic_Fridge_M_Plastic_Fridge_004>
                }

                over "_Game_Materials_Laborraum_M_Metal_Fridge_M_Metal_Fridge_003" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    rel material:binding = </_materials/_Game_Materials_Laborraum_M_Metal_Fridge_M_Metal_Fridge_003>
                }
            }
        }

        def Xform "fridge_drawer1_collision_0" (
            prepend apiSchemas = ["PhysicsMassAPI"]
        )
        {
            point3f physics:centerOfMass = (0, 0, 0)
            float physics:density = 100
            float3 physics:diagonalInertia = (-1.6437882, -0.90123814, 3.4299552)
            float physics:mass = 0.13590308
            quatf physics:principalAxes = (0.36402765, 0.87078905, 0.26684782, 0.19494247)
            matrix4d xformOp:transform = ( (0.0025, 0, 0, 0), (0, 0.227117, 0, 0), (0, 0, 0.011921, 0), (-0.169309, 0, 0.070506, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Cube "Cube" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(1, 0, 0)]
                float[] primvars:displayOpacity = [0.5]
            }
        }

        def Xform "fridge_drawer1_collision_1" (
            prepend apiSchemas = ["PhysicsMassAPI"]
        )
        {
            point3f physics:centerOfMass = (0, 0, 0)
            float physics:density = 100
            float3 physics:diagonalInertia = (-1.6437882, -0.90123814, 3.4299552)
            float physics:mass = 0.13590308
            quatf physics:principalAxes = (0.36402765, 0.87078905, 0.26684782, 0.19494247)
            matrix4d xformOp:transform = ( (0.001448, 0, 0, 0), (0, 0.227117, 0, 0), (0, 0, 0.047864, 0), (-0.169309, 0, -0.034598, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Cube "Cube" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(1, 0, 0)]
                float[] primvars:displayOpacity = [0.5]
            }
        }

        def Xform "fridge_drawer1_collision_2" (
            prepend apiSchemas = ["PhysicsMassAPI"]
        )
        {
            point3f physics:centerOfMass = (0, 0, 0)
            float physics:density = 100
            float3 physics:diagonalInertia = (-1.6437882, -0.90123814, 3.4299552)
            float physics:mass = 0.13590308
            quatf physics:principalAxes = (0.36402765, 0.87078905, 0.26684782, 0.19494247)
            matrix4d xformOp:transform = ( (0.002123, 0, 0, 0), (0, 0.227117, 0, 0), (0, 0, 0.082076, 0), (0.16468, 0, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Cube "Cube" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(1, 0, 0)]
                float[] primvars:displayOpacity = [0.5]
            }
        }

        def Xform "fridge_drawer1_collision_3" (
            prepend apiSchemas = ["PhysicsMassAPI"]
        )
        {
            point3f physics:centerOfMass = (0, 0, 0)
            float physics:density = 100
            float3 physics:diagonalInertia = (-1.6437882, -0.90123814, 3.4299552)
            float physics:mass = 0.13590308
            quatf physics:principalAxes = (0.36402765, 0.87078905, 0.26684782, 0.19494247)
            matrix4d xformOp:transform = ( (0.171761, 0, 0, 0), (0, 0.00983, 0, 0), (0, 0, 0.082076, 0), (0, 0.217307, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Cube "Cube" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(1, 0, 0)]
                float[] primvars:displayOpacity = [0.5]
            }
        }

        def Xform "fridge_drawer1_collision_4" (
            prepend apiSchemas = ["PhysicsMassAPI"]
        )
        {
            point3f physics:centerOfMass = (0, 0, 0)
            float physics:density = 100
            float3 physics:diagonalInertia = (-1.6437882, -0.90123814, 3.4299552)
            float physics:mass = 0.13590308
            quatf physics:principalAxes = (0.36402765, 0.87078905, 0.26684782, 0.19494247)
            matrix4d xformOp:transform = ( (0.171761, 0, 0, 0), (0, 0.00983, 0, 0), (0, 0, 0.082076, 0), (0, -0.217307, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Cube "Cube" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(1, 0, 0)]
                float[] primvars:displayOpacity = [0.5]
            }
        }

        def Xform "fridge_drawer1_collision_5" (
            prepend apiSchemas = ["PhysicsMassAPI"]
        )
        {
            point3f physics:centerOfMass = (0, 0, 0)
            float physics:density = 100
            float3 physics:diagonalInertia = (-1.6437882, -0.90123814, 3.4299552)
            float physics:mass = 0.13590308
            quatf physics:principalAxes = (0.36402765, 0.87078905, 0.26684782, 0.19494247)
            matrix4d xformOp:transform = ( (0.171761, 0, 0, 0), (0, 0.227117, 0, 0), (0, 0, 0.001372, 0), (0, 0, -0.080999, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Cube "Cube" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(1, 0, 0)]
                float[] primvars:displayOpacity = [0.5]
            }
        }
    }

    def Xform "fridge_drawer2" (
        prepend apiSchemas = ["PhysicsRigidBodyAPI"]
    )
    {
        bool physics:rigidBodyEnabled = 1
        matrix4d xformOp:transform = ( (-1, 1.2246467991473532e-16, 0, 0), (-1.2246467991473532e-16, -1, 0, 0), (0, 0, 1, 0), (0.30964971999999996, 2.48481129, 1.03157258, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]

        def Xform "fridge_drawer2_visual_0" (
            prepend references = @./../meshes/usd/visual/SM_Fridge_Drawer_02.usda@</SM_Fridge_Drawer_02>
        )
        {
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            over "SM_Fridge_Drawer_02" (
                prepend apiSchemas = ["MaterialBindingAPI"]
            )
            {
                rel material:binding = </_materials/_Game_Materials_Laborraum_M_Metal_Fridge_M_Metal_Fridge_004>

                over "_Game_Materials_Laborraum_M_Plastic_White_M_Plastic_White_015" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    rel material:binding = </_materials/_Game_Materials_Laborraum_M_Plastic_White_M_Plastic_White_015>
                }

                over "_Game_Materials_Laborraum_M_Plastic_Fridge_M_Plastic_Fridge_005" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    rel material:binding = </_materials/_Game_Materials_Laborraum_M_Plastic_Fridge_M_Plastic_Fridge_005>
                }

                over "_Game_Materials_Laborraum_M_Metal_Fridge_M_Metal_Fridge_004" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    rel material:binding = </_materials/_Game_Materials_Laborraum_M_Metal_Fridge_M_Metal_Fridge_004>
                }
            }
        }

        def Xform "fridge_drawer2_collision_0" (
            prepend apiSchemas = ["PhysicsMassAPI"]
        )
        {
            point3f physics:centerOfMass = (0, 0, 0)
            float physics:density = 100
            float3 physics:diagonalInertia = (-1.526978, -0.79620284, 3.0478044)
            float physics:mass = 0.12471427
            quatf physics:principalAxes = (0.36256433, 0.8689241, 0.27237603, 0.1983162)
            matrix4d xformOp:transform = ( (0.0025, 0, 0, 0), (0, 0.227117, 0, 0), (0, 0, 0.011801, 0), (-0.169309, 0, 0.057007, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Cube "Cube" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(1, 0, 0)]
                float[] primvars:displayOpacity = [0.5]
            }
        }

        def Xform "fridge_drawer2_collision_1" (
            prepend apiSchemas = ["PhysicsMassAPI"]
        )
        {
            point3f physics:centerOfMass = (0, 0, 0)
            float physics:density = 100
            float3 physics:diagonalInertia = (-1.526978, -0.79620284, 3.0478044)
            float physics:mass = 0.12471427
            quatf physics:principalAxes = (0.36256433, 0.8689241, 0.27237603, 0.1983162)
            matrix4d xformOp:transform = ( (0.001448, 0, 0, 0), (0, 0.227117, 0, 0), (0, 0, 0.032111, 0), (-0.169309, 0, -0.036775, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Cube "Cube" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(1, 0, 0)]
                float[] primvars:displayOpacity = [0.5]
            }
        }

        def Xform "fridge_drawer2_collision_2" (
            prepend apiSchemas = ["PhysicsMassAPI"]
        )
        {
            point3f physics:centerOfMass = (0, 0, 0)
            float physics:density = 100
            float3 physics:diagonalInertia = (-1.526978, -0.79620284, 3.0478044)
            float physics:mass = 0.12471427
            quatf physics:principalAxes = (0.36256433, 0.8689241, 0.27237603, 0.1983162)
            matrix4d xformOp:transform = ( (0.002123, 0, 0, 0), (0, 0.227117, 0, 0), (0, 0, 0.068941, 0), (0.16468, 0, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Cube "Cube" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(1, 0, 0)]
                float[] primvars:displayOpacity = [0.5]
            }
        }

        def Xform "fridge_drawer2_collision_3" (
            prepend apiSchemas = ["PhysicsMassAPI"]
        )
        {
            point3f physics:centerOfMass = (0, 0, 0)
            float physics:density = 100
            float3 physics:diagonalInertia = (-1.526978, -0.79620284, 3.0478044)
            float physics:mass = 0.12471427
            quatf physics:principalAxes = (0.36256433, 0.8689241, 0.27237603, 0.1983162)
            matrix4d xformOp:transform = ( (0.171761, 0, 0, 0), (0, 0.00983, 0, 0), (0, 0, 0.068941, 0), (0, 0.217307, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Cube "Cube" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(1, 0, 0)]
                float[] primvars:displayOpacity = [0.5]
            }
        }

        def Xform "fridge_drawer2_collision_4" (
            prepend apiSchemas = ["PhysicsMassAPI"]
        )
        {
            point3f physics:centerOfMass = (0, 0, 0)
            float physics:density = 100
            float3 physics:diagonalInertia = (-1.526978, -0.79620284, 3.0478044)
            float physics:mass = 0.12471427
            quatf physics:principalAxes = (0.36256433, 0.8689241, 0.27237603, 0.1983162)
            matrix4d xformOp:transform = ( (0.171761, 0, 0, 0), (0, 0.00983, 0, 0), (0, 0, 0.068941, 0), (0, -0.217307, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Cube "Cube" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(1, 0, 0)]
                float[] primvars:displayOpacity = [0.5]
            }
        }

        def Xform "fridge_drawer2_collision_5" (
            prepend apiSchemas = ["PhysicsMassAPI"]
        )
        {
            point3f physics:centerOfMass = (0, 0, 0)
            float physics:density = 100
            float3 physics:diagonalInertia = (-1.526978, -0.79620284, 3.0478044)
            float physics:mass = 0.12471427
            quatf physics:principalAxes = (0.36256433, 0.8689241, 0.27237603, 0.1983162)
            matrix4d xformOp:transform = ( (0.171761, 0, 0, 0), (0, 0.227117, 0, 0), (0, 0, 0.001372, 0), (0, 0, -0.066161, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Cube "Cube" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(1, 0, 0)]
                float[] primvars:displayOpacity = [0.5]
            }
        }
    }

    def Xform "fridge_drawer3" (
        prepend apiSchemas = ["PhysicsRigidBodyAPI"]
    )
    {
        bool physics:rigidBodyEnabled = 1
        matrix4d xformOp:transform = ( (-1, 1.2246467991473532e-16, 0, 0), (-1.2246467991473532e-16, -1, 0, 0), (0, 0, 1, 0), (0.3268233, 2.48030419, 0.72500878, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]

        def Xform "fridge_drawer3_visual_0" (
            prepend references = @./../meshes/usd/visual/SM_Fridge_Drawer_03.usda@</SM_Fridge_Drawer_03>
        )
        {
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            over "SM_Fridge_Drawer_03" (
                prepend apiSchemas = ["MaterialBindingAPI"]
            )
            {
                rel material:binding = </_materials/_Game_Materials_Laborraum_M_Metal_Fridge_M_Metal_Fridge_005>

                over "_Game_Materials_Laborraum_M_Plastic_White_M_Plastic_White_016" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    rel material:binding = </_materials/_Game_Materials_Laborraum_M_Plastic_White_M_Plastic_White_016>
                }

                over "_Game_Materials_Laborraum_M_Plastic_Fridge_M_Plastic_Fridge_006" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    rel material:binding = </_materials/_Game_Materials_Laborraum_M_Plastic_Fridge_M_Plastic_Fridge_006>
                }

                over "_Game_Materials_Laborraum_M_Metal_Fridge_M_Metal_Fridge_005" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    rel material:binding = </_materials/_Game_Materials_Laborraum_M_Metal_Fridge_M_Metal_Fridge_005>
                }
            }
        }

        def Xform "fridge_drawer3_collision_0" (
            prepend apiSchemas = ["PhysicsMassAPI"]
        )
        {
            point3f physics:centerOfMass = (0, 0, 0)
            float physics:density = 100
            float3 physics:diagonalInertia = (-1.0209398, -0.5769473, 2.9468594)
            float physics:mass = 0.09110731
            quatf physics:principalAxes = (-0.24925552, -0.16715932, 0.3654201, 0.8811343)
            matrix4d xformOp:transform = ( (0.001, 0, 0, 0), (0, 0.204478, 0, 0), (0, 0, 0.012462, 0), (-0.165482, 0, 0.083453, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Cube "Cube" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(1, 0, 0)]
                float[] primvars:displayOpacity = [0.5]
            }
        }

        def Xform "fridge_drawer3_collision_1" (
            prepend apiSchemas = ["PhysicsMassAPI"]
        )
        {
            point3f physics:centerOfMass = (0, 0, 0)
            float physics:density = 100
            float3 physics:diagonalInertia = (-1.0209398, -0.5769473, 2.9468594)
            float physics:mass = 0.09110731
            quatf physics:principalAxes = (-0.24925552, -0.16715932, 0.3654201, 0.8811343)
            matrix4d xformOp:transform = ( (0.001, 0, 0, 0), (0, 0.204478, 0, 0), (0, 0, 0.05887, 0), (-0.165482, 0, -0.037113, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Cube "Cube" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(1, 0, 0)]
                float[] primvars:displayOpacity = [0.5]
            }
        }

        def Xform "fridge_drawer3_collision_2" (
            prepend apiSchemas = ["PhysicsMassAPI"]
        )
        {
            point3f physics:centerOfMass = (0, 0, 0)
            float physics:density = 100
            float3 physics:diagonalInertia = (-1.0209398, -0.5769473, 2.9468594)
            float physics:mass = 0.09110731
            quatf physics:principalAxes = (-0.24925552, -0.16715932, 0.3654201, 0.8811343)
            matrix4d xformOp:transform = ( (0.001555, 0, 0, 0), (0, 0.204478, 0, 0), (0, 0, 0.095915, 0), (0.154928, 0, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Cube "Cube" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(1, 0, 0)]
                float[] primvars:displayOpacity = [0.5]
            }
        }

        def Xform "fridge_drawer3_collision_3" (
            prepend apiSchemas = ["PhysicsMassAPI"]
        )
        {
            point3f physics:centerOfMass = (0, 0, 0)
            float physics:density = 100
            float3 physics:diagonalInertia = (-1.0209398, -0.5769473, 2.9468594)
            float physics:mass = 0.09110731
            quatf physics:principalAxes = (-0.24925552, -0.16715932, 0.3654201, 0.8811343)
            matrix4d xformOp:transform = ( (0.161445, 0, 0, 0), (0, 0.00732, 0, 0), (0, 0, 0.095915, 0), (-0.004962, 0.197083, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Cube "Cube" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(1, 0, 0)]
                float[] primvars:displayOpacity = [0.5]
            }
        }

        def Xform "fridge_drawer3_collision_4" (
            prepend apiSchemas = ["PhysicsMassAPI"]
        )
        {
            point3f physics:centerOfMass = (0, 0, 0)
            float physics:density = 100
            float3 physics:diagonalInertia = (-1.0209398, -0.5769473, 2.9468594)
            float physics:mass = 0.09110731
            quatf physics:principalAxes = (-0.24925552, -0.16715932, 0.3654201, 0.8811343)
            matrix4d xformOp:transform = ( (0.161445, 0, 0, 0), (0, 0.00732, 0, 0), (0, 0, 0.095915, 0), (-0.004962, -0.197083, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Cube "Cube" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(1, 0, 0)]
                float[] primvars:displayOpacity = [0.5]
            }
        }

        def Xform "fridge_drawer3_collision_5" (
            prepend apiSchemas = ["PhysicsMassAPI"]
        )
        {
            point3f physics:centerOfMass = (0, 0, 0)
            float physics:density = 100
            float3 physics:diagonalInertia = (-1.0209398, -0.5769473, 2.9468594)
            float physics:mass = 0.09110731
            quatf physics:principalAxes = (-0.24925552, -0.16715932, 0.3654201, 0.8811343)
            matrix4d xformOp:transform = ( (0.161445, 0, 0, 0), (0, 0.204478, 0, 0), (0, 0, 0.000911, 0), (-0.004962, 0, -0.095072, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Cube "Cube" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(1, 0, 0)]
                float[] primvars:displayOpacity = [0.5]
            }
        }
    }

    def Xform "fridge_drawer4" (
        prepend apiSchemas = ["PhysicsRigidBodyAPI"]
    )
    {
        bool physics:rigidBodyEnabled = 1
        matrix4d xformOp:transform = ( (-1, 1.2246467991473532e-16, 0, 0), (-1.2246467991473532e-16, -1, 0, 0), (0, 0, 1, 0), (0.32301853999999997, 2.4777415, 0.54818703, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]

        def Xform "fridge_drawer4_visual_0" (
            prepend references = @./../meshes/usd/visual/SM_Fridge_Drawer_04.usda@</SM_Fridge_Drawer_04>
        )
        {
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            over "SM_Fridge_Drawer_04" (
                prepend apiSchemas = ["MaterialBindingAPI"]
            )
            {
                rel material:binding = </_materials/_Game_Materials_Laborraum_M_Metal_Fridge_M_Metal_Fridge_006>

                over "_Game_Materials_Laborraum_M_Plastic_White_M_Plastic_White_017" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    rel material:binding = </_materials/_Game_Materials_Laborraum_M_Plastic_White_M_Plastic_White_017>
                }

                over "_Game_Materials_Laborraum_M_Plastic_Fridge_M_Plastic_Fridge_007" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    rel material:binding = </_materials/_Game_Materials_Laborraum_M_Plastic_Fridge_M_Plastic_Fridge_007>
                }

                over "_Game_Materials_Laborraum_M_Metal_Fridge_M_Metal_Fridge_006" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    rel material:binding = </_materials/_Game_Materials_Laborraum_M_Metal_Fridge_M_Metal_Fridge_006>
                }
            }
        }

        def Xform "fridge_drawer4_collision_0" (
            prepend apiSchemas = ["PhysicsMassAPI"]
        )
        {
            point3f physics:centerOfMass = (0, 0, 0)
            float physics:density = 100
            float3 physics:diagonalInertia = (-0.89532804, -0.4501033, 2.4075935)
            float physics:mass = 0.077187285
            quatf physics:principalAxes = (-0.25767305, -0.16778907, 0.3636993, 0.8793033)
            matrix4d xformOp:transform = ( (0.001, 0, 0, 0), (0, 0.204478, 0, 0), (0, 0, 0.012462, 0), (-0.165482, 0, 0.063456, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Cube "Cube" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(1, 0, 0)]
                float[] primvars:displayOpacity = [0.5]
            }
        }

        def Xform "fridge_drawer4_collision_1" (
            prepend apiSchemas = ["PhysicsMassAPI"]
        )
        {
            point3f physics:centerOfMass = (0, 0, 0)
            float physics:density = 100
            float3 physics:diagonalInertia = (-0.89532804, -0.4501033, 2.4075935)
            float physics:mass = 0.077187285
            quatf physics:principalAxes = (-0.25767305, -0.16778907, 0.3636993, 0.8793033)
            matrix4d xformOp:transform = ( (0.001, 0, 0, 0), (0, 0.204478, 0, 0), (0, 0, 0.04, 0), (-0.165482, 0, -0.035978, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Cube "Cube" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(1, 0, 0)]
                float[] primvars:displayOpacity = [0.5]
            }
        }

        def Xform "fridge_drawer4_collision_2" (
            prepend apiSchemas = ["PhysicsMassAPI"]
        )
        {
            point3f physics:centerOfMass = (0, 0, 0)
            float physics:density = 100
            float3 physics:diagonalInertia = (-0.89532804, -0.4501033, 2.4075935)
            float physics:mass = 0.077187285
            quatf physics:principalAxes = (-0.25767305, -0.16778907, 0.3636993, 0.8793033)
            matrix4d xformOp:transform = ( (0.001, 0, 0, 0), (0, 0.204478, 0, 0), (0, 0, 0.075917, 0), (0.155483, 0, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Cube "Cube" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(1, 0, 0)]
                float[] primvars:displayOpacity = [0.5]
            }
        }

        def Xform "fridge_drawer4_collision_3" (
            prepend apiSchemas = ["PhysicsMassAPI"]
        )
        {
            point3f physics:centerOfMass = (0, 0, 0)
            float physics:density = 100
            float3 physics:diagonalInertia = (-0.89532804, -0.4501033, 2.4075935)
            float physics:mass = 0.077187285
            quatf physics:principalAxes = (-0.25767305, -0.16778907, 0.3636993, 0.8793033)
            matrix4d xformOp:transform = ( (0.166408, 0, 0, 0), (0, 0.008, 0, 0), (0, 0, 0.075917, 0), (0, 0.196311, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Cube "Cube" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(1, 0, 0)]
                float[] primvars:displayOpacity = [0.5]
            }
        }

        def Xform "fridge_drawer4_collision_4" (
            prepend apiSchemas = ["PhysicsMassAPI"]
        )
        {
            point3f physics:centerOfMass = (0, 0, 0)
            float physics:density = 100
            float3 physics:diagonalInertia = (-0.89532804, -0.4501033, 2.4075935)
            float physics:mass = 0.077187285
            quatf physics:principalAxes = (-0.25767305, -0.16778907, 0.3636993, 0.8793033)
            matrix4d xformOp:transform = ( (0.166408, 0, 0, 0), (0, 0.008, 0, 0), (0, 0, 0.075917, 0), (0, -0.196311, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Cube "Cube" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(1, 0, 0)]
                float[] primvars:displayOpacity = [0.5]
            }
        }

        def Xform "fridge_drawer4_collision_5" (
            prepend apiSchemas = ["PhysicsMassAPI"]
        )
        {
            point3f physics:centerOfMass = (0, 0, 0)
            float physics:density = 100
            float3 physics:diagonalInertia = (-0.89532804, -0.4501033, 2.4075935)
            float physics:mass = 0.077187285
            quatf physics:principalAxes = (-0.25767305, -0.16778907, 0.3636993, 0.8793033)
            matrix4d xformOp:transform = ( (0.166408, 0, 0, 0), (0, 0.204478, 0, 0), (0, 0, 0.001, 0), (0, 0, -0.074992, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Cube "Cube" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(1, 0, 0)]
                float[] primvars:displayOpacity = [0.5]
            }
        }
    }

    def Xform "fridge_drawer5" (
        prepend apiSchemas = ["PhysicsRigidBodyAPI"]
    )
    {
        bool physics:rigidBodyEnabled = 1
        matrix4d xformOp:transform = ( (-1, 1.2246467991473532e-16, 0, 0), (-1.2246467991473532e-16, -1, 0, 0), (0, 0, 1, 0), (0.358973973, 2.48282318, 0.368397905, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]

        def Xform "fridge_drawer5_visual_0" (
            prepend references = @./../meshes/usd/visual/SM_Fridge_Drawer_05.usda@</SM_Fridge_Drawer_05>
        )
        {
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            over "SM_Fridge_Drawer_05" (
                prepend apiSchemas = ["MaterialBindingAPI"]
            )
            {
                rel material:binding = </_materials/_Game_Materials_Laborraum_M_Metal_Fridge_M_Metal_Fridge_007>

                over "_Game_Materials_Laborraum_M_Plastic_White_M_Plastic_White_018" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    rel material:binding = </_materials/_Game_Materials_Laborraum_M_Plastic_White_M_Plastic_White_018>
                }

                over "_Game_Materials_Laborraum_M_Plastic_Fridge_M_Plastic_Fridge_008" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    rel material:binding = </_materials/_Game_Materials_Laborraum_M_Plastic_Fridge_M_Plastic_Fridge_008>
                }

                over "_Game_Materials_Laborraum_M_Metal_Fridge_M_Metal_Fridge_007" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    rel material:binding = </_materials/_Game_Materials_Laborraum_M_Metal_Fridge_M_Metal_Fridge_007>
                }
            }
        }

        def Xform "fridge_drawer5_collision_0" (
            prepend apiSchemas = ["PhysicsMassAPI"]
        )
        {
            point3f physics:centerOfMass = (0, 0, 0)
            float physics:density = 100
            float3 physics:diagonalInertia = (-0.7366306, -0.5705609, 2.085181)
            float physics:mass = 0.07928921
            quatf physics:principalAxes = (-0.22997779, -0.22116429, 0.29543316, 0.90050864)
            matrix4d xformOp:transform = ( (0.001, 0, 0, 0), (0, 0.204404, 0, 0), (0, 0, 0.012499, 0), (-0.120488, 0, 0.08099, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Cube "Cube" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(1, 0, 0)]
                float[] primvars:displayOpacity = [0.5]
            }
        }

        def Xform "fridge_drawer5_collision_1" (
            prepend apiSchemas = ["PhysicsMassAPI"]
        )
        {
            point3f physics:centerOfMass = (0, 0, 0)
            float physics:density = 100
            float3 physics:diagonalInertia = (-0.7366306, -0.5705609, 2.085181)
            float physics:mass = 0.07928921
            quatf physics:principalAxes = (-0.22997779, -0.22116429, 0.29543316, 0.90050864)
            matrix4d xformOp:transform = ( (0.001, 0, 0, 0), (0, 0.204404, 0, 0), (0, 0, 0.055353, 0), (-0.118669, 0, -0.03813, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Cube "Cube" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(1, 0, 0)]
                float[] primvars:displayOpacity = [0.5]
            }
        }

        def Xform "fridge_drawer5_collision_2" (
            prepend apiSchemas = ["PhysicsMassAPI"]
        )
        {
            point3f physics:centerOfMass = (0, 0, 0)
            float physics:density = 100
            float3 physics:diagonalInertia = (-0.7366306, -0.5705609, 2.085181)
            float physics:mass = 0.07928921
            quatf physics:principalAxes = (-0.22997779, -0.22116429, 0.29543316, 0.90050864)
            matrix4d xformOp:transform = ( (0.003217, 0, 0, 0), (0, 0.204404, 0, 0), (0, 0, 0.075917, 0), (0.108269, 0, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Cube "Cube" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(1, 0, 0)]
                float[] primvars:displayOpacity = [0.5]
            }
        }

        def Xform "fridge_drawer5_collision_3" (
            prepend apiSchemas = ["PhysicsMassAPI"]
        )
        {
            point3f physics:centerOfMass = (0, 0, 0)
            float physics:density = 100
            float3 physics:diagonalInertia = (-0.7366306, -0.5705609, 2.085181)
            float physics:mass = 0.07928921
            quatf physics:principalAxes = (-0.22997779, -0.22116429, 0.29543316, 0.90050864)
            matrix4d xformOp:transform = ( (0.120421, 0, 0, 0), (0, 0.007461, 0, 0), (0, 0, 0.075917, 0), (0, 0.196942, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Cube "Cube" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(1, 0, 0)]
                float[] primvars:displayOpacity = [0.5]
            }
        }

        def Xform "fridge_drawer5_collision_4" (
            prepend apiSchemas = ["PhysicsMassAPI"]
        )
        {
            point3f physics:centerOfMass = (0, 0, 0)
            float physics:density = 100
            float3 physics:diagonalInertia = (-0.7366306, -0.5705609, 2.085181)
            float physics:mass = 0.07928921
            quatf physics:principalAxes = (-0.22997779, -0.22116429, 0.29543316, 0.90050864)
            matrix4d xformOp:transform = ( (0.120421, 0, 0, 0), (0, 0.007461, 0, 0), (0, 0, 0.075917, 0), (0, -0.196942, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Cube "Cube" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(1, 0, 0)]
                float[] primvars:displayOpacity = [0.5]
            }
        }

        def Xform "fridge_drawer5_collision_5" (
            prepend apiSchemas = ["PhysicsMassAPI"]
        )
        {
            point3f physics:centerOfMass = (0, 0, 0)
            float physics:density = 100
            float3 physics:diagonalInertia = (-0.7366306, -0.5705609, 2.085181)
            float physics:mass = 0.07928921
            quatf physics:principalAxes = (-0.22997779, -0.22116429, 0.29543316, 0.90050864)
            matrix4d xformOp:transform = ( (0.120421, 0, 0, 0), (0, 0.204404, 0, 0), (0, 0, 0.001, 0), (0, 0, -0.09249, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Cube "Cube" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(1, 0, 0)]
                float[] primvars:displayOpacity = [0.5]
            }
        }
    }

    def Xform "cabinet5_drawer1" (
        prepend apiSchemas = ["PhysicsRigidBodyAPI"]
    )
    {
        bool physics:rigidBodyEnabled = 1
        matrix4d xformOp:transform = ( (-1, 1.2246467991473532e-16, 0, 0), (-1.2246467991473532e-16, -1, 0, 0), (0, 0, 1, 0), (0.32739307, 3.0851170800000003, 0.82598503, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]

        def Xform "cabinet5_drawer1_visual_0" (
            prepend references = @./../meshes/usd/visual/SM_Kitchen_05_Drawer_01.usda@</SM_Kitchen_05_Drawer_01>
        )
        {
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            over "SM_Kitchen_05_Base_Drawer_01" (
                prepend apiSchemas = ["MaterialBindingAPI"]
            )
            {
                rel material:binding = </_materials/_Game_Materials_Laborraum_M_Drawer_Mat_M_Drawer_Mat_004>

                over "_Game_Materials_Laborraum_M_Metal_Chrome_M_Metal_Chrome_016" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    rel material:binding = </_materials/_Game_Materials_Laborraum_M_Metal_Chrome_M_Metal_Chrome_016>
                }

                over "_Game_Materials_Laborraum_M_Kitchen_Fronts_M_Kitchen_Fronts_013" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    rel material:binding = </_materials/_Game_Materials_Laborraum_M_Kitchen_Fronts_M_Kitchen_Fronts_013>
                }

                over "_Game_Materials_Laborraum_M_Plastic_White_M_Plastic_White_021" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    rel material:binding = </_materials/_Game_Materials_Laborraum_M_Plastic_White_M_Plastic_White_021>
                }

                over "_Game_Materials_Laborraum_M_Drawer_Mat_M_Drawer_Mat_004" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    rel material:binding = </_materials/_Game_Materials_Laborraum_M_Drawer_Mat_M_Drawer_Mat_004>
                }
            }
        }

        def Xform "cabinet5_drawer1_collision_0" (
            prepend apiSchemas = ["PhysicsMassAPI"]
        )
        {
            point3f physics:centerOfMass = (0, 0, 0)
            float physics:density = 100
            float3 physics:diagonalInertia = (-4.251241, -1.9055406, 6.958551)
            float physics:mass = 0.6783786
            quatf physics:principalAxes = (0.34476236, 0.8853004, 0.26440978, 0.1657395)
            matrix4d xformOp:transform = ( (0.245507, 0, 0, 0), (0, 0.008, 0, 0), (0, 0, 0.042633, 0), (0.021031, 0.270267, -0.01336, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Cube "Cube" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(1, 0, 0)]
                float[] primvars:displayOpacity = [0.5]
            }
        }

        def Xform "cabinet5_drawer1_collision_1" (
            prepend apiSchemas = ["PhysicsMassAPI"]
        )
        {
            point3f physics:centerOfMass = (0, 0, 0)
            float physics:density = 100
            float3 physics:diagonalInertia = (-4.251241, -1.9055406, 6.958551)
            float physics:mass = 0.6783786
            quatf physics:principalAxes = (0.34476236, 0.8853004, 0.26440978, 0.1657395)
            matrix4d xformOp:transform = ( (0.245507, 0, 0, 0), (0, 0.008, 0, 0), (0, 0, 0.042633, 0), (0.021031, -0.270267, -0.01336, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Cube "Cube" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(1, 0, 0)]
                float[] primvars:displayOpacity = [0.5]
            }
        }

        def Xform "cabinet5_drawer1_collision_2" (
            prepend apiSchemas = ["PhysicsMassAPI"]
        )
        {
            point3f physics:centerOfMass = (0, 0, 0)
            float physics:density = 100
            float3 physics:diagonalInertia = (-4.251241, -1.9055406, 6.958551)
            float physics:mass = 0.6783786
            quatf physics:principalAxes = (0.34476236, 0.8853004, 0.26440978, 0.1657395)
            matrix4d xformOp:transform = ( (0.0095, 0, 0, 0), (0, 0.298468, 0, 0), (0, 0, 0.064993, 0), (-0.233977, 0, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Cube "Cube" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(1, 0, 0)]
                float[] primvars:displayOpacity = [0.5]
            }
        }

        def Xform "cabinet5_drawer1_collision_3" (
            prepend apiSchemas = ["PhysicsMassAPI"]
        )
        {
            point3f physics:centerOfMass = (0, 0, 0)
            float physics:density = 100
            float3 physics:diagonalInertia = (-4.251241, -1.9055406, 6.958551)
            float physics:mass = 0.6783786
            quatf physics:principalAxes = (0.34476236, 0.8853004, 0.26440978, 0.1657395)
            matrix4d xformOp:transform = ( (0.008, 0, 0, 0), (0, 0.269804, 0, 0), (0, 0, 0.042633, 0), (0.260372, 0, -0.01336, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Cube "Cube" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(1, 0, 0)]
                float[] primvars:displayOpacity = [0.5]
            }
        }

        def Xform "cabinet5_drawer1_collision_4" (
            prepend apiSchemas = ["PhysicsMassAPI"]
        )
        {
            point3f physics:centerOfMass = (0, 0, 0)
            float physics:density = 100
            float3 physics:diagonalInertia = (-4.251241, -1.9055406, 6.958551)
            float physics:mass = 0.6783786
            quatf physics:principalAxes = (0.34476236, 0.8853004, 0.26440978, 0.1657395)
            matrix4d xformOp:transform = ( (0.245507, 0, 0, 0), (0, 0.269804, 0, 0), (0, 0, 0.0075, 0), (0.021031, 0, -0.047595, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Cube "Cube" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(1, 0, 0)]
                float[] primvars:displayOpacity = [0.5]
            }
        }

        def Xform "cabinet5_drawer1_handle"
        {
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 2.220446049250313e-16, 1, 0), (0, -1, 2.220446049250313e-16, 0), (-0.26980946, 0.00142363, 0.01676949, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Xform "cabinet5_drawer1_handle_visual_0" (
                prepend references = @./../meshes/usd/visual/SM_Kitchen_Handle.usda@</SM_Kitchen_Handle>
            )
            {
                matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]

                over "SM_Kitchen_Handle" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    rel material:binding = </_materials/_Game_Materials_Laborraum_M_Metal_Brushed_M_Metal_Brushed_003>
                }
            }

            def Xform "cabinet5_drawer1_handle_collision_0" (
                prepend apiSchemas = ["PhysicsMassAPI"]
            )
            {
                point3f physics:centerOfMass = (0, 0, 0)
                float physics:density = 100
                float3 physics:diagonalInertia = (-4.251241, -1.9055406, 6.958551)
                float physics:mass = 0.6783786
                quatf physics:principalAxes = (0.34476236, 0.8853004, 0.26440978, 0.1657395)
                matrix4d xformOp:transform = ( (0.01, 0, 0, 0), (0, 0.0065, 0, 0), (0, 0, 0.0065, 0), (0.0164985, 0, 0.08, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]

                def Cube "Cube" (
                    prepend apiSchemas = ["PhysicsCollisionAPI"]
                )
                {
                    float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                    bool physics:collisionEnabled = 1
                    color3f[] primvars:displayColor = [(1, 0, 0)]
                    float[] primvars:displayOpacity = [0.5]
                }
            }

            def Xform "cabinet5_drawer1_handle_collision_1" (
                prepend apiSchemas = ["PhysicsMassAPI"]
            )
            {
                point3f physics:centerOfMass = (0, 0, 0)
                float physics:density = 100
                float3 physics:diagonalInertia = (-4.251241, -1.9055406, 6.958551)
                float physics:mass = 0.6783786
                quatf physics:principalAxes = (0.34476236, 0.8853004, 0.26440978, 0.1657395)
                matrix4d xformOp:transform = ( (0.01, 0, 0, 0), (0, 0.0065, 0, 0), (0, 0, 0.0065, 0), (0.0164985, 0, -0.08, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]

                def Cube "Cube" (
                    prepend apiSchemas = ["PhysicsCollisionAPI"]
                )
                {
                    float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                    bool physics:collisionEnabled = 1
                    color3f[] primvars:displayColor = [(1, 0, 0)]
                    float[] primvars:displayOpacity = [0.5]
                }
            }

            def Xform "cabinet5_drawer1_handle_collision_2" (
                prepend apiSchemas = ["PhysicsMassAPI"]
            )
            {
                point3f physics:centerOfMass = (0, 0, 0)
                float physics:density = 100
                float3 physics:diagonalInertia = (-4.251241, -1.9055406, 6.958551)
                float physics:mass = 0.6783786
                quatf physics:principalAxes = (0.34476236, 0.8853004, 0.26440978, 0.1657395)
                matrix4d xformOp:transform = ( (0.0065, 0, 0, 0), (0, 0.0065, 0, 0), (0, 0, 0.086516, 0), (0, 0, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]

                def Cube "Cube" (
                    prepend apiSchemas = ["PhysicsCollisionAPI"]
                )
                {
                    float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                    bool physics:collisionEnabled = 1
                    color3f[] primvars:displayColor = [(1, 0, 0)]
                    float[] primvars:displayOpacity = [0.5]
                }
            }
        }
    }

    def Xform "cabinet5_drawer2" (
        prepend apiSchemas = ["PhysicsRigidBodyAPI"]
    )
    {
        bool physics:rigidBodyEnabled = 1
        matrix4d xformOp:transform = ( (-1, 1.2246467991473532e-16, 0, 0), (-1.2246467991473532e-16, -1, 0, 0), (0, 0, 1, 0), (0.32780372, 3.08490834, 0.62793125, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]

        def Xform "cabinet5_drawer2_visual_0" (
            prepend references = @./../meshes/usd/visual/SM_Kitchen_05_Drawer_02.usda@</SM_Kitchen_05_Drawer_02>
        )
        {
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            over "SM_Kitchen_05_Base_Drawer_02" (
                prepend apiSchemas = ["MaterialBindingAPI"]
            )
            {
                rel material:binding = </_materials/_Game_Materials_Laborraum_M_Drawer_Mat_M_Drawer_Mat_005>

                over "_Game_Materials_Laborraum_M_Metal_Chrome_M_Metal_Chrome_017" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    rel material:binding = </_materials/_Game_Materials_Laborraum_M_Metal_Chrome_M_Metal_Chrome_017>
                }

                over "_Game_Materials_Laborraum_M_Kitchen_Fronts_M_Kitchen_Fronts_014" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    rel material:binding = </_materials/_Game_Materials_Laborraum_M_Kitchen_Fronts_M_Kitchen_Fronts_014>
                }

                over "_Game_Materials_Laborraum_M_Plastic_White_M_Plastic_White_022" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    rel material:binding = </_materials/_Game_Materials_Laborraum_M_Plastic_White_M_Plastic_White_022>
                }

                over "_Game_Materials_Laborraum_M_Drawer_Mat_M_Drawer_Mat_005" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    rel material:binding = </_materials/_Game_Materials_Laborraum_M_Drawer_Mat_M_Drawer_Mat_005>
                }
            }
        }

        def Xform "cabinet5_drawer2_collision_0" (
            prepend apiSchemas = ["PhysicsMassAPI"]
        )
        {
            point3f physics:centerOfMass = (0, 0, 0)
            float physics:density = 100
            float3 physics:diagonalInertia = (-5.2892876, -2.8912802, 10.365362)
            float physics:mass = 0.92487997
            quatf physics:principalAxes = (-0.24516177, -0.15246214, 0.34992623, 0.89118046)
            matrix4d xformOp:transform = ( (0.245507, 0, 0, 0), (0, 0.008, 0, 0), (0, 0, 0.011649, 0), (0.021031, 0.270267, 0.041246, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Cube "Cube" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(1, 0, 0)]
                float[] primvars:displayOpacity = [0.5]
            }
        }

        def Xform "cabinet5_drawer2_collision_1" (
            prepend apiSchemas = ["PhysicsMassAPI"]
        )
        {
            point3f physics:centerOfMass = (0, 0, 0)
            float physics:density = 100
            float3 physics:diagonalInertia = (-5.2892876, -2.8912802, 10.365362)
            float physics:mass = 0.92487997
            quatf physics:principalAxes = (-0.24516177, -0.15246214, 0.34992623, 0.89118046)
            matrix4d xformOp:transform = ( (0.245507, 0, 0, 0), (0, 0.008, 0, 0), (0, 0, 0.011649, 0), (0.021031, -0.270267, 0.041246, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Cube "Cube" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(1, 0, 0)]
                float[] primvars:displayOpacity = [0.5]
            }
        }

        def Xform "cabinet5_drawer2_collision_2" (
            prepend apiSchemas = ["PhysicsMassAPI"]
        )
        {
            point3f physics:centerOfMass = (0, 0, 0)
            float physics:density = 100
            float3 physics:diagonalInertia = (-5.2892876, -2.8912802, 10.365362)
            float physics:mass = 0.92487997
            quatf physics:principalAxes = (-0.24516177, -0.15246214, 0.34992623, 0.89118046)
            matrix4d xformOp:transform = ( (0.245507, 0, 0, 0), (0, 0.008, 0, 0), (0, 0, 0.041748, 0), (0.021031, 0.270267, -0.078968, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Cube "Cube" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(1, 0, 0)]
                float[] primvars:displayOpacity = [0.5]
            }
        }

        def Xform "cabinet5_drawer2_collision_3" (
            prepend apiSchemas = ["PhysicsMassAPI"]
        )
        {
            point3f physics:centerOfMass = (0, 0, 0)
            float physics:density = 100
            float3 physics:diagonalInertia = (-5.2892876, -2.8912802, 10.365362)
            float physics:mass = 0.92487997
            quatf physics:principalAxes = (-0.24516177, -0.15246214, 0.34992623, 0.89118046)
            matrix4d xformOp:transform = ( (0.245507, 0, 0, 0), (0, 0.008, 0, 0), (0, 0, 0.041748, 0), (0.021031, -0.270267, -0.078968, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Cube "Cube" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(1, 0, 0)]
                float[] primvars:displayOpacity = [0.5]
            }
        }

        def Xform "cabinet5_drawer2_collision_4" (
            prepend apiSchemas = ["PhysicsMassAPI"]
        )
        {
            point3f physics:centerOfMass = (0, 0, 0)
            float physics:density = 100
            float3 physics:diagonalInertia = (-5.2892876, -2.8912802, 10.365362)
            float physics:mass = 0.92487997
            quatf physics:principalAxes = (-0.24516177, -0.15246214, 0.34992623, 0.89118046)
            matrix4d xformOp:transform = ( (0.0095, 0, 0, 0), (0, 0.298468, 0, 0), (0, 0, 0.131375, 0), (-0.233977, 0, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Cube "Cube" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(1, 0, 0)]
                float[] primvars:displayOpacity = [0.5]
            }
        }

        def Xform "cabinet5_drawer2_collision_5" (
            prepend apiSchemas = ["PhysicsMassAPI"]
        )
        {
            point3f physics:centerOfMass = (0, 0, 0)
            float physics:density = 100
            float3 physics:diagonalInertia = (-5.2892876, -2.8912802, 10.365362)
            float physics:mass = 0.92487997
            quatf physics:principalAxes = (-0.24516177, -0.15246214, 0.34992623, 0.89118046)
            matrix4d xformOp:transform = ( (0.008, 0, 0, 0), (0, 0.269804, 0, 0), (0, 0, 0.084491, 0), (0.260372, 0, -0.037996, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Cube "Cube" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(1, 0, 0)]
                float[] primvars:displayOpacity = [0.5]
            }
        }

        def Xform "cabinet5_drawer2_collision_6" (
            prepend apiSchemas = ["PhysicsMassAPI"]
        )
        {
            point3f physics:centerOfMass = (0, 0, 0)
            float physics:density = 100
            float3 physics:diagonalInertia = (-5.2892876, -2.8912802, 10.365362)
            float physics:mass = 0.92487997
            quatf physics:principalAxes = (-0.24516177, -0.15246214, 0.34992623, 0.89118046)
            matrix4d xformOp:transform = ( (0.245507, 0, 0, 0), (0, 0.269804, 0, 0), (0, 0, 0.008, 0), (0.021031, 0, -0.113735, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Cube "Cube" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(1, 0, 0)]
                float[] primvars:displayOpacity = [0.5]
            }
        }

        def Xform "cabinet5_drawer2_handle"
        {
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 2.220446049250313e-16, 1, 0), (0, -1, 2.220446049250313e-16, 0), (-0.2707106, 0.00106413, 0.08500843, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Xform "cabinet5_drawer2_handle_visual_0" (
                prepend references = @./../meshes/usd/visual/SM_Kitchen_Handle.usda@</SM_Kitchen_Handle>
            )
            {
                matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]

                over "SM_Kitchen_Handle" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    rel material:binding = </_materials/_Game_Materials_Laborraum_M_Metal_Brushed_M_Metal_Brushed_003>
                }
            }

            def Xform "cabinet5_drawer2_handle_collision_0" (
                prepend apiSchemas = ["PhysicsMassAPI"]
            )
            {
                point3f physics:centerOfMass = (0, 0, 0)
                float physics:density = 100
                float3 physics:diagonalInertia = (-5.2892876, -2.8912802, 10.365362)
                float physics:mass = 0.92487997
                quatf physics:principalAxes = (-0.24516177, -0.15246214, 0.34992623, 0.89118046)
                matrix4d xformOp:transform = ( (0.01, 0, 0, 0), (0, 0.0065, 0, 0), (0, 0, 0.0065, 0), (0.0164985, 0, 0.08, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]

                def Cube "Cube" (
                    prepend apiSchemas = ["PhysicsCollisionAPI"]
                )
                {
                    float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                    bool physics:collisionEnabled = 1
                    color3f[] primvars:displayColor = [(1, 0, 0)]
                    float[] primvars:displayOpacity = [0.5]
                }
            }

            def Xform "cabinet5_drawer2_handle_collision_1" (
                prepend apiSchemas = ["PhysicsMassAPI"]
            )
            {
                point3f physics:centerOfMass = (0, 0, 0)
                float physics:density = 100
                float3 physics:diagonalInertia = (-5.2892876, -2.8912802, 10.365362)
                float physics:mass = 0.92487997
                quatf physics:principalAxes = (-0.24516177, -0.15246214, 0.34992623, 0.89118046)
                matrix4d xformOp:transform = ( (0.01, 0, 0, 0), (0, 0.0065, 0, 0), (0, 0, 0.0065, 0), (0.0164985, 0, -0.08, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]

                def Cube "Cube" (
                    prepend apiSchemas = ["PhysicsCollisionAPI"]
                )
                {
                    float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                    bool physics:collisionEnabled = 1
                    color3f[] primvars:displayColor = [(1, 0, 0)]
                    float[] primvars:displayOpacity = [0.5]
                }
            }

            def Xform "cabinet5_drawer2_handle_collision_2" (
                prepend apiSchemas = ["PhysicsMassAPI"]
            )
            {
                point3f physics:centerOfMass = (0, 0, 0)
                float physics:density = 100
                float3 physics:diagonalInertia = (-5.2892876, -2.8912802, 10.365362)
                float physics:mass = 0.92487997
                quatf physics:principalAxes = (-0.24516177, -0.15246214, 0.34992623, 0.89118046)
                matrix4d xformOp:transform = ( (0.0065, 0, 0, 0), (0, 0.0065, 0, 0), (0, 0, 0.086516, 0), (0, 0, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]

                def Cube "Cube" (
                    prepend apiSchemas = ["PhysicsCollisionAPI"]
                )
                {
                    float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                    bool physics:collisionEnabled = 1
                    color3f[] primvars:displayColor = [(1, 0, 0)]
                    float[] primvars:displayOpacity = [0.5]
                }
            }
        }
    }

    def Xform "cabinet5_drawer3" (
        prepend apiSchemas = ["PhysicsRigidBodyAPI"]
    )
    {
        bool physics:rigidBodyEnabled = 1
        matrix4d xformOp:transform = ( (-1, 1.2246467991473532e-16, 0, 0), (-1.2246467991473532e-16, -1, 0, 0), (0, 0, 1, 0), (0.32821696, 3.08487233, 0.29853976000000004, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]

        def Xform "cabinet5_drawer3_visual_0" (
            prepend references = @./../meshes/usd/visual/SM_Kitchen_05_Drawer_03.usda@</SM_Kitchen_05_Drawer_03>
        )
        {
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            over "SM_Kitchen_05_Base_Drawer_03" (
                prepend apiSchemas = ["MaterialBindingAPI"]
            )
            {
                rel material:binding = </_materials/_Game_Materials_Laborraum_M_Drawer_Mat_M_Drawer_Mat_006>

                over "_Game_Materials_Laborraum_M_Metal_Chrome_M_Metal_Chrome_018" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    rel material:binding = </_materials/_Game_Materials_Laborraum_M_Metal_Chrome_M_Metal_Chrome_018>
                }

                over "_Game_Materials_Laborraum_M_Kitchen_Fronts_M_Kitchen_Fronts_015" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    rel material:binding = </_materials/_Game_Materials_Laborraum_M_Kitchen_Fronts_M_Kitchen_Fronts_015>
                }

                over "_Game_Materials_Laborraum_M_Plastic_White_M_Plastic_White_023" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    rel material:binding = </_materials/_Game_Materials_Laborraum_M_Plastic_White_M_Plastic_White_023>
                }

                over "_Game_Materials_Laborraum_M_Drawer_Mat_M_Drawer_Mat_006" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    rel material:binding = </_materials/_Game_Materials_Laborraum_M_Drawer_Mat_M_Drawer_Mat_006>
                }
            }
        }

        def Xform "cabinet5_drawer3_collision_0" (
            prepend apiSchemas = ["PhysicsMassAPI"]
        )
        {
            point3f physics:centerOfMass = (0, 0, 0)
            float physics:density = 100
            float3 physics:diagonalInertia = (-5.4504128, -3.830229, 12.159611)
            float physics:mass = 1.0757052
            quatf physics:principalAxes = (-0.2230673, -0.13975434, 0.3614801, 0.8944506)
            matrix4d xformOp:transform = ( (0.245507, 0, 0, 0), (0, 0.008, 0, 0), (0, 0, 0.011638, 0), (0.021031, 0.270267, -0.00926, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Cube "Cube" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(1, 0, 0)]
                float[] primvars:displayOpacity = [0.5]
            }
        }

        def Xform "cabinet5_drawer3_collision_1" (
            prepend apiSchemas = ["PhysicsMassAPI"]
        )
        {
            point3f physics:centerOfMass = (0, 0, 0)
            float physics:density = 100
            float3 physics:diagonalInertia = (-5.4504128, -3.830229, 12.159611)
            float physics:mass = 1.0757052
            quatf physics:principalAxes = (-0.2230673, -0.13975434, 0.3614801, 0.8944506)
            matrix4d xformOp:transform = ( (0.245507, 0, 0, 0), (0, 0.008, 0, 0), (0, 0, 0.011638, 0), (0.021031, -0.270267, -0.00926, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Cube "Cube" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(1, 0, 0)]
                float[] primvars:displayOpacity = [0.5]
            }
        }

        def Xform "cabinet5_drawer3_collision_2" (
            prepend apiSchemas = ["PhysicsMassAPI"]
        )
        {
            point3f physics:centerOfMass = (0, 0, 0)
            float physics:density = 100
            float3 physics:diagonalInertia = (-5.4504128, -3.830229, 12.159611)
            float physics:mass = 1.0757052
            quatf physics:principalAxes = (-0.2230673, -0.13975434, 0.3614801, 0.8944506)
            matrix4d xformOp:transform = ( (0.245507, 0, 0, 0), (0, 0.008, 0, 0), (0, 0, 0.041711, 0), (0.021031, 0.270267, -0.129424, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Cube "Cube" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(1, 0, 0)]
                float[] primvars:displayOpacity = [0.5]
            }
        }

        def Xform "cabinet5_drawer3_collision_3" (
            prepend apiSchemas = ["PhysicsMassAPI"]
        )
        {
            point3f physics:centerOfMass = (0, 0, 0)
            float physics:density = 100
            float3 physics:diagonalInertia = (-5.4504128, -3.830229, 12.159611)
            float physics:mass = 1.0757052
            quatf physics:principalAxes = (-0.2230673, -0.13975434, 0.3614801, 0.8944506)
            matrix4d xformOp:transform = ( (0.245507, 0, 0, 0), (0, 0.008, 0, 0), (0, 0, 0.041711, 0), (0.021031, -0.270267, -0.129424, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Cube "Cube" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(1, 0, 0)]
                float[] primvars:displayOpacity = [0.5]
            }
        }

        def Xform "cabinet5_drawer3_collision_4" (
            prepend apiSchemas = ["PhysicsMassAPI"]
        )
        {
            point3f physics:centerOfMass = (0, 0, 0)
            float physics:density = 100
            float3 physics:diagonalInertia = (-5.4504128, -3.830229, 12.159611)
            float physics:mass = 1.0757052
            quatf physics:principalAxes = (-0.2230673, -0.13975434, 0.3614801, 0.8944506)
            matrix4d xformOp:transform = ( (0.0095, 0, 0, 0), (0, 0.298468, 0, 0), (0, 0, 0.197867, 0), (-0.233977, 0, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Cube "Cube" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(1, 0, 0)]
                float[] primvars:displayOpacity = [0.5]
            }
        }

        def Xform "cabinet5_drawer3_collision_5" (
            prepend apiSchemas = ["PhysicsMassAPI"]
        )
        {
            point3f physics:centerOfMass = (0, 0, 0)
            float physics:density = 100
            float3 physics:diagonalInertia = (-5.4504128, -3.830229, 12.159611)
            float physics:mass = 1.0757052
            quatf physics:principalAxes = (-0.2230673, -0.13975434, 0.3614801, 0.8944506)
            matrix4d xformOp:transform = ( (0.008, 0, 0, 0), (0, 0.269804, 0, 0), (0, 0, 0.084105, 0), (0.260372, 0, -0.088821, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Cube "Cube" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(1, 0, 0)]
                float[] primvars:displayOpacity = [0.5]
            }
        }

        def Xform "cabinet5_drawer3_collision_6" (
            prepend apiSchemas = ["PhysicsMassAPI"]
        )
        {
            point3f physics:centerOfMass = (0, 0, 0)
            float physics:density = 100
            float3 physics:diagonalInertia = (-5.4504128, -3.830229, 12.159611)
            float physics:mass = 1.0757052
            quatf physics:principalAxes = (-0.2230673, -0.13975434, 0.3614801, 0.8944506)
            matrix4d xformOp:transform = ( (0.245507, 0, 0, 0), (0, 0.269804, 0, 0), (0, 0, 0.008, 0), (0.021031, 0, -0.164582, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Cube "Cube" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(1, 0, 0)]
                float[] primvars:displayOpacity = [0.5]
            }
        }

        def Xform "cabinet5_drawer3_handle"
        {
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 2.220446049250313e-16, 1, 0), (0, -1, 2.220446049250313e-16, 0), (-0.26888186, 0.00102875, 0.15027037, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Xform "cabinet5_drawer3_handle_visual_0" (
                prepend references = @./../meshes/usd/visual/SM_Kitchen_Handle.usda@</SM_Kitchen_Handle>
            )
            {
                matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]

                over "SM_Kitchen_Handle" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    rel material:binding = </_materials/_Game_Materials_Laborraum_M_Metal_Brushed_M_Metal_Brushed_003>
                }
            }

            def Xform "cabinet5_drawer3_handle_collision_0" (
                prepend apiSchemas = ["PhysicsMassAPI"]
            )
            {
                point3f physics:centerOfMass = (0, 0, 0)
                float physics:density = 100
                float3 physics:diagonalInertia = (-5.4504128, -3.830229, 12.159611)
                float physics:mass = 1.0757052
                quatf physics:principalAxes = (-0.2230673, -0.13975434, 0.3614801, 0.8944506)
                matrix4d xformOp:transform = ( (0.01, 0, 0, 0), (0, 0.0065, 0, 0), (0, 0, 0.0065, 0), (0.0164985, 0, 0.08, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]

                def Cube "Cube" (
                    prepend apiSchemas = ["PhysicsCollisionAPI"]
                )
                {
                    float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                    bool physics:collisionEnabled = 1
                    color3f[] primvars:displayColor = [(1, 0, 0)]
                    float[] primvars:displayOpacity = [0.5]
                }
            }

            def Xform "cabinet5_drawer3_handle_collision_1" (
                prepend apiSchemas = ["PhysicsMassAPI"]
            )
            {
                point3f physics:centerOfMass = (0, 0, 0)
                float physics:density = 100
                float3 physics:diagonalInertia = (-5.4504128, -3.830229, 12.159611)
                float physics:mass = 1.0757052
                quatf physics:principalAxes = (-0.2230673, -0.13975434, 0.3614801, 0.8944506)
                matrix4d xformOp:transform = ( (0.01, 0, 0, 0), (0, 0.0065, 0, 0), (0, 0, 0.0065, 0), (0.0164985, 0, -0.08, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]

                def Cube "Cube" (
                    prepend apiSchemas = ["PhysicsCollisionAPI"]
                )
                {
                    float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                    bool physics:collisionEnabled = 1
                    color3f[] primvars:displayColor = [(1, 0, 0)]
                    float[] primvars:displayOpacity = [0.5]
                }
            }

            def Xform "cabinet5_drawer3_handle_collision_2" (
                prepend apiSchemas = ["PhysicsMassAPI"]
            )
            {
                point3f physics:centerOfMass = (0, 0, 0)
                float physics:density = 100
                float3 physics:diagonalInertia = (-5.4504128, -3.830229, 12.159611)
                float physics:mass = 1.0757052
                quatf physics:principalAxes = (-0.2230673, -0.13975434, 0.3614801, 0.8944506)
                matrix4d xformOp:transform = ( (0.0065, 0, 0, 0), (0, 0.0065, 0, 0), (0, 0, 0.086516, 0), (0, 0, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]

                def Cube "Cube" (
                    prepend apiSchemas = ["PhysicsCollisionAPI"]
                )
                {
                    float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                    bool physics:collisionEnabled = 1
                    color3f[] primvars:displayColor = [(1, 0, 0)]
                    float[] primvars:displayOpacity = [0.5]
                }
            }
        }
    }

    def Xform "cabinet6_drawer1" (
        prepend apiSchemas = ["PhysicsRigidBodyAPI"]
    )
    {
        bool physics:rigidBodyEnabled = 1
        matrix4d xformOp:transform = ( (-1, 1.2246467991473532e-16, 0, 0), (-1.2246467991473532e-16, -1, 0, 0), (0, 0, 1, 0), (0.32806206000000004, 3.58416499, 0.82598503, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]

        def Xform "cabinet6_drawer1_visual_0" (
            prepend references = @./../meshes/usd/visual/SM_Kitchen_06_Drawer_01.usda@</SM_Kitchen_06_Drawer_01>
        )
        {
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            over "SM_Kitchen_06_Base_Drawer_01" (
                prepend apiSchemas = ["MaterialBindingAPI"]
            )
            {
                rel material:binding = </_materials/_Game_Materials_Laborraum_M_Drawer_Mat_M_Drawer_Mat_007>

                over "_Game_Materials_Laborraum_M_Metal_Brushed_M_Metal_Brushed_010" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    rel material:binding = </_materials/_Game_Materials_Laborraum_M_Metal_Brushed_M_Metal_Brushed_010>
                }

                over "_Game_Materials_Laborraum_M_Kitchen_Fronts_M_Kitchen_Fronts_016" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    rel material:binding = </_materials/_Game_Materials_Laborraum_M_Kitchen_Fronts_M_Kitchen_Fronts_016>
                }

                over "_Game_Materials_Laborraum_M_Plastic_White_M_Plastic_White_025" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    rel material:binding = </_materials/_Game_Materials_Laborraum_M_Plastic_White_M_Plastic_White_025>
                }

                over "_Game_Materials_Laborraum_M_Drawer_Mat_M_Drawer_Mat_007" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    rel material:binding = </_materials/_Game_Materials_Laborraum_M_Drawer_Mat_M_Drawer_Mat_007>
                }
            }
        }

        def Xform "cabinet6_drawer1_collision_0" (
            prepend apiSchemas = ["PhysicsMassAPI"]
        )
        {
            point3f physics:centerOfMass = (0, 0, 0)
            float physics:density = 100
            float3 physics:diagonalInertia = (-2.1781926, -1.1654099, 3.8509607)
            float physics:mass = 0.4815126
            quatf physics:principalAxes = (-0.5694668, -0.20332551, 0.77424425, -0.18684776)
            matrix4d xformOp:transform = ( (0.245507, 0, 0, 0), (0, 0.008, 0, 0), (0, 0, 0.042633, 0), (0.021031, 0.170562, -0.01336, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Cube "Cube" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(1, 0, 0)]
                float[] primvars:displayOpacity = [0.5]
            }
        }

        def Xform "cabinet6_drawer1_collision_1" (
            prepend apiSchemas = ["PhysicsMassAPI"]
        )
        {
            point3f physics:centerOfMass = (0, 0, 0)
            float physics:density = 100
            float3 physics:diagonalInertia = (-2.1781926, -1.1654099, 3.8509607)
            float physics:mass = 0.4815126
            quatf physics:principalAxes = (-0.5694668, -0.20332551, 0.77424425, -0.18684776)
            matrix4d xformOp:transform = ( (0.245507, 0, 0, 0), (0, 0.008, 0, 0), (0, 0, 0.042633, 0), (0.021031, -0.170562, -0.01336, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Cube "Cube" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(1, 0, 0)]
                float[] primvars:displayOpacity = [0.5]
            }
        }

        def Xform "cabinet6_drawer1_collision_2" (
            prepend apiSchemas = ["PhysicsMassAPI"]
        )
        {
            point3f physics:centerOfMass = (0, 0, 0)
            float physics:density = 100
            float3 physics:diagonalInertia = (-2.1781926, -1.1654099, 3.8509607)
            float physics:mass = 0.4815126
            quatf physics:principalAxes = (-0.5694668, -0.20332551, 0.77424425, -0.18684776)
            matrix4d xformOp:transform = ( (0.0095, 0, 0, 0), (0, 0.198867, 0, 0), (0, 0, 0.064993, 0), (-0.233977, 0, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Cube "Cube" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(1, 0, 0)]
                float[] primvars:displayOpacity = [0.5]
            }
        }

        def Xform "cabinet6_drawer1_collision_3" (
            prepend apiSchemas = ["PhysicsMassAPI"]
        )
        {
            point3f physics:centerOfMass = (0, 0, 0)
            float physics:density = 100
            float3 physics:diagonalInertia = (-2.1781926, -1.1654099, 3.8509607)
            float physics:mass = 0.4815126
            quatf physics:principalAxes = (-0.5694668, -0.20332551, 0.77424425, -0.18684776)
            matrix4d xformOp:transform = ( (0.008, 0, 0, 0), (0, 0.178822, 0, 0), (0, 0, 0.042633, 0), (0.260372, 0, -0.01336, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Cube "Cube" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(1, 0, 0)]
                float[] primvars:displayOpacity = [0.5]
            }
        }

        def Xform "cabinet6_drawer1_collision_4" (
            prepend apiSchemas = ["PhysicsMassAPI"]
        )
        {
            point3f physics:centerOfMass = (0, 0, 0)
            float physics:density = 100
            float3 physics:diagonalInertia = (-2.1781926, -1.1654099, 3.8509607)
            float physics:mass = 0.4815126
            quatf physics:principalAxes = (-0.5694668, -0.20332551, 0.77424425, -0.18684776)
            matrix4d xformOp:transform = ( (0.245507, 0, 0, 0), (0, 0.178822, 0, 0), (0, 0, 0.0075, 0), (0.021031, 0, -0.047595, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Cube "Cube" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(1, 0, 0)]
                float[] primvars:displayOpacity = [0.5]
            }
        }

        def Xform "cabinet6_drawer1_handle"
        {
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 2.220446049250313e-16, 1, 0), (0, -1, 2.220446049250313e-16, 0), (-0.26662336, -0.00124599, 0.0172039, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Xform "cabinet6_drawer1_handle_visual_0" (
                prepend references = @./../meshes/usd/visual/SM_Kitchen_Handle.usda@</SM_Kitchen_Handle>
            )
            {
                matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]

                over "SM_Kitchen_Handle" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    rel material:binding = </_materials/_Game_Materials_Laborraum_M_Metal_Brushed_M_Metal_Brushed_003>
                }
            }

            def Xform "cabinet6_drawer1_handle_collision_0" (
                prepend apiSchemas = ["PhysicsMassAPI"]
            )
            {
                point3f physics:centerOfMass = (0, 0, 0)
                float physics:density = 100
                float3 physics:diagonalInertia = (-2.1781926, -1.1654099, 3.8509607)
                float physics:mass = 0.4815126
                quatf physics:principalAxes = (-0.5694668, -0.20332551, 0.77424425, -0.18684776)
                matrix4d xformOp:transform = ( (0.01, 0, 0, 0), (0, 0.0065, 0, 0), (0, 0, 0.0065, 0), (0.0164985, 0, 0.08, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]

                def Cube "Cube" (
                    prepend apiSchemas = ["PhysicsCollisionAPI"]
                )
                {
                    float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                    bool physics:collisionEnabled = 1
                    color3f[] primvars:displayColor = [(1, 0, 0)]
                    float[] primvars:displayOpacity = [0.5]
                }
            }

            def Xform "cabinet6_drawer1_handle_collision_1" (
                prepend apiSchemas = ["PhysicsMassAPI"]
            )
            {
                point3f physics:centerOfMass = (0, 0, 0)
                float physics:density = 100
                float3 physics:diagonalInertia = (-2.1781926, -1.1654099, 3.8509607)
                float physics:mass = 0.4815126
                quatf physics:principalAxes = (-0.5694668, -0.20332551, 0.77424425, -0.18684776)
                matrix4d xformOp:transform = ( (0.01, 0, 0, 0), (0, 0.0065, 0, 0), (0, 0, 0.0065, 0), (0.0164985, 0, -0.08, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]

                def Cube "Cube" (
                    prepend apiSchemas = ["PhysicsCollisionAPI"]
                )
                {
                    float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                    bool physics:collisionEnabled = 1
                    color3f[] primvars:displayColor = [(1, 0, 0)]
                    float[] primvars:displayOpacity = [0.5]
                }
            }

            def Xform "cabinet6_drawer1_handle_collision_2" (
                prepend apiSchemas = ["PhysicsMassAPI"]
            )
            {
                point3f physics:centerOfMass = (0, 0, 0)
                float physics:density = 100
                float3 physics:diagonalInertia = (-2.1781926, -1.1654099, 3.8509607)
                float physics:mass = 0.4815126
                quatf physics:principalAxes = (-0.5694668, -0.20332551, 0.77424425, -0.18684776)
                matrix4d xformOp:transform = ( (0.0065, 0, 0, 0), (0, 0.0065, 0, 0), (0, 0, 0.086516, 0), (0, 0, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]

                def Cube "Cube" (
                    prepend apiSchemas = ["PhysicsCollisionAPI"]
                )
                {
                    float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                    bool physics:collisionEnabled = 1
                    color3f[] primvars:displayColor = [(1, 0, 0)]
                    float[] primvars:displayOpacity = [0.5]
                }
            }
        }
    }

    def Xform "cabinet6_drawer2" (
        prepend apiSchemas = ["PhysicsRigidBodyAPI"]
    )
    {
        bool physics:rigidBodyEnabled = 1
        matrix4d xformOp:transform = ( (-1, 1.2246467991473532e-16, 0, 0), (-1.2246467991473532e-16, -1, 0, 0), (0, 0, 1, 0), (0.32782295, 3.58458247, 0.62717545, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]

        def Xform "cabinet6_drawer2_visual_0" (
            prepend references = @./../meshes/usd/visual/SM_Kitchen_06_Drawer_02.usda@</SM_Kitchen_06_Drawer_02>
        )
        {
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            over "SM_Kitchen_06_Base_Drawer_02" (
                prepend apiSchemas = ["MaterialBindingAPI"]
            )
            {
                rel material:binding = </_materials/_Game_Materials_Laborraum_M_Drawer_Mat_M_Drawer_Mat_008>

                over "_Game_Materials_Laborraum_M_Metal_Brushed_M_Metal_Brushed_011" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    rel material:binding = </_materials/_Game_Materials_Laborraum_M_Metal_Brushed_M_Metal_Brushed_011>
                }

                over "_Game_Materials_Laborraum_M_Kitchen_Fronts_M_Kitchen_Fronts_017" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    rel material:binding = </_materials/_Game_Materials_Laborraum_M_Kitchen_Fronts_M_Kitchen_Fronts_017>
                }

                over "_Game_Materials_Laborraum_M_Plastic_White_M_Plastic_White_026" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    rel material:binding = </_materials/_Game_Materials_Laborraum_M_Plastic_White_M_Plastic_White_026>
                }

                over "_Game_Materials_Laborraum_M_Drawer_Mat_M_Drawer_Mat_008" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    rel material:binding = </_materials/_Game_Materials_Laborraum_M_Drawer_Mat_M_Drawer_Mat_008>
                }
            }
        }

        def Xform "cabinet6_drawer2_collision_0" (
            prepend apiSchemas = ["PhysicsMassAPI"]
        )
        {
            point3f physics:centerOfMass = (0, 0, 0)
            float physics:density = 100
            float3 physics:diagonalInertia = (-2.5775924, -1.8522997, 5.835665)
            float physics:mass = 0.6502114
            quatf physics:principalAxes = (-0.53464806, -0.20126691, 0.8020559, -0.17421086)
            matrix4d xformOp:transform = ( (0.245507, 0, 0, 0), (0, 0.008, 0, 0), (0, 0, 0.011649, 0), (0.021031, 0.170562, 0.041246, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Cube "Cube" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(1, 0, 0)]
                float[] primvars:displayOpacity = [0.5]
            }
        }

        def Xform "cabinet6_drawer2_collision_1" (
            prepend apiSchemas = ["PhysicsMassAPI"]
        )
        {
            point3f physics:centerOfMass = (0, 0, 0)
            float physics:density = 100
            float3 physics:diagonalInertia = (-2.5775924, -1.8522997, 5.835665)
            float physics:mass = 0.6502114
            quatf physics:principalAxes = (-0.53464806, -0.20126691, 0.8020559, -0.17421086)
            matrix4d xformOp:transform = ( (0.245507, 0, 0, 0), (0, 0.008, 0, 0), (0, 0, 0.011649, 0), (0.021031, -0.170562, 0.041246, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Cube "Cube" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(1, 0, 0)]
                float[] primvars:displayOpacity = [0.5]
            }
        }

        def Xform "cabinet6_drawer2_collision_2" (
            prepend apiSchemas = ["PhysicsMassAPI"]
        )
        {
            point3f physics:centerOfMass = (0, 0, 0)
            float physics:density = 100
            float3 physics:diagonalInertia = (-2.5775924, -1.8522997, 5.835665)
            float physics:mass = 0.6502114
            quatf physics:principalAxes = (-0.53464806, -0.20126691, 0.8020559, -0.17421086)
            matrix4d xformOp:transform = ( (0.245507, 0, 0, 0), (0, 0.008, 0, 0), (0, 0, 0.041748, 0), (0.021031, 0.170562, -0.078968, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Cube "Cube" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(1, 0, 0)]
                float[] primvars:displayOpacity = [0.5]
            }
        }

        def Xform "cabinet6_drawer2_collision_3" (
            prepend apiSchemas = ["PhysicsMassAPI"]
        )
        {
            point3f physics:centerOfMass = (0, 0, 0)
            float physics:density = 100
            float3 physics:diagonalInertia = (-2.5775924, -1.8522997, 5.835665)
            float physics:mass = 0.6502114
            quatf physics:principalAxes = (-0.53464806, -0.20126691, 0.8020559, -0.17421086)
            matrix4d xformOp:transform = ( (0.245507, 0, 0, 0), (0, 0.008, 0, 0), (0, 0, 0.041748, 0), (0.021031, -0.170562, -0.078968, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Cube "Cube" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(1, 0, 0)]
                float[] primvars:displayOpacity = [0.5]
            }
        }

        def Xform "cabinet6_drawer2_collision_4" (
            prepend apiSchemas = ["PhysicsMassAPI"]
        )
        {
            point3f physics:centerOfMass = (0, 0, 0)
            float physics:density = 100
            float3 physics:diagonalInertia = (-2.5775924, -1.8522997, 5.835665)
            float physics:mass = 0.6502114
            quatf physics:principalAxes = (-0.53464806, -0.20126691, 0.8020559, -0.17421086)
            matrix4d xformOp:transform = ( (0.0095, 0, 0, 0), (0, 0.198867, 0, 0), (0, 0, 0.131375, 0), (-0.233977, 0, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Cube "Cube" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(1, 0, 0)]
                float[] primvars:displayOpacity = [0.5]
            }
        }

        def Xform "cabinet6_drawer2_collision_5" (
            prepend apiSchemas = ["PhysicsMassAPI"]
        )
        {
            point3f physics:centerOfMass = (0, 0, 0)
            float physics:density = 100
            float3 physics:diagonalInertia = (-2.5775924, -1.8522997, 5.835665)
            float physics:mass = 0.6502114
            quatf physics:principalAxes = (-0.53464806, -0.20126691, 0.8020559, -0.17421086)
            matrix4d xformOp:transform = ( (0.008, 0, 0, 0), (0, 0.178822, 0, 0), (0, 0, 0.084491, 0), (0.260372, 0, -0.037996, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Cube "Cube" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(1, 0, 0)]
                float[] primvars:displayOpacity = [0.5]
            }
        }

        def Xform "cabinet6_drawer2_collision_6" (
            prepend apiSchemas = ["PhysicsMassAPI"]
        )
        {
            point3f physics:centerOfMass = (0, 0, 0)
            float physics:density = 100
            float3 physics:diagonalInertia = (-2.5775924, -1.8522997, 5.835665)
            float physics:mass = 0.6502114
            quatf physics:principalAxes = (-0.53464806, -0.20126691, 0.8020559, -0.17421086)
            matrix4d xformOp:transform = ( (0.245507, 0, 0, 0), (0, 0.178822, 0, 0), (0, 0, 0.008, 0), (0.021031, 0, -0.113735, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Cube "Cube" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(1, 0, 0)]
                float[] primvars:displayOpacity = [0.5]
            }
        }

        def Xform "cabinet6_drawer2_handle"
        {
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 2.220446049250313e-16, 1, 0), (0, -1, 2.220446049250313e-16, 0), (-0.26686237, -0.00397854, 0.08541794, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Xform "cabinet6_drawer2_handle_visual_0" (
                prepend references = @./../meshes/usd/visual/SM_Kitchen_Handle.usda@</SM_Kitchen_Handle>
            )
            {
                matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]

                over "SM_Kitchen_Handle" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    rel material:binding = </_materials/_Game_Materials_Laborraum_M_Metal_Brushed_M_Metal_Brushed_003>
                }
            }

            def Xform "cabinet6_drawer2_handle_collision_0" (
                prepend apiSchemas = ["PhysicsMassAPI"]
            )
            {
                point3f physics:centerOfMass = (0, 0, 0)
                float physics:density = 100
                float3 physics:diagonalInertia = (-2.5775924, -1.8522997, 5.835665)
                float physics:mass = 0.6502114
                quatf physics:principalAxes = (-0.53464806, -0.20126691, 0.8020559, -0.17421086)
                matrix4d xformOp:transform = ( (0.01, 0, 0, 0), (0, 0.0065, 0, 0), (0, 0, 0.0065, 0), (0.0164985, 0, 0.08, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]

                def Cube "Cube" (
                    prepend apiSchemas = ["PhysicsCollisionAPI"]
                )
                {
                    float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                    bool physics:collisionEnabled = 1
                    color3f[] primvars:displayColor = [(1, 0, 0)]
                    float[] primvars:displayOpacity = [0.5]
                }
            }

            def Xform "cabinet6_drawer2_handle_collision_1" (
                prepend apiSchemas = ["PhysicsMassAPI"]
            )
            {
                point3f physics:centerOfMass = (0, 0, 0)
                float physics:density = 100
                float3 physics:diagonalInertia = (-2.5775924, -1.8522997, 5.835665)
                float physics:mass = 0.6502114
                quatf physics:principalAxes = (-0.53464806, -0.20126691, 0.8020559, -0.17421086)
                matrix4d xformOp:transform = ( (0.01, 0, 0, 0), (0, 0.0065, 0, 0), (0, 0, 0.0065, 0), (0.0164985, 0, -0.08, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]

                def Cube "Cube" (
                    prepend apiSchemas = ["PhysicsCollisionAPI"]
                )
                {
                    float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                    bool physics:collisionEnabled = 1
                    color3f[] primvars:displayColor = [(1, 0, 0)]
                    float[] primvars:displayOpacity = [0.5]
                }
            }

            def Xform "cabinet6_drawer2_handle_collision_2" (
                prepend apiSchemas = ["PhysicsMassAPI"]
            )
            {
                point3f physics:centerOfMass = (0, 0, 0)
                float physics:density = 100
                float3 physics:diagonalInertia = (-2.5775924, -1.8522997, 5.835665)
                float physics:mass = 0.6502114
                quatf physics:principalAxes = (-0.53464806, -0.20126691, 0.8020559, -0.17421086)
                matrix4d xformOp:transform = ( (0.0065, 0, 0, 0), (0, 0.0065, 0, 0), (0, 0, 0.086516, 0), (0, 0, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]

                def Cube "Cube" (
                    prepend apiSchemas = ["PhysicsCollisionAPI"]
                )
                {
                    float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                    bool physics:collisionEnabled = 1
                    color3f[] primvars:displayColor = [(1, 0, 0)]
                    float[] primvars:displayOpacity = [0.5]
                }
            }
        }
    }

    def Xform "cabinet6_drawer3" (
        prepend apiSchemas = ["PhysicsRigidBodyAPI"]
    )
    {
        bool physics:rigidBodyEnabled = 1
        matrix4d xformOp:transform = ( (-1, 1.2246467991473532e-16, 0, 0), (-1.2246467991473532e-16, -1, 0, 0), (0, 0, 1, 0), (0.3275637, 3.5845330300000002, 0.297298, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]

        def Xform "cabinet6_drawer3_visual_0" (
            prepend references = @./../meshes/usd/visual/SM_Kitchen_06_Drawer_03.usda@</SM_Kitchen_06_Drawer_03>
        )
        {
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            over "SM_Kitchen_06_Base_Drawer_03" (
                prepend apiSchemas = ["MaterialBindingAPI"]
            )
            {
                rel material:binding = </_materials/_Game_Materials_Laborraum_M_Drawer_Mat_M_Drawer_Mat_009>

                over "_Game_Materials_Laborraum_M_Metal_Chrome_M_Metal_Chrome_019" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    rel material:binding = </_materials/_Game_Materials_Laborraum_M_Metal_Chrome_M_Metal_Chrome_019>
                }

                over "_Game_Materials_Laborraum_M_Kitchen_Fronts_M_Kitchen_Fronts_018" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    rel material:binding = </_materials/_Game_Materials_Laborraum_M_Kitchen_Fronts_M_Kitchen_Fronts_018>
                }

                over "_Game_Materials_Laborraum_M_Plastic_White_M_Plastic_White_027" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    rel material:binding = </_materials/_Game_Materials_Laborraum_M_Plastic_White_M_Plastic_White_027>
                }

                over "_Game_Materials_Laborraum_M_Drawer_Mat_M_Drawer_Mat_009" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    rel material:binding = </_materials/_Game_Materials_Laborraum_M_Drawer_Mat_M_Drawer_Mat_009>
                }
            }
        }

        def Xform "cabinet6_drawer3_collision_0" (
            prepend apiSchemas = ["PhysicsMassAPI"]
        )
        {
            point3f physics:centerOfMass = (0, 0, 0)
            float physics:density = 100
            float3 physics:diagonalInertia = (-2.645346, -2.4815633, 7.133539)
            float physics:mass = 0.750759
            quatf physics:principalAxes = (-0.5118642, -0.4610361, 0.72486675, 0.0029947215)
            matrix4d xformOp:transform = ( (0.245507, 0, 0, 0), (0, 0.008, 0, 0), (0, 0, 0.011638, 0), (0.021031, 0.170562, -0.00926, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Cube "Cube" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(1, 0, 0)]
                float[] primvars:displayOpacity = [0.5]
            }
        }

        def Xform "cabinet6_drawer3_collision_1" (
            prepend apiSchemas = ["PhysicsMassAPI"]
        )
        {
            point3f physics:centerOfMass = (0, 0, 0)
            float physics:density = 100
            float3 physics:diagonalInertia = (-2.645346, -2.4815633, 7.133539)
            float physics:mass = 0.750759
            quatf physics:principalAxes = (-0.5118642, -0.4610361, 0.72486675, 0.0029947215)
            matrix4d xformOp:transform = ( (0.245507, 0, 0, 0), (0, 0.008, 0, 0), (0, 0, 0.011638, 0), (0.021031, -0.170562, -0.00926, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Cube "Cube" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(1, 0, 0)]
                float[] primvars:displayOpacity = [0.5]
            }
        }

        def Xform "cabinet6_drawer3_collision_2" (
            prepend apiSchemas = ["PhysicsMassAPI"]
        )
        {
            point3f physics:centerOfMass = (0, 0, 0)
            float physics:density = 100
            float3 physics:diagonalInertia = (-2.645346, -2.4815633, 7.133539)
            float physics:mass = 0.750759
            quatf physics:principalAxes = (-0.5118642, -0.4610361, 0.72486675, 0.0029947215)
            matrix4d xformOp:transform = ( (0.245507, 0, 0, 0), (0, 0.008, 0, 0), (0, 0, 0.041711, 0), (0.021031, 0.170562, -0.129424, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Cube "Cube" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(1, 0, 0)]
                float[] primvars:displayOpacity = [0.5]
            }
        }

        def Xform "cabinet6_drawer3_collision_3" (
            prepend apiSchemas = ["PhysicsMassAPI"]
        )
        {
            point3f physics:centerOfMass = (0, 0, 0)
            float physics:density = 100
            float3 physics:diagonalInertia = (-2.645346, -2.4815633, 7.133539)
            float physics:mass = 0.750759
            quatf physics:principalAxes = (-0.5118642, -0.4610361, 0.72486675, 0.0029947215)
            matrix4d xformOp:transform = ( (0.245507, 0, 0, 0), (0, 0.008, 0, 0), (0, 0, 0.041711, 0), (0.021031, -0.170562, -0.129424, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Cube "Cube" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(1, 0, 0)]
                float[] primvars:displayOpacity = [0.5]
            }
        }

        def Xform "cabinet6_drawer3_collision_4" (
            prepend apiSchemas = ["PhysicsMassAPI"]
        )
        {
            point3f physics:centerOfMass = (0, 0, 0)
            float physics:density = 100
            float3 physics:diagonalInertia = (-2.645346, -2.4815633, 7.133539)
            float physics:mass = 0.750759
            quatf physics:principalAxes = (-0.5118642, -0.4610361, 0.72486675, 0.0029947215)
            matrix4d xformOp:transform = ( (0.0095, 0, 0, 0), (0, 0.198867, 0, 0), (0, 0, 0.197867, 0), (-0.233977, 0, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Cube "Cube" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(1, 0, 0)]
                float[] primvars:displayOpacity = [0.5]
            }
        }

        def Xform "cabinet6_drawer3_collision_5" (
            prepend apiSchemas = ["PhysicsMassAPI"]
        )
        {
            point3f physics:centerOfMass = (0, 0, 0)
            float physics:density = 100
            float3 physics:diagonalInertia = (-2.645346, -2.4815633, 7.133539)
            float physics:mass = 0.750759
            quatf physics:principalAxes = (-0.5118642, -0.4610361, 0.72486675, 0.0029947215)
            matrix4d xformOp:transform = ( (0.008, 0, 0, 0), (0, 0.178822, 0, 0), (0, 0, 0.084105, 0), (0.260372, 0, -0.088821, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Cube "Cube" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(1, 0, 0)]
                float[] primvars:displayOpacity = [0.5]
            }
        }

        def Xform "cabinet6_drawer3_collision_6" (
            prepend apiSchemas = ["PhysicsMassAPI"]
        )
        {
            point3f physics:centerOfMass = (0, 0, 0)
            float physics:density = 100
            float3 physics:diagonalInertia = (-2.645346, -2.4815633, 7.133539)
            float physics:mass = 0.750759
            quatf physics:principalAxes = (-0.5118642, -0.4610361, 0.72486675, 0.0029947215)
            matrix4d xformOp:transform = ( (0.245507, 0, 0, 0), (0, 0.178822, 0, 0), (0, 0, 0.008, 0), (0.021031, 0, -0.164582, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Cube "Cube" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(1, 0, 0)]
                float[] primvars:displayOpacity = [0.5]
            }
        }

        def Xform "cabinet6_drawer3_handle"
        {
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 2.220446049250313e-16, 1, 0), (0, -1, 2.220446049250313e-16, 0), (-0.26712164, -0.00402777, 0.15116583, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Xform "cabinet6_drawer3_handle_visual_0" (
                prepend references = @./../meshes/usd/visual/SM_Kitchen_Handle.usda@</SM_Kitchen_Handle>
            )
            {
                matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]

                over "SM_Kitchen_Handle" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    rel material:binding = </_materials/_Game_Materials_Laborraum_M_Metal_Brushed_M_Metal_Brushed_003>
                }
            }

            def Xform "cabinet6_drawer3_handle_collision_0" (
                prepend apiSchemas = ["PhysicsMassAPI"]
            )
            {
                point3f physics:centerOfMass = (0, 0, 0)
                float physics:density = 100
                float3 physics:diagonalInertia = (-2.645346, -2.4815633, 7.133539)
                float physics:mass = 0.750759
                quatf physics:principalAxes = (-0.5118642, -0.4610361, 0.72486675, 0.0029947215)
                matrix4d xformOp:transform = ( (0.01, 0, 0, 0), (0, 0.0065, 0, 0), (0, 0, 0.0065, 0), (0.0164985, 0, 0.08, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]

                def Cube "Cube" (
                    prepend apiSchemas = ["PhysicsCollisionAPI"]
                )
                {
                    float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                    bool physics:collisionEnabled = 1
                    color3f[] primvars:displayColor = [(1, 0, 0)]
                    float[] primvars:displayOpacity = [0.5]
                }
            }

            def Xform "cabinet6_drawer3_handle_collision_1" (
                prepend apiSchemas = ["PhysicsMassAPI"]
            )
            {
                point3f physics:centerOfMass = (0, 0, 0)
                float physics:density = 100
                float3 physics:diagonalInertia = (-2.645346, -2.4815633, 7.133539)
                float physics:mass = 0.750759
                quatf physics:principalAxes = (-0.5118642, -0.4610361, 0.72486675, 0.0029947215)
                matrix4d xformOp:transform = ( (0.01, 0, 0, 0), (0, 0.0065, 0, 0), (0, 0, 0.0065, 0), (0.0164985, 0, -0.08, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]

                def Cube "Cube" (
                    prepend apiSchemas = ["PhysicsCollisionAPI"]
                )
                {
                    float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                    bool physics:collisionEnabled = 1
                    color3f[] primvars:displayColor = [(1, 0, 0)]
                    float[] primvars:displayOpacity = [0.5]
                }
            }

            def Xform "cabinet6_drawer3_handle_collision_2" (
                prepend apiSchemas = ["PhysicsMassAPI"]
            )
            {
                point3f physics:centerOfMass = (0, 0, 0)
                float physics:density = 100
                float3 physics:diagonalInertia = (-2.645346, -2.4815633, 7.133539)
                float physics:mass = 0.750759
                quatf physics:principalAxes = (-0.5118642, -0.4610361, 0.72486675, 0.0029947215)
                matrix4d xformOp:transform = ( (0.0065, 0, 0, 0), (0, 0.0065, 0, 0), (0, 0, 0.086516, 0), (0, 0, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]

                def Cube "Cube" (
                    prepend apiSchemas = ["PhysicsCollisionAPI"]
                )
                {
                    float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                    bool physics:collisionEnabled = 1
                    color3f[] primvars:displayColor = [(1, 0, 0)]
                    float[] primvars:displayOpacity = [0.5]
                }
            }
        }
    }

    def Xform "counter_sink_tap_switch" (
        prepend apiSchemas = ["PhysicsRigidBodyAPI"]
    )
    {
        bool physics:rigidBodyEnabled = 1
        matrix4d xformOp:transform = ( (-1, 1.2246467991473532e-16, 0, 0), (-1.2246467991473532e-16, -1, 0, 0), (0, 0, 1, 0), (2.7543496800000002, 3.3144023799999998, 1.0133168, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]

        def Xform "counter_sink_tap_switch_collision_0" (
            prepend apiSchemas = ["PhysicsMassAPI"]
        )
        {
            point3f physics:centerOfMass = (0, 0, 0)
            float physics:density = 100
            float3 physics:diagonalInertia = (-0.04881712, -0.01974493, 0.13090459)
            float physics:mass = 0.044203907
            quatf physics:principalAxes = (0.36375836, 0.67893517, -0.6171323, -0.1608559)
            matrix4d xformOp:transform = ( (0.0005, 0, 0, 0), (0, 0.0005, 0, 0), (0, 0, 0.0005, 0), (0, 0, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Cube "Cube" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(1, 0, 0)]
                float[] primvars:displayOpacity = [0.5]
            }
        }

        def PhysicsRevoluteJoint "counter_sink_switch_joint"
        {
            uniform token physics:axis = "Z"
            rel physics:body0 = </apartment_root/counter_sink_tap_switch>
            rel physics:body1 = </apartment_root/counter_sink_tap>
            bool physics:collisionEnabled = 0
            point3f physics:localPos0 = (0, 0, 0)
            point3f physics:localPos1 = (0, 0, 0)
            quatf physics:localRot0 = (0.7071068, 0, -0.7071068, 0)
            quatf physics:localRot1 = (0.7071068, 0, -0.7071068, 0)
            float physics:lowerLimit = 0
            float physics:upperLimit = 22.5
        }
    }

    def Xform "counter_sink_tap" (
        prepend apiSchemas = ["PhysicsRigidBodyAPI"]
    )
    {
        bool physics:rigidBodyEnabled = 1
        matrix4d xformOp:transform = ( (-1, 1.2246467991473532e-16, 0, 0), (-1.2246467991473532e-16, -1, 0, 0), (0, 0, 1, 0), (2.7543496800000002, 3.3144023799999998, 1.0133168, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]

        def Xform "counter_sink_tap_visual_0" (
            prepend references = @./../meshes/usd/visual/SM_Counter_Sink_Tap.usda@</SM_Counter_Sink_Tap>
        )
        {
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            over "SM_Counter_Sink_Tap_001" (
                prepend apiSchemas = ["MaterialBindingAPI"]
            )
            {
                rel material:binding = </_materials/_Game_Materials_Laborraum_M_Metal_Chrome_Matte_M_Metal_Chro_001>

                over "_Game_Materials_Laborraum_M_Metal_Fridge_M_Metal_Fridge" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    rel material:binding = </_materials/_Game_Materials_Laborraum_M_Metal_Fridge_M_Metal_Fridge>
                }

                over "_Game_Materials_Laborraum_M_Red_M_Red" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    rel material:binding = </_materials/_Game_Materials_Laborraum_M_Red_M_Red>
                }

                over "_Game_Materials_Laborraum_M_Blue_M_Blue" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    rel material:binding = </_materials/_Game_Materials_Laborraum_M_Blue_M_Blue>
                }

                over "_Game_Materials_Laborraum_M_Metal_Chrome_Matte_M_Metal_Chro_001" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    rel material:binding = </_materials/_Game_Materials_Laborraum_M_Metal_Chrome_Matte_M_Metal_Chro_001>
                }
            }
        }

        def Xform "counter_sink_tap_collision_0" (
            prepend apiSchemas = ["PhysicsMassAPI"]
        )
        {
            point3f physics:centerOfMass = (0, 0, 0)
            float physics:density = 100
            float3 physics:diagonalInertia = (-0.0002485918, -0.00018028377, 0.0007619358)
            float physics:mass = 0.003560191
            quatf physics:principalAxes = (0.1391694, 0.9153549, 0.2899138, -0.24229577)
            matrix4d xformOp:transform = ( (0, 2.220446049250313e-16, -1, 0), (-1, 2.220446049250313e-16, 0, 0), (2.220446049250313e-16, 1, 2.220446049250313e-16, 0), (0, 0.007501, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Cylinder "Cylinder" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                float3[] extent = [(-0.022432, -0.022432, -0.012197), (0.022432, 0.022432, 0.012197)]
                double height = 0.024394
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(1, 0, 0)]
                float[] primvars:displayOpacity = [0.5]
                double radius = 0.022432
            }
        }

        def Xform "counter_sink_tap_collision_1" (
            prepend apiSchemas = ["PhysicsMassAPI"]
        )
        {
            point3f physics:centerOfMass = (0, 0, 0)
            float physics:density = 100
            float3 physics:diagonalInertia = (-0.0002485918, -0.00018028377, 0.0007619358)
            float physics:mass = 0.003560191
            quatf physics:principalAxes = (0.1391694, 0.9153549, 0.2899138, -0.24229577)
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0.012886, 0.048989, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Cylinder "Cylinder" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                float3[] extent = [(-0.005, -0.005, -0.027997), (0.005, 0.005, 0.027997)]
                double height = 0.055994
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(1, 0, 0)]
                float[] primvars:displayOpacity = [0.5]
                double radius = 0.005
            }
        }
    }

    def Xform "dishwasher_front" (
        prepend apiSchemas = ["PhysicsRigidBodyAPI"]
    )
    {
        bool physics:rigidBodyEnabled = 1
        matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 2.220446049250313e-16, -1, 0), (0, 1, 2.220446049250313e-16, 0), (2.34807175, 3.96386526, 0.16955089, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]

        def Xform "dishwasher_front_visual_0" (
            prepend references = @./../meshes/usd/visual/SM_Dishwasher_Front.usda@</SM_Dishwasher_Front>
        )
        {
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            over "SM_Dishwasher_Front" (
                prepend apiSchemas = ["MaterialBindingAPI"]
            )
            {
                rel material:binding = </_materials/_Game_Materials_Laborraum_M_Kitchen_Fronts_M_Kitchen_Fronts>

                over "_Game_Materials_Laborraum_M_Plastic_Orange_M_Plastic_Orange" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    rel material:binding = </_materials/_Game_Materials_Laborraum_M_Plastic_Orange_M_Plastic_Orange>
                }

                over "_Game_Materials_Laborraum_M_Metal_Dishwasher_M_Metal_Dishwa" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    rel material:binding = </_materials/_Game_Materials_Laborraum_M_Metal_Dishwasher_M_Metal_Dishwa>
                }

                over "_Game_Materials_Laborraum_M_Kitchen_Fronts_M_Kitchen_Fronts" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    rel material:binding = </_materials/_Game_Materials_Laborraum_M_Kitchen_Fronts_M_Kitchen_Fronts>
                }

                over "_Game_Materials_Laborraum_M_Glass_Oven_Door_M_Glass_Oven_Door" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    rel material:binding = </_materials/_Game_Materials_Laborraum_M_Glass_Oven_Door_M_Glass_Oven_Door>
                }

                over "_Game_Materials_Laborraum_M_Rubber_Plastic_M_Rubber_Plastic_001" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    rel material:binding = </_materials/_Game_Materials_Laborraum_M_Rubber_Plastic_M_Rubber_Plastic_001>
                }

                over "_Game_Materials_Laborraum_M_Plastic_White_M_Plastic_White" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    rel material:binding = </_materials/_Game_Materials_Laborraum_M_Plastic_White_M_Plastic_White>
                }
            }
        }

        def Xform "dishwasher_front_collision_0" (
            prepend apiSchemas = ["PhysicsMassAPI"]
        )
        {
            point3f physics:centerOfMass = (0, 0, 0)
            float physics:density = 100
            float3 physics:diagonalInertia = (-19.145458, -10.85245, 39.878906)
            float physics:mass = 2.149643
            quatf physics:principalAxes = (0.9995015, -0.008543832, -0.024789369, 0.017582176)
            matrix4d xformOp:transform = ( (0.009444, 0, 0, 0), (0, 0.397179, 0, 0), (0, 0, 0.304987, 0), (-0.04, -0.329015, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Cube "Cube" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(1, 0, 0)]
                float[] primvars:displayOpacity = [0.5]
            }
        }

        def Xform "dishwasher_front_collision_1" (
            prepend apiSchemas = ["PhysicsMassAPI"]
        )
        {
            point3f physics:centerOfMass = (0, 0, 0)
            float physics:density = 100
            float3 physics:diagonalInertia = (-19.145458, -10.85245, 39.878906)
            float physics:mass = 2.149643
            quatf physics:principalAxes = (0.9995015, -0.008543832, -0.024789369, 0.017582176)
            matrix4d xformOp:transform = ( (0.015, 0, 0, 0), (0, 0.339603, 0, 0), (0, 0, 0.287469, 0), (-0.01, -0.334215, -0.015728, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Cube "Cube" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(1, 0, 0)]
                float[] primvars:displayOpacity = [0.5]
            }
        }

        def Xform "dishwasher_front_handle"
        {
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (-0.07493519, -0.67884796, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Xform "dishwasher_front_handle_visual_0" (
                prepend references = @./../meshes/usd/visual/SM_Kitchen_Handle.usda@</SM_Kitchen_Handle>
            )
            {
                matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]

                over "SM_Kitchen_Handle" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    rel material:binding = </_materials/_Game_Materials_Laborraum_M_Metal_Brushed_M_Metal_Brushed_003>
                }
            }

            def Xform "dishwasher_front_handle_collision_0" (
                prepend apiSchemas = ["PhysicsMassAPI"]
            )
            {
                point3f physics:centerOfMass = (0, 0, 0)
                float physics:density = 100
                float3 physics:diagonalInertia = (-19.145458, -10.85245, 39.878906)
                float physics:mass = 2.149643
                quatf physics:principalAxes = (0.9995015, -0.008543832, -0.024789369, 0.017582176)
                matrix4d xformOp:transform = ( (0.01, 0, 0, 0), (0, 0.0065, 0, 0), (0, 0, 0.0065, 0), (0.0164985, 0, 0.08, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]

                def Cube "Cube" (
                    prepend apiSchemas = ["PhysicsCollisionAPI"]
                )
                {
                    float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                    bool physics:collisionEnabled = 1
                    color3f[] primvars:displayColor = [(1, 0, 0)]
                    float[] primvars:displayOpacity = [0.5]
                }
            }

            def Xform "dishwasher_front_handle_collision_1" (
                prepend apiSchemas = ["PhysicsMassAPI"]
            )
            {
                point3f physics:centerOfMass = (0, 0, 0)
                float physics:density = 100
                float3 physics:diagonalInertia = (-19.145458, -10.85245, 39.878906)
                float physics:mass = 2.149643
                quatf physics:principalAxes = (0.9995015, -0.008543832, -0.024789369, 0.017582176)
                matrix4d xformOp:transform = ( (0.01, 0, 0, 0), (0, 0.0065, 0, 0), (0, 0, 0.0065, 0), (0.0164985, 0, -0.08, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]

                def Cube "Cube" (
                    prepend apiSchemas = ["PhysicsCollisionAPI"]
                )
                {
                    float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                    bool physics:collisionEnabled = 1
                    color3f[] primvars:displayColor = [(1, 0, 0)]
                    float[] primvars:displayOpacity = [0.5]
                }
            }

            def Xform "dishwasher_front_handle_collision_2" (
                prepend apiSchemas = ["PhysicsMassAPI"]
            )
            {
                point3f physics:centerOfMass = (0, 0, 0)
                float physics:density = 100
                float3 physics:diagonalInertia = (-19.145458, -10.85245, 39.878906)
                float physics:mass = 2.149643
                quatf physics:principalAxes = (0.9995015, -0.008543832, -0.024789369, 0.017582176)
                matrix4d xformOp:transform = ( (0.0065, 0, 0, 0), (0, 0.0065, 0, 0), (0, 0, 0.086516, 0), (0, 0, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]

                def Cube "Cube" (
                    prepend apiSchemas = ["PhysicsCollisionAPI"]
                )
                {
                    float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                    bool physics:collisionEnabled = 1
                    color3f[] primvars:displayColor = [(1, 0, 0)]
                    float[] primvars:displayOpacity = [0.5]
                }
            }
        }
    }

    def Xform "sink_drawer1" (
        prepend apiSchemas = ["PhysicsRigidBodyAPI"]
    )
    {
        bool physics:rigidBodyEnabled = 1
        matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (2.54181458, 3.37245652, 0.49768143, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]

        def Xform "sink_drawer1_visual_0"
        {
            matrix4d xformOp:transform = ( (0.009388, 0, 0, 0), (0, 0.298258, 0, 0), (0, 0, 0.397013, 0), (-0.233976, 0, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Cube "Cube"
            {
                float3[] extent = [(-1, -1, -1), (1, 1, 1)]
            }
        }

        def Xform "sink_drawer1_visual_1"
        {
            matrix4d xformOp:transform = ( (0.009017, 0, 0, 0), (0, 0.269754, 0, 0), (0, 0, 0.084742, 0), (0.259483, 0, -0.288887, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Cube "Cube"
            {
                float3[] extent = [(-1, -1, -1), (1, 1, 1)]
            }
        }

        def Xform "sink_drawer1_visual_2"
        {
            matrix4d xformOp:transform = ( (0.249028, 0, 0, 0), (0, 0.0075, 0, 0), (0, 0, 0.042, 0), (0.025012, -0.268047, -0.08949, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Cube "Cube"
            {
                float3[] extent = [(-1, -1, -1), (1, 1, 1)]
            }
        }

        def Xform "sink_drawer1_visual_3"
        {
            matrix4d xformOp:transform = ( (0.249028, 0, 0, 0), (0, 0.0075, 0, 0), (0, 0, 0.042, 0), (0.025012, 0.268047, -0.08949, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Cube "Cube"
            {
                float3[] extent = [(-1, -1, -1), (1, 1, 1)]
            }
        }

        def Xform "sink_drawer1_visual_4"
        {
            matrix4d xformOp:transform = ( (0.249028, 0, 0, 0), (0, 0.0075, 0, 0), (0, 0, 0.011648, 0), (0.025012, -0.268047, -0.208727, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Cube "Cube"
            {
                float3[] extent = [(-1, -1, -1), (1, 1, 1)]
            }
        }

        def Xform "sink_drawer1_visual_5"
        {
            matrix4d xformOp:transform = ( (0.249028, 0, 0, 0), (0, 0.0075, 0, 0), (0, 0, 0.011648, 0), (0.025012, 0.268047, -0.208727, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Cube "Cube"
            {
                float3[] extent = [(-1, -1, -1), (1, 1, 1)]
            }
        }

        def Xform "sink_drawer1_visual_6"
        {
            matrix4d xformOp:transform = ( (0.249028, 0, 0, 0), (0, 0.0075, 0, 0), (0, 0, 0.043609, 0), (0.025012, -0.268047, -0.33085, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Cube "Cube"
            {
                float3[] extent = [(-1, -1, -1), (1, 1, 1)]
            }
        }

        def Xform "sink_drawer1_visual_7"
        {
            matrix4d xformOp:transform = ( (0.249028, 0, 0, 0), (0, 0.0075, 0, 0), (0, 0, 0.043609, 0), (0.025012, 0.268047, -0.33085, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Cube "Cube"
            {
                float3[] extent = [(-1, -1, -1), (1, 1, 1)]
            }
        }

        def Xform "sink_drawer1_visual_8"
        {
            matrix4d xformOp:transform = ( (0.249028, 0, 0, 0), (0, 0.031012, 0, 0), (0, 0, 0.008, 0), (0.025012, -0.246033, -0.04, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Cube "Cube"
            {
                float3[] extent = [(-1, -1, -1), (1, 1, 1)]
            }
        }

        def Xform "sink_drawer1_visual_9"
        {
            matrix4d xformOp:transform = ( (0.249028, 0, 0, 0), (0, 0.031012, 0, 0), (0, 0, 0.008, 0), (0.025012, 0.246033, -0.04, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Cube "Cube"
            {
                float3[] extent = [(-1, -1, -1), (1, 1, 1)]
            }
        }

        def Xform "sink_drawer1_visual_10"
        {
            matrix4d xformOp:transform = ( (0.010504, 0, 0, 0), (0, 0.277046, 0, 0), (0, 0, 0.008, 0), (-0.213959, 0, -0.04, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Cube "Cube"
            {
                float3[] extent = [(-1, -1, -1), (1, 1, 1)]
            }
        }

        def Xform "sink_drawer1_visual_11"
        {
            matrix4d xformOp:transform = ( (0.058653, 0, 0, 0), (0, 0.277046, 0, 0), (0, 0, 0.008, 0), (0.21583, 0, -0.04, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Cube "Cube"
            {
                float3[] extent = [(-1, -1, -1), (1, 1, 1)]
            }
        }

        def Xform "sink_drawer1_visual_12"
        {
            matrix4d xformOp:transform = ( (0.074789, 0, 0, 0), (0, 0.008426, 0, 0), (0, 0, 0.173305, 0), (0.086505, 0.00535, -0.198155, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Cube "Cube"
            {
                float3[] extent = [(-1, -1, -1), (1, 1, 1)]
            }
        }

        def Xform "sink_drawer1_visual_13"
        {
            matrix4d xformOp:transform = ( (0.074789, 0, 0, 0), (0, 0.008426, 0, 0), (0, 0, 0.173305, 0), (0.086505, 0.211412, -0.198155, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Cube "Cube"
            {
                float3[] extent = [(-1, -1, -1), (1, 1, 1)]
            }
        }

        def Xform "sink_drawer1_visual_14"
        {
            matrix4d xformOp:transform = ( (0.008356, 0, 0, 0), (0, 0.109826, 0, 0), (0, 0, 0.173305, 0), (0.152938, 0.109826, -0.198155, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Cube "Cube"
            {
                float3[] extent = [(-1, -1, -1), (1, 1, 1)]
            }
        }

        def Xform "sink_drawer1_visual_15"
        {
            matrix4d xformOp:transform = ( (0.008356, 0, 0, 0), (0, 0.109826, 0, 0), (0, 0, 0.173305, 0), (0.02, 0.109826, -0.198155, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Cube "Cube"
            {
                float3[] extent = [(-1, -1, -1), (1, 1, 1)]
            }
        }

        def Xform "sink_drawer1_visual_16"
        {
            matrix4d xformOp:transform = ( (0.074789, 0, 0, 0), (0, 0.109826, 0, 0), (0, 0, 0.00085, 0), (0.086505, 0.109826, -0.372315, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Cube "Cube"
            {
                float3[] extent = [(-1, -1, -1), (1, 1, 1)]
            }
        }

        def Xform "sink_drawer1_visual_17"
        {
            matrix4d xformOp:transform = ( (0.074789, 0, 0, 0), (0, 0.008426, 0, 0), (0, 0, 0.173305, 0), (0.086505, -0.00535, -0.198155, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Cube "Cube"
            {
                float3[] extent = [(-1, -1, -1), (1, 1, 1)]
            }
        }

        def Xform "sink_drawer1_visual_18"
        {
            matrix4d xformOp:transform = ( (0.074789, 0, 0, 0), (0, 0.008426, 0, 0), (0, 0, 0.173305, 0), (0.086505, -0.211412, -0.198155, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Cube "Cube"
            {
                float3[] extent = [(-1, -1, -1), (1, 1, 1)]
            }
        }

        def Xform "sink_drawer1_visual_19"
        {
            matrix4d xformOp:transform = ( (0.008426, 0, 0, 0), (0, 0.109826, 0, 0), (0, 0, 0.173305, 0), (0.152938, -0.109826, -0.198155, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Cube "Cube"
            {
                float3[] extent = [(-1, -1, -1), (1, 1, 1)]
            }
        }

        def Xform "sink_drawer1_visual_20"
        {
            matrix4d xformOp:transform = ( (0.008426, 0, 0, 0), (0, 0.109826, 0, 0), (0, 0, 0.173305, 0), (0.02, -0.109826, -0.198155, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Cube "Cube"
            {
                float3[] extent = [(-1, -1, -1), (1, 1, 1)]
            }
        }

        def Xform "sink_drawer1_visual_21"
        {
            matrix4d xformOp:transform = ( (0.074789, 0, 0, 0), (0, 0.109826, 0, 0), (0, 0, 0.00085, 0), (0.086505, -0.109826, -0.372315, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Cube "Cube"
            {
                float3[] extent = [(-1, -1, -1), (1, 1, 1)]
            }
        }

        def Xform "sink_drawer1_visual_22"
        {
            matrix4d xformOp:transform = ( (0.109729, 0, 0, 0), (0, 0.008426, 0, 0), (0, 0, 0.173305, 0), (-0.098209, 0.221355, -0.198155, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Cube "Cube"
            {
                float3[] extent = [(-1, -1, -1), (1, 1, 1)]
            }
        }

        def Xform "sink_drawer1_visual_23"
        {
            matrix4d xformOp:transform = ( (0.109729, 0, 0, 0), (0, 0.008426, 0, 0), (0, 0, 0.173305, 0), (-0.098209, 0.088435, -0.198155, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Cube "Cube"
            {
                float3[] extent = [(-1, -1, -1), (1, 1, 1)]
            }
        }

        def Xform "sink_drawer1_visual_24"
        {
            matrix4d xformOp:transform = ( (0.008426, 0, 0, 0), (0, 0.074691, 0, 0), (0, 0, 0.173305, 0), (0.003041, 0.155, -0.198155, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Cube "Cube"
            {
                float3[] extent = [(-1, -1, -1), (1, 1, 1)]
            }
        }

        def Xform "sink_drawer1_visual_25"
        {
            matrix4d xformOp:transform = ( (0.008426, 0, 0, 0), (0, 0.074691, 0, 0), (0, 0, 0.173305, 0), (-0.199821, 0.155, -0.198155, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Cube "Cube"
            {
                float3[] extent = [(-1, -1, -1), (1, 1, 1)]
            }
        }

        def Xform "sink_drawer1_visual_26"
        {
            matrix4d xformOp:transform = ( (0.109729, 0, 0, 0), (0, 0.074691, 0, 0), (0, 0, 0.00085, 0), (-0.098209, 0.155, -0.372315, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Cube "Cube"
            {
                float3[] extent = [(-1, -1, -1), (1, 1, 1)]
            }
        }

        def Xform "sink_drawer1_visual_27"
        {
            matrix4d xformOp:transform = ( (0.109729, 0, 0, 0), (0, 0.008426, 0, 0), (0, 0, 0.173305, 0), (-0.098209, -0.221355, -0.198155, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Cube "Cube"
            {
                float3[] extent = [(-1, -1, -1), (1, 1, 1)]
            }
        }

        def Xform "sink_drawer1_visual_28"
        {
            matrix4d xformOp:transform = ( (0.109729, 0, 0, 0), (0, 0.008426, 0, 0), (0, 0, 0.173305, 0), (-0.098209, 0.071323, -0.198155, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Cube "Cube"
            {
                float3[] extent = [(-1, -1, -1), (1, 1, 1)]
            }
        }

        def Xform "sink_drawer1_visual_29"
        {
            matrix4d xformOp:transform = ( (0.008426, 0, 0, 0), (0, 0.154749, 0, 0), (0, 0, 0.173305, 0), (0.003041, -0.075302, -0.198155, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Cube "Cube"
            {
                float3[] extent = [(-1, -1, -1), (1, 1, 1)]
            }
        }

        def Xform "sink_drawer1_visual_30"
        {
            matrix4d xformOp:transform = ( (0.008426, 0, 0, 0), (0, 0.154749, 0, 0), (0, 0, 0.173305, 0), (-0.199821, -0.075302, -0.198155, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Cube "Cube"
            {
                float3[] extent = [(-1, -1, -1), (1, 1, 1)]
            }
        }

        def Xform "sink_drawer1_visual_31"
        {
            matrix4d xformOp:transform = ( (0.109729, 0, 0, 0), (0, 0.154749, 0, 0), (0, 0, 0.00085, 0), (-0.098209, -0.075302, -0.372315, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Cube "Cube"
            {
                float3[] extent = [(-1, -1, -1), (1, 1, 1)]
            }
        }

        def Xform "sink_drawer1_collision_0" (
            prepend apiSchemas = ["PhysicsMassAPI"]
        )
        {
            point3f physics:centerOfMass = (0, 0, 0)
            float physics:density = 100
            float3 physics:diagonalInertia = (-22.30877, -18.260296, 48.61338)
            float physics:mass = 2.372125
            quatf physics:principalAxes = (0.9000472, -0.34886488, 0.1717452, -0.19675355)
            matrix4d xformOp:transform = ( (0.009388, 0, 0, 0), (0, 0.298258, 0, 0), (0, 0, 0.397013, 0), (-0.233976, 0, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Cube "Cube" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(1, 0, 0)]
                float[] primvars:displayOpacity = [0.5]
            }
        }

        def Xform "sink_drawer1_collision_1" (
            prepend apiSchemas = ["PhysicsMassAPI"]
        )
        {
            point3f physics:centerOfMass = (0, 0, 0)
            float physics:density = 100
            float3 physics:diagonalInertia = (-22.30877, -18.260296, 48.61338)
            float physics:mass = 2.372125
            quatf physics:principalAxes = (0.9000472, -0.34886488, 0.1717452, -0.19675355)
            matrix4d xformOp:transform = ( (0.009017, 0, 0, 0), (0, 0.269754, 0, 0), (0, 0, 0.084742, 0), (0.259483, 0, -0.288887, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Cube "Cube" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(1, 0, 0)]
                float[] primvars:displayOpacity = [0.5]
            }
        }

        def Xform "sink_drawer1_collision_2" (
            prepend apiSchemas = ["PhysicsMassAPI"]
        )
        {
            point3f physics:centerOfMass = (0, 0, 0)
            float physics:density = 100
            float3 physics:diagonalInertia = (-22.30877, -18.260296, 48.61338)
            float physics:mass = 2.372125
            quatf physics:principalAxes = (0.9000472, -0.34886488, 0.1717452, -0.19675355)
            matrix4d xformOp:transform = ( (0.249028, 0, 0, 0), (0, 0.0075, 0, 0), (0, 0, 0.042, 0), (0.025012, -0.268047, -0.08949, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Cube "Cube" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(1, 0, 0)]
                float[] primvars:displayOpacity = [0.5]
            }
        }

        def Xform "sink_drawer1_collision_3" (
            prepend apiSchemas = ["PhysicsMassAPI"]
        )
        {
            point3f physics:centerOfMass = (0, 0, 0)
            float physics:density = 100
            float3 physics:diagonalInertia = (-22.30877, -18.260296, 48.61338)
            float physics:mass = 2.372125
            quatf physics:principalAxes = (0.9000472, -0.34886488, 0.1717452, -0.19675355)
            matrix4d xformOp:transform = ( (0.249028, 0, 0, 0), (0, 0.0075, 0, 0), (0, 0, 0.042, 0), (0.025012, 0.268047, -0.08949, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Cube "Cube" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(1, 0, 0)]
                float[] primvars:displayOpacity = [0.5]
            }
        }

        def Xform "sink_drawer1_collision_4" (
            prepend apiSchemas = ["PhysicsMassAPI"]
        )
        {
            point3f physics:centerOfMass = (0, 0, 0)
            float physics:density = 100
            float3 physics:diagonalInertia = (-22.30877, -18.260296, 48.61338)
            float physics:mass = 2.372125
            quatf physics:principalAxes = (0.9000472, -0.34886488, 0.1717452, -0.19675355)
            matrix4d xformOp:transform = ( (0.249028, 0, 0, 0), (0, 0.0075, 0, 0), (0, 0, 0.011648, 0), (0.025012, -0.268047, -0.208727, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Cube "Cube" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(1, 0, 0)]
                float[] primvars:displayOpacity = [0.5]
            }
        }

        def Xform "sink_drawer1_collision_5" (
            prepend apiSchemas = ["PhysicsMassAPI"]
        )
        {
            point3f physics:centerOfMass = (0, 0, 0)
            float physics:density = 100
            float3 physics:diagonalInertia = (-22.30877, -18.260296, 48.61338)
            float physics:mass = 2.372125
            quatf physics:principalAxes = (0.9000472, -0.34886488, 0.1717452, -0.19675355)
            matrix4d xformOp:transform = ( (0.249028, 0, 0, 0), (0, 0.0075, 0, 0), (0, 0, 0.011648, 0), (0.025012, 0.268047, -0.208727, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Cube "Cube" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(1, 0, 0)]
                float[] primvars:displayOpacity = [0.5]
            }
        }

        def Xform "sink_drawer1_collision_6" (
            prepend apiSchemas = ["PhysicsMassAPI"]
        )
        {
            point3f physics:centerOfMass = (0, 0, 0)
            float physics:density = 100
            float3 physics:diagonalInertia = (-22.30877, -18.260296, 48.61338)
            float physics:mass = 2.372125
            quatf physics:principalAxes = (0.9000472, -0.34886488, 0.1717452, -0.19675355)
            matrix4d xformOp:transform = ( (0.249028, 0, 0, 0), (0, 0.0075, 0, 0), (0, 0, 0.043609, 0), (0.025012, -0.268047, -0.33085, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Cube "Cube" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(1, 0, 0)]
                float[] primvars:displayOpacity = [0.5]
            }
        }

        def Xform "sink_drawer1_collision_7" (
            prepend apiSchemas = ["PhysicsMassAPI"]
        )
        {
            point3f physics:centerOfMass = (0, 0, 0)
            float physics:density = 100
            float3 physics:diagonalInertia = (-22.30877, -18.260296, 48.61338)
            float physics:mass = 2.372125
            quatf physics:principalAxes = (0.9000472, -0.34886488, 0.1717452, -0.19675355)
            matrix4d xformOp:transform = ( (0.249028, 0, 0, 0), (0, 0.0075, 0, 0), (0, 0, 0.043609, 0), (0.025012, 0.268047, -0.33085, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Cube "Cube" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(1, 0, 0)]
                float[] primvars:displayOpacity = [0.5]
            }
        }

        def Xform "sink_drawer1_collision_8" (
            prepend apiSchemas = ["PhysicsMassAPI"]
        )
        {
            point3f physics:centerOfMass = (0, 0, 0)
            float physics:density = 100
            float3 physics:diagonalInertia = (-22.30877, -18.260296, 48.61338)
            float physics:mass = 2.372125
            quatf physics:principalAxes = (0.9000472, -0.34886488, 0.1717452, -0.19675355)
            matrix4d xformOp:transform = ( (0.249028, 0, 0, 0), (0, 0.031012, 0, 0), (0, 0, 0.008, 0), (0.025012, -0.246033, -0.04, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Cube "Cube" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(1, 0, 0)]
                float[] primvars:displayOpacity = [0.5]
            }
        }

        def Xform "sink_drawer1_collision_9" (
            prepend apiSchemas = ["PhysicsMassAPI"]
        )
        {
            point3f physics:centerOfMass = (0, 0, 0)
            float physics:density = 100
            float3 physics:diagonalInertia = (-22.30877, -18.260296, 48.61338)
            float physics:mass = 2.372125
            quatf physics:principalAxes = (0.9000472, -0.34886488, 0.1717452, -0.19675355)
            matrix4d xformOp:transform = ( (0.249028, 0, 0, 0), (0, 0.031012, 0, 0), (0, 0, 0.008, 0), (0.025012, 0.246033, -0.04, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Cube "Cube" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(1, 0, 0)]
                float[] primvars:displayOpacity = [0.5]
            }
        }

        def Xform "sink_drawer1_collision_10" (
            prepend apiSchemas = ["PhysicsMassAPI"]
        )
        {
            point3f physics:centerOfMass = (0, 0, 0)
            float physics:density = 100
            float3 physics:diagonalInertia = (-22.30877, -18.260296, 48.61338)
            float physics:mass = 2.372125
            quatf physics:principalAxes = (0.9000472, -0.34886488, 0.1717452, -0.19675355)
            matrix4d xformOp:transform = ( (0.010504, 0, 0, 0), (0, 0.277046, 0, 0), (0, 0, 0.008, 0), (-0.213959, 0, -0.04, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Cube "Cube" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(1, 0, 0)]
                float[] primvars:displayOpacity = [0.5]
            }
        }

        def Xform "sink_drawer1_collision_11" (
            prepend apiSchemas = ["PhysicsMassAPI"]
        )
        {
            point3f physics:centerOfMass = (0, 0, 0)
            float physics:density = 100
            float3 physics:diagonalInertia = (-22.30877, -18.260296, 48.61338)
            float physics:mass = 2.372125
            quatf physics:principalAxes = (0.9000472, -0.34886488, 0.1717452, -0.19675355)
            matrix4d xformOp:transform = ( (0.058653, 0, 0, 0), (0, 0.277046, 0, 0), (0, 0, 0.008, 0), (0.21583, 0, -0.04, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Cube "Cube" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(1, 0, 0)]
                float[] primvars:displayOpacity = [0.5]
            }
        }

        def Xform "sink_drawer1_collision_12" (
            prepend apiSchemas = ["PhysicsMassAPI"]
        )
        {
            point3f physics:centerOfMass = (0, 0, 0)
            float physics:density = 100
            float3 physics:diagonalInertia = (-22.30877, -18.260296, 48.61338)
            float physics:mass = 2.372125
            quatf physics:principalAxes = (0.9000472, -0.34886488, 0.1717452, -0.19675355)
            matrix4d xformOp:transform = ( (0.074789, 0, 0, 0), (0, 0.008426, 0, 0), (0, 0, 0.173305, 0), (0.086505, 0.00535, -0.198155, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Cube "Cube" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(1, 0, 0)]
                float[] primvars:displayOpacity = [0.5]
            }
        }

        def Xform "sink_drawer1_collision_13" (
            prepend apiSchemas = ["PhysicsMassAPI"]
        )
        {
            point3f physics:centerOfMass = (0, 0, 0)
            float physics:density = 100
            float3 physics:diagonalInertia = (-22.30877, -18.260296, 48.61338)
            float physics:mass = 2.372125
            quatf physics:principalAxes = (0.9000472, -0.34886488, 0.1717452, -0.19675355)
            matrix4d xformOp:transform = ( (0.074789, 0, 0, 0), (0, 0.008426, 0, 0), (0, 0, 0.173305, 0), (0.086505, 0.211412, -0.198155, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Cube "Cube" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(1, 0, 0)]
                float[] primvars:displayOpacity = [0.5]
            }
        }

        def Xform "sink_drawer1_collision_14" (
            prepend apiSchemas = ["PhysicsMassAPI"]
        )
        {
            point3f physics:centerOfMass = (0, 0, 0)
            float physics:density = 100
            float3 physics:diagonalInertia = (-22.30877, -18.260296, 48.61338)
            float physics:mass = 2.372125
            quatf physics:principalAxes = (0.9000472, -0.34886488, 0.1717452, -0.19675355)
            matrix4d xformOp:transform = ( (0.008356, 0, 0, 0), (0, 0.109826, 0, 0), (0, 0, 0.173305, 0), (0.152938, 0.109826, -0.198155, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Cube "Cube" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(1, 0, 0)]
                float[] primvars:displayOpacity = [0.5]
            }
        }

        def Xform "sink_drawer1_collision_15" (
            prepend apiSchemas = ["PhysicsMassAPI"]
        )
        {
            point3f physics:centerOfMass = (0, 0, 0)
            float physics:density = 100
            float3 physics:diagonalInertia = (-22.30877, -18.260296, 48.61338)
            float physics:mass = 2.372125
            quatf physics:principalAxes = (0.9000472, -0.34886488, 0.1717452, -0.19675355)
            matrix4d xformOp:transform = ( (0.008356, 0, 0, 0), (0, 0.109826, 0, 0), (0, 0, 0.173305, 0), (0.02, 0.109826, -0.198155, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Cube "Cube" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(1, 0, 0)]
                float[] primvars:displayOpacity = [0.5]
            }
        }

        def Xform "sink_drawer1_collision_16" (
            prepend apiSchemas = ["PhysicsMassAPI"]
        )
        {
            point3f physics:centerOfMass = (0, 0, 0)
            float physics:density = 100
            float3 physics:diagonalInertia = (-22.30877, -18.260296, 48.61338)
            float physics:mass = 2.372125
            quatf physics:principalAxes = (0.9000472, -0.34886488, 0.1717452, -0.19675355)
            matrix4d xformOp:transform = ( (0.074789, 0, 0, 0), (0, 0.109826, 0, 0), (0, 0, 0.00085, 0), (0.086505, 0.109826, -0.372315, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Cube "Cube" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(1, 0, 0)]
                float[] primvars:displayOpacity = [0.5]
            }
        }

        def Xform "sink_drawer1_collision_17" (
            prepend apiSchemas = ["PhysicsMassAPI"]
        )
        {
            point3f physics:centerOfMass = (0, 0, 0)
            float physics:density = 100
            float3 physics:diagonalInertia = (-22.30877, -18.260296, 48.61338)
            float physics:mass = 2.372125
            quatf physics:principalAxes = (0.9000472, -0.34886488, 0.1717452, -0.19675355)
            matrix4d xformOp:transform = ( (0.074789, 0, 0, 0), (0, 0.008426, 0, 0), (0, 0, 0.173305, 0), (0.086505, -0.00535, -0.198155, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Cube "Cube" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(1, 0, 0)]
                float[] primvars:displayOpacity = [0.5]
            }
        }

        def Xform "sink_drawer1_collision_18" (
            prepend apiSchemas = ["PhysicsMassAPI"]
        )
        {
            point3f physics:centerOfMass = (0, 0, 0)
            float physics:density = 100
            float3 physics:diagonalInertia = (-22.30877, -18.260296, 48.61338)
            float physics:mass = 2.372125
            quatf physics:principalAxes = (0.9000472, -0.34886488, 0.1717452, -0.19675355)
            matrix4d xformOp:transform = ( (0.074789, 0, 0, 0), (0, 0.008426, 0, 0), (0, 0, 0.173305, 0), (0.086505, -0.211412, -0.198155, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Cube "Cube" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(1, 0, 0)]
                float[] primvars:displayOpacity = [0.5]
            }
        }

        def Xform "sink_drawer1_collision_19" (
            prepend apiSchemas = ["PhysicsMassAPI"]
        )
        {
            point3f physics:centerOfMass = (0, 0, 0)
            float physics:density = 100
            float3 physics:diagonalInertia = (-22.30877, -18.260296, 48.61338)
            float physics:mass = 2.372125
            quatf physics:principalAxes = (0.9000472, -0.34886488, 0.1717452, -0.19675355)
            matrix4d xformOp:transform = ( (0.008426, 0, 0, 0), (0, 0.109826, 0, 0), (0, 0, 0.173305, 0), (0.152938, -0.109826, -0.198155, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Cube "Cube" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(1, 0, 0)]
                float[] primvars:displayOpacity = [0.5]
            }
        }

        def Xform "sink_drawer1_collision_20" (
            prepend apiSchemas = ["PhysicsMassAPI"]
        )
        {
            point3f physics:centerOfMass = (0, 0, 0)
            float physics:density = 100
            float3 physics:diagonalInertia = (-22.30877, -18.260296, 48.61338)
            float physics:mass = 2.372125
            quatf physics:principalAxes = (0.9000472, -0.34886488, 0.1717452, -0.19675355)
            matrix4d xformOp:transform = ( (0.008426, 0, 0, 0), (0, 0.109826, 0, 0), (0, 0, 0.173305, 0), (0.02, -0.109826, -0.198155, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Cube "Cube" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(1, 0, 0)]
                float[] primvars:displayOpacity = [0.5]
            }
        }

        def Xform "sink_drawer1_collision_21" (
            prepend apiSchemas = ["PhysicsMassAPI"]
        )
        {
            point3f physics:centerOfMass = (0, 0, 0)
            float physics:density = 100
            float3 physics:diagonalInertia = (-22.30877, -18.260296, 48.61338)
            float physics:mass = 2.372125
            quatf physics:principalAxes = (0.9000472, -0.34886488, 0.1717452, -0.19675355)
            matrix4d xformOp:transform = ( (0.074789, 0, 0, 0), (0, 0.109826, 0, 0), (0, 0, 0.00085, 0), (0.086505, -0.109826, -0.372315, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Cube "Cube" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(1, 0, 0)]
                float[] primvars:displayOpacity = [0.5]
            }
        }

        def Xform "sink_drawer1_collision_22" (
            prepend apiSchemas = ["PhysicsMassAPI"]
        )
        {
            point3f physics:centerOfMass = (0, 0, 0)
            float physics:density = 100
            float3 physics:diagonalInertia = (-22.30877, -18.260296, 48.61338)
            float physics:mass = 2.372125
            quatf physics:principalAxes = (0.9000472, -0.34886488, 0.1717452, -0.19675355)
            matrix4d xformOp:transform = ( (0.109729, 0, 0, 0), (0, 0.008426, 0, 0), (0, 0, 0.173305, 0), (-0.098209, 0.221355, -0.198155, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Cube "Cube" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(1, 0, 0)]
                float[] primvars:displayOpacity = [0.5]
            }
        }

        def Xform "sink_drawer1_collision_23" (
            prepend apiSchemas = ["PhysicsMassAPI"]
        )
        {
            point3f physics:centerOfMass = (0, 0, 0)
            float physics:density = 100
            float3 physics:diagonalInertia = (-22.30877, -18.260296, 48.61338)
            float physics:mass = 2.372125
            quatf physics:principalAxes = (0.9000472, -0.34886488, 0.1717452, -0.19675355)
            matrix4d xformOp:transform = ( (0.109729, 0, 0, 0), (0, 0.008426, 0, 0), (0, 0, 0.173305, 0), (-0.098209, 0.088435, -0.198155, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Cube "Cube" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(1, 0, 0)]
                float[] primvars:displayOpacity = [0.5]
            }
        }

        def Xform "sink_drawer1_collision_24" (
            prepend apiSchemas = ["PhysicsMassAPI"]
        )
        {
            point3f physics:centerOfMass = (0, 0, 0)
            float physics:density = 100
            float3 physics:diagonalInertia = (-22.30877, -18.260296, 48.61338)
            float physics:mass = 2.372125
            quatf physics:principalAxes = (0.9000472, -0.34886488, 0.1717452, -0.19675355)
            matrix4d xformOp:transform = ( (0.008426, 0, 0, 0), (0, 0.074691, 0, 0), (0, 0, 0.173305, 0), (0.003041, 0.155, -0.198155, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Cube "Cube" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(1, 0, 0)]
                float[] primvars:displayOpacity = [0.5]
            }
        }

        def Xform "sink_drawer1_collision_25" (
            prepend apiSchemas = ["PhysicsMassAPI"]
        )
        {
            point3f physics:centerOfMass = (0, 0, 0)
            float physics:density = 100
            float3 physics:diagonalInertia = (-22.30877, -18.260296, 48.61338)
            float physics:mass = 2.372125
            quatf physics:principalAxes = (0.9000472, -0.34886488, 0.1717452, -0.19675355)
            matrix4d xformOp:transform = ( (0.008426, 0, 0, 0), (0, 0.074691, 0, 0), (0, 0, 0.173305, 0), (-0.199821, 0.155, -0.198155, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Cube "Cube" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(1, 0, 0)]
                float[] primvars:displayOpacity = [0.5]
            }
        }

        def Xform "sink_drawer1_collision_26" (
            prepend apiSchemas = ["PhysicsMassAPI"]
        )
        {
            point3f physics:centerOfMass = (0, 0, 0)
            float physics:density = 100
            float3 physics:diagonalInertia = (-22.30877, -18.260296, 48.61338)
            float physics:mass = 2.372125
            quatf physics:principalAxes = (0.9000472, -0.34886488, 0.1717452, -0.19675355)
            matrix4d xformOp:transform = ( (0.109729, 0, 0, 0), (0, 0.074691, 0, 0), (0, 0, 0.00085, 0), (-0.098209, 0.155, -0.372315, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Cube "Cube" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(1, 0, 0)]
                float[] primvars:displayOpacity = [0.5]
            }
        }

        def Xform "sink_drawer1_collision_27" (
            prepend apiSchemas = ["PhysicsMassAPI"]
        )
        {
            point3f physics:centerOfMass = (0, 0, 0)
            float physics:density = 100
            float3 physics:diagonalInertia = (-22.30877, -18.260296, 48.61338)
            float physics:mass = 2.372125
            quatf physics:principalAxes = (0.9000472, -0.34886488, 0.1717452, -0.19675355)
            matrix4d xformOp:transform = ( (0.109729, 0, 0, 0), (0, 0.008426, 0, 0), (0, 0, 0.173305, 0), (-0.098209, -0.221355, -0.198155, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Cube "Cube" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(1, 0, 0)]
                float[] primvars:displayOpacity = [0.5]
            }
        }

        def Xform "sink_drawer1_collision_28" (
            prepend apiSchemas = ["PhysicsMassAPI"]
        )
        {
            point3f physics:centerOfMass = (0, 0, 0)
            float physics:density = 100
            float3 physics:diagonalInertia = (-22.30877, -18.260296, 48.61338)
            float physics:mass = 2.372125
            quatf physics:principalAxes = (0.9000472, -0.34886488, 0.1717452, -0.19675355)
            matrix4d xformOp:transform = ( (0.109729, 0, 0, 0), (0, 0.008426, 0, 0), (0, 0, 0.173305, 0), (-0.098209, 0.071323, -0.198155, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Cube "Cube" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(1, 0, 0)]
                float[] primvars:displayOpacity = [0.5]
            }
        }

        def Xform "sink_drawer1_collision_29" (
            prepend apiSchemas = ["PhysicsMassAPI"]
        )
        {
            point3f physics:centerOfMass = (0, 0, 0)
            float physics:density = 100
            float3 physics:diagonalInertia = (-22.30877, -18.260296, 48.61338)
            float physics:mass = 2.372125
            quatf physics:principalAxes = (0.9000472, -0.34886488, 0.1717452, -0.19675355)
            matrix4d xformOp:transform = ( (0.008426, 0, 0, 0), (0, 0.154749, 0, 0), (0, 0, 0.173305, 0), (0.003041, -0.075302, -0.198155, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Cube "Cube" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(1, 0, 0)]
                float[] primvars:displayOpacity = [0.5]
            }
        }

        def Xform "sink_drawer1_collision_30" (
            prepend apiSchemas = ["PhysicsMassAPI"]
        )
        {
            point3f physics:centerOfMass = (0, 0, 0)
            float physics:density = 100
            float3 physics:diagonalInertia = (-22.30877, -18.260296, 48.61338)
            float physics:mass = 2.372125
            quatf physics:principalAxes = (0.9000472, -0.34886488, 0.1717452, -0.19675355)
            matrix4d xformOp:transform = ( (0.008426, 0, 0, 0), (0, 0.154749, 0, 0), (0, 0, 0.173305, 0), (-0.199821, -0.075302, -0.198155, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Cube "Cube" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(1, 0, 0)]
                float[] primvars:displayOpacity = [0.5]
            }
        }

        def Xform "sink_drawer1_collision_31" (
            prepend apiSchemas = ["PhysicsMassAPI"]
        )
        {
            point3f physics:centerOfMass = (0, 0, 0)
            float physics:density = 100
            float3 physics:diagonalInertia = (-22.30877, -18.260296, 48.61338)
            float physics:mass = 2.372125
            quatf physics:principalAxes = (0.9000472, -0.34886488, 0.1717452, -0.19675355)
            matrix4d xformOp:transform = ( (0.109729, 0, 0, 0), (0, 0.154749, 0, 0), (0, 0, 0.00085, 0), (-0.098209, -0.075302, -0.372315, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Cube "Cube" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(1, 0, 0)]
                float[] primvars:displayOpacity = [0.5]
            }
        }

        def Xform "sink_drawer1_handle"
        {
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 2.220446049250313e-16, 1, 0), (0, -1, 2.220446049250313e-16, 0), (-0.26900223, 0.00331339, 0.35071747, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Xform "sink_drawer1_handle_visual_0" (
                prepend references = @./../meshes/usd/visual/SM_Kitchen_Handle.usda@</SM_Kitchen_Handle>
            )
            {
                matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]

                over "SM_Kitchen_Handle" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    rel material:binding = </_materials/_Game_Materials_Laborraum_M_Metal_Brushed_M_Metal_Brushed_003>
                }
            }

            def Xform "sink_drawer1_handle_collision_0" (
                prepend apiSchemas = ["PhysicsMassAPI"]
            )
            {
                point3f physics:centerOfMass = (0, 0, 0)
                float physics:density = 100
                float3 physics:diagonalInertia = (-22.30877, -18.260296, 48.61338)
                float physics:mass = 2.372125
                quatf physics:principalAxes = (0.9000472, -0.34886488, 0.1717452, -0.19675355)
                matrix4d xformOp:transform = ( (0.01, 0, 0, 0), (0, 0.0065, 0, 0), (0, 0, 0.0065, 0), (0.0164985, 0, 0.08, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]

                def Cube "Cube" (
                    prepend apiSchemas = ["PhysicsCollisionAPI"]
                )
                {
                    float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                    bool physics:collisionEnabled = 1
                    color3f[] primvars:displayColor = [(1, 0, 0)]
                    float[] primvars:displayOpacity = [0.5]
                }
            }

            def Xform "sink_drawer1_handle_collision_1" (
                prepend apiSchemas = ["PhysicsMassAPI"]
            )
            {
                point3f physics:centerOfMass = (0, 0, 0)
                float physics:density = 100
                float3 physics:diagonalInertia = (-22.30877, -18.260296, 48.61338)
                float physics:mass = 2.372125
                quatf physics:principalAxes = (0.9000472, -0.34886488, 0.1717452, -0.19675355)
                matrix4d xformOp:transform = ( (0.01, 0, 0, 0), (0, 0.0065, 0, 0), (0, 0, 0.0065, 0), (0.0164985, 0, -0.08, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]

                def Cube "Cube" (
                    prepend apiSchemas = ["PhysicsCollisionAPI"]
                )
                {
                    float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                    bool physics:collisionEnabled = 1
                    color3f[] primvars:displayColor = [(1, 0, 0)]
                    float[] primvars:displayOpacity = [0.5]
                }
            }

            def Xform "sink_drawer1_handle_collision_2" (
                prepend apiSchemas = ["PhysicsMassAPI"]
            )
            {
                point3f physics:centerOfMass = (0, 0, 0)
                float physics:density = 100
                float3 physics:diagonalInertia = (-22.30877, -18.260296, 48.61338)
                float physics:mass = 2.372125
                quatf physics:principalAxes = (0.9000472, -0.34886488, 0.1717452, -0.19675355)
                matrix4d xformOp:transform = ( (0.0065, 0, 0, 0), (0, 0.0065, 0, 0), (0, 0, 0.086516, 0), (0, 0, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]

                def Cube "Cube" (
                    prepend apiSchemas = ["PhysicsCollisionAPI"]
                )
                {
                    float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                    bool physics:collisionEnabled = 1
                    color3f[] primvars:displayColor = [(1, 0, 0)]
                    float[] primvars:displayOpacity = [0.5]
                }
            }
        }
    }

    def Xform "sink_drawer2" (
        prepend apiSchemas = ["PhysicsRigidBodyAPI"]
    )
    {
        bool physics:rigidBodyEnabled = 1
        matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (2.51968598, 3.37374461, 0.65885857, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]

        def Xform "sink_drawer2_visual_0" (
            prepend references = @./../meshes/usd/visual/SM_Kitchen_08_Sink_Drawer_02.usda@</SM_Kitchen_08_Sink_Drawer_02>
        )
        {
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            over "SM_Kitchen_08_Sink_Drawer_02" (
                prepend apiSchemas = ["MaterialBindingAPI"]
            )
            {
                rel material:binding = </_materials/_Game_Materials_Laborraum_M_Plastic_White_M_Plastic_White_006>

                over "_Game_Materials_Laborraum_M_Plastic_White_M_Plastic_White_006" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    rel material:binding = </_materials/_Game_Materials_Laborraum_M_Plastic_White_M_Plastic_White_006>
                }

                over "_Game_Materials_Laborraum_M_Drawer_Mat_M_Drawer_Mat" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    rel material:binding = </_materials/_Game_Materials_Laborraum_M_Drawer_Mat_M_Drawer_Mat>
                }
            }
        }

        def Xform "sink_drawer2_collision_0" (
            prepend apiSchemas = ["PhysicsMassAPI"]
        )
        {
            point3f physics:centerOfMass = (0, 0, 0)
            float physics:density = 100
            float3 physics:diagonalInertia = (-2.703322, -1.3733277, 4.9528193)
            float physics:mass = 0.56388235
            quatf physics:principalAxes = (-0.27559912, -0.22037552, 0.33710018, 0.8728363)
            matrix4d xformOp:transform = ( (0.188013, 0, 0, 0), (0, 0.008, 0, 0), (0, 0, 0.041105, 0), (0.002535, 0.270604, -0.000733, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Cube "Cube" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(1, 0, 0)]
                float[] primvars:displayOpacity = [0.5]
            }
        }

        def Xform "sink_drawer2_collision_1" (
            prepend apiSchemas = ["PhysicsMassAPI"]
        )
        {
            point3f physics:centerOfMass = (0, 0, 0)
            float physics:density = 100
            float3 physics:diagonalInertia = (-2.703322, -1.3733277, 4.9528193)
            float physics:mass = 0.56388235
            quatf physics:principalAxes = (-0.27559912, -0.22037552, 0.33710018, 0.8728363)
            matrix4d xformOp:transform = ( (0.188013, 0, 0, 0), (0, 0.008, 0, 0), (0, 0, 0.041105, 0), (0.002535, -0.270604, -0.000733, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Cube "Cube" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(1, 0, 0)]
                float[] primvars:displayOpacity = [0.5]
            }
        }

        def Xform "sink_drawer2_collision_2" (
            prepend apiSchemas = ["PhysicsMassAPI"]
        )
        {
            point3f physics:centerOfMass = (0, 0, 0)
            float physics:density = 100
            float3 physics:diagonalInertia = (-2.703322, -1.3733277, 4.9528193)
            float physics:mass = 0.56388235
            quatf physics:principalAxes = (-0.27559912, -0.22037552, 0.33710018, 0.8728363)
            matrix4d xformOp:transform = ( (0.0085, 0, 0, 0), (0, 0.032497, 0, 0), (0, 0, 0.049661, 0), (-0.191981, 0.248473, 0.000834, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Cube "Cube" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(1, 0, 0)]
                float[] primvars:displayOpacity = [0.5]
            }
        }

        def Xform "sink_drawer2_collision_3" (
            prepend apiSchemas = ["PhysicsMassAPI"]
        )
        {
            point3f physics:centerOfMass = (0, 0, 0)
            float physics:density = 100
            float3 physics:diagonalInertia = (-2.703322, -1.3733277, 4.9528193)
            float physics:mass = 0.56388235
            quatf physics:principalAxes = (-0.27559912, -0.22037552, 0.33710018, 0.8728363)
            matrix4d xformOp:transform = ( (0.0085, 0, 0, 0), (0, 0.032497, 0, 0), (0, 0, 0.049661, 0), (-0.191981, -0.248473, 0.000834, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Cube "Cube" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(1, 0, 0)]
                float[] primvars:displayOpacity = [0.5]
            }
        }

        def Xform "sink_drawer2_collision_4" (
            prepend apiSchemas = ["PhysicsMassAPI"]
        )
        {
            point3f physics:centerOfMass = (0, 0, 0)
            float physics:density = 100
            float3 physics:diagonalInertia = (-2.703322, -1.3733277, 4.9528193)
            float physics:mass = 0.56388235
            quatf physics:principalAxes = (-0.27559912, -0.22037552, 0.33710018, 0.8728363)
            matrix4d xformOp:transform = ( (0.0085, 0, 0, 0), (0, 0.216977, 0, 0), (0, 0, 0.049, 0), (-0.191981, 0, -0.0015, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Cube "Cube" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(1, 0, 0)]
                float[] primvars:displayOpacity = [0.5]
            }
        }

        def Xform "sink_drawer2_collision_5" (
            prepend apiSchemas = ["PhysicsMassAPI"]
        )
        {
            point3f physics:centerOfMass = (0, 0, 0)
            float physics:density = 100
            float3 physics:diagonalInertia = (-2.703322, -1.3733277, 4.9528193)
            float physics:mass = 0.56388235
            quatf physics:principalAxes = (-0.27559912, -0.22037552, 0.33710018, 0.8728363)
            matrix4d xformOp:transform = ( (0.008, 0, 0, 0), (0, 0.278678, 0, 0), (0, 0, 0.0415, 0), (0.184382, 0, -0.0024, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Cube "Cube" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(1, 0, 0)]
                float[] primvars:displayOpacity = [0.5]
            }
        }

        def Xform "sink_drawer2_collision_6" (
            prepend apiSchemas = ["PhysicsMassAPI"]
        )
        {
            point3f physics:centerOfMass = (0, 0, 0)
            float physics:density = 100
            float3 physics:diagonalInertia = (-2.703322, -1.3733277, 4.9528193)
            float physics:mass = 0.56388235
            quatf physics:principalAxes = (-0.27559912, -0.22037552, 0.33710018, 0.8728363)
            matrix4d xformOp:transform = ( (0.188013, 0, 0, 0), (0, 0.278678, 0, 0), (0, 0, 0.008, 0), (0.002535, 0, -0.036496, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Cube "Cube" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(1, 0, 0)]
                float[] primvars:displayOpacity = [0.5]
            }
        }
    }

    def Xform "cabinet9_drawer1" (
        prepend apiSchemas = ["PhysicsRigidBodyAPI"]
    )
    {
        bool physics:rigidBodyEnabled = 1
        matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (2.5420865000000004, 2.77093435, 0.82615219, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]

        def Xform "cabinet9_drawer1_visual_0" (
            prepend references = @./../meshes/usd/visual/SM_Kitchen_09_Drawer_01.usda@</SM_Kitchen_09_Drawer_01>
        )
        {
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            over "SM_Kitchen_09_Base_Drawer_01" (
                prepend apiSchemas = ["MaterialBindingAPI"]
            )
            {
                rel material:binding = </_materials/_Game_Materials_Laborraum_M_Drawer_Mat_M_Drawer_Mat_004>

                over "_Game_Materials_Laborraum_M_Metal_Chrome_M_Metal_Chrome_004" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    rel material:binding = </_materials/_Game_Materials_Laborraum_M_Metal_Chrome_M_Metal_Chrome_004>
                }

                over "_Game_Materials_Laborraum_M_Kitchen_Fronts_M_Kitchen_Fronts_005" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    rel material:binding = </_materials/_Game_Materials_Laborraum_M_Kitchen_Fronts_M_Kitchen_Fronts_005>
                }

                over "_Game_Materials_Laborraum_M_Plastic_White_M_Plastic_White_011" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    rel material:binding = </_materials/_Game_Materials_Laborraum_M_Plastic_White_M_Plastic_White_011>
                }

                over "_Game_Materials_Laborraum_M_Drawer_Mat_M_Drawer_Mat_004" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    rel material:binding = </_materials/_Game_Materials_Laborraum_M_Drawer_Mat_M_Drawer_Mat_004>
                }
            }
        }

        def Xform "cabinet9_drawer1_collision_0" (
            prepend apiSchemas = ["PhysicsMassAPI"]
        )
        {
            point3f physics:centerOfMass = (0, 0, 0)
            float physics:density = 100
            float3 physics:diagonalInertia = (-4.25124, -1.90554, 6.9585476)
            float physics:mass = 0.6783783
            quatf physics:principalAxes = (0.34476227, 0.88530046, 0.26440972, 0.16573949)
            matrix4d xformOp:transform = ( (0.245507, 0, 0, 0), (0, 0.008, 0, 0), (0, 0, 0.042633, 0), (0.021031, 0.270267, -0.01336, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Cube "Cube" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(1, 0, 0)]
                float[] primvars:displayOpacity = [0.5]
            }
        }

        def Xform "cabinet9_drawer1_collision_1" (
            prepend apiSchemas = ["PhysicsMassAPI"]
        )
        {
            point3f physics:centerOfMass = (0, 0, 0)
            float physics:density = 100
            float3 physics:diagonalInertia = (-4.25124, -1.90554, 6.9585476)
            float physics:mass = 0.6783783
            quatf physics:principalAxes = (0.34476227, 0.88530046, 0.26440972, 0.16573949)
            matrix4d xformOp:transform = ( (0.245507, 0, 0, 0), (0, 0.008, 0, 0), (0, 0, 0.042633, 0), (0.021031, -0.270267, -0.01336, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Cube "Cube" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(1, 0, 0)]
                float[] primvars:displayOpacity = [0.5]
            }
        }

        def Xform "cabinet9_drawer1_collision_2" (
            prepend apiSchemas = ["PhysicsMassAPI"]
        )
        {
            point3f physics:centerOfMass = (0, 0, 0)
            float physics:density = 100
            float3 physics:diagonalInertia = (-4.25124, -1.90554, 6.9585476)
            float physics:mass = 0.6783783
            quatf physics:principalAxes = (0.34476227, 0.88530046, 0.26440972, 0.16573949)
            matrix4d xformOp:transform = ( (0.0095, 0, 0, 0), (0, 0.298468, 0, 0), (0, 0, 0.064993, 0), (-0.233977, 0, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Cube "Cube" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(1, 0, 0)]
                float[] primvars:displayOpacity = [0.5]
            }
        }

        def Xform "cabinet9_drawer1_collision_3" (
            prepend apiSchemas = ["PhysicsMassAPI"]
        )
        {
            point3f physics:centerOfMass = (0, 0, 0)
            float physics:density = 100
            float3 physics:diagonalInertia = (-4.25124, -1.90554, 6.9585476)
            float physics:mass = 0.6783783
            quatf physics:principalAxes = (0.34476227, 0.88530046, 0.26440972, 0.16573949)
            matrix4d xformOp:transform = ( (0.008, 0, 0, 0), (0, 0.269804, 0, 0), (0, 0, 0.042633, 0), (0.260372, 0, -0.01336, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Cube "Cube" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(1, 0, 0)]
                float[] primvars:displayOpacity = [0.5]
            }
        }

        def Xform "cabinet9_drawer1_collision_4" (
            prepend apiSchemas = ["PhysicsMassAPI"]
        )
        {
            point3f physics:centerOfMass = (0, 0, 0)
            float physics:density = 100
            float3 physics:diagonalInertia = (-4.25124, -1.90554, 6.9585476)
            float physics:mass = 0.6783783
            quatf physics:principalAxes = (0.34476227, 0.88530046, 0.26440972, 0.16573949)
            matrix4d xformOp:transform = ( (0.245507, 0, 0, 0), (0, 0.269804, 0, 0), (0, 0, 0.0075, 0), (0.021031, 0, -0.047595, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Cube "Cube" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(1, 0, 0)]
                float[] primvars:displayOpacity = [0.5]
            }
        }

        def Xform "cabinet9_drawer1_handle"
        {
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 2.220446049250313e-16, 1, 0), (0, -1, 2.220446049250313e-16, 0), (-0.26980946, 0.00142363, 0.01676949, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Xform "cabinet9_drawer1_handle_visual_0" (
                prepend references = @./../meshes/usd/visual/SM_Kitchen_Handle.usda@</SM_Kitchen_Handle>
            )
            {
                matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]

                over "SM_Kitchen_Handle" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    rel material:binding = </_materials/_Game_Materials_Laborraum_M_Metal_Brushed_M_Metal_Brushed_003>
                }
            }

            def Xform "cabinet9_drawer1_handle_collision_0" (
                prepend apiSchemas = ["PhysicsMassAPI"]
            )
            {
                point3f physics:centerOfMass = (0, 0, 0)
                float physics:density = 100
                float3 physics:diagonalInertia = (-4.25124, -1.90554, 6.9585476)
                float physics:mass = 0.6783783
                quatf physics:principalAxes = (0.34476227, 0.88530046, 0.26440972, 0.16573949)
                matrix4d xformOp:transform = ( (0.01, 0, 0, 0), (0, 0.0065, 0, 0), (0, 0, 0.0065, 0), (0.0164985, 0, 0.08, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]

                def Cube "Cube" (
                    prepend apiSchemas = ["PhysicsCollisionAPI"]
                )
                {
                    float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                    bool physics:collisionEnabled = 1
                    color3f[] primvars:displayColor = [(1, 0, 0)]
                    float[] primvars:displayOpacity = [0.5]
                }
            }

            def Xform "cabinet9_drawer1_handle_collision_1" (
                prepend apiSchemas = ["PhysicsMassAPI"]
            )
            {
                point3f physics:centerOfMass = (0, 0, 0)
                float physics:density = 100
                float3 physics:diagonalInertia = (-4.25124, -1.90554, 6.9585476)
                float physics:mass = 0.6783783
                quatf physics:principalAxes = (0.34476227, 0.88530046, 0.26440972, 0.16573949)
                matrix4d xformOp:transform = ( (0.01, 0, 0, 0), (0, 0.0065, 0, 0), (0, 0, 0.0065, 0), (0.0164985, 0, -0.08, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]

                def Cube "Cube" (
                    prepend apiSchemas = ["PhysicsCollisionAPI"]
                )
                {
                    float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                    bool physics:collisionEnabled = 1
                    color3f[] primvars:displayColor = [(1, 0, 0)]
                    float[] primvars:displayOpacity = [0.5]
                }
            }

            def Xform "cabinet9_drawer1_handle_collision_2" (
                prepend apiSchemas = ["PhysicsMassAPI"]
            )
            {
                point3f physics:centerOfMass = (0, 0, 0)
                float physics:density = 100
                float3 physics:diagonalInertia = (-4.25124, -1.90554, 6.9585476)
                float physics:mass = 0.6783783
                quatf physics:principalAxes = (0.34476227, 0.88530046, 0.26440972, 0.16573949)
                matrix4d xformOp:transform = ( (0.0065, 0, 0, 0), (0, 0.0065, 0, 0), (0, 0, 0.086516, 0), (0, 0, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]

                def Cube "Cube" (
                    prepend apiSchemas = ["PhysicsCollisionAPI"]
                )
                {
                    float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                    bool physics:collisionEnabled = 1
                    color3f[] primvars:displayColor = [(1, 0, 0)]
                    float[] primvars:displayOpacity = [0.5]
                }
            }
        }
    }

    def Xform "cabinet9_drawer2" (
        prepend apiSchemas = ["PhysicsRigidBodyAPI"]
    )
    {
        bool physics:rigidBodyEnabled = 1
        matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (2.54212937, 2.77203603, 0.6290124100000001, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]

        def Xform "cabinet9_drawer2_visual_0" (
            prepend references = @./../meshes/usd/visual/SM_Kitchen_09_Drawer_02.usda@</SM_Kitchen_09_Drawer_02>
        )
        {
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            over "SM_Kitchen_09_Base_Drawer_02" (
                prepend apiSchemas = ["MaterialBindingAPI"]
            )
            {
                rel material:binding = </_materials/_Game_Materials_Laborraum_M_Plastic_White_M_Plastic_White_009>

                over "_Game_Materials_Laborraum_M_Metal_Chrome_M_Metal_Chrome_002" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    rel material:binding = </_materials/_Game_Materials_Laborraum_M_Metal_Chrome_M_Metal_Chrome_002>
                }

                over "_Game_Materials_Laborraum_M_Kitchen_Fronts_M_Kitchen_Fronts_003" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    rel material:binding = </_materials/_Game_Materials_Laborraum_M_Kitchen_Fronts_M_Kitchen_Fronts_003>
                }

                over "_Game_Materials_Laborraum_M_Plastic_White_M_Plastic_White_009" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    rel material:binding = </_materials/_Game_Materials_Laborraum_M_Plastic_White_M_Plastic_White_009>
                }

                over "_Game_Materials_Laborraum_M_Drawer_Mat_M_Drawer_Mat_002" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    rel material:binding = </_materials/_Game_Materials_Laborraum_M_Drawer_Mat_M_Drawer_Mat_002>
                }
            }
        }

        def Xform "cabinet9_drawer2_collision_0" (
            prepend apiSchemas = ["PhysicsMassAPI"]
        )
        {
            point3f physics:centerOfMass = (0, 0, 0)
            float physics:density = 100
            float3 physics:diagonalInertia = (-5.2892876, -2.8912802, 10.365362)
            float physics:mass = 0.92487997
            quatf physics:principalAxes = (-0.24516177, -0.15246214, 0.34992623, 0.89118046)
            matrix4d xformOp:transform = ( (0.245507, 0, 0, 0), (0, 0.008, 0, 0), (0, 0, 0.011649, 0), (0.021031, 0.270267, 0.041246, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Cube "Cube" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(1, 0, 0)]
                float[] primvars:displayOpacity = [0.5]
            }
        }

        def Xform "cabinet9_drawer2_collision_1" (
            prepend apiSchemas = ["PhysicsMassAPI"]
        )
        {
            point3f physics:centerOfMass = (0, 0, 0)
            float physics:density = 100
            float3 physics:diagonalInertia = (-5.2892876, -2.8912802, 10.365362)
            float physics:mass = 0.92487997
            quatf physics:principalAxes = (-0.24516177, -0.15246214, 0.34992623, 0.89118046)
            matrix4d xformOp:transform = ( (0.245507, 0, 0, 0), (0, 0.008, 0, 0), (0, 0, 0.011649, 0), (0.021031, -0.270267, 0.041246, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Cube "Cube" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(1, 0, 0)]
                float[] primvars:displayOpacity = [0.5]
            }
        }

        def Xform "cabinet9_drawer2_collision_2" (
            prepend apiSchemas = ["PhysicsMassAPI"]
        )
        {
            point3f physics:centerOfMass = (0, 0, 0)
            float physics:density = 100
            float3 physics:diagonalInertia = (-5.2892876, -2.8912802, 10.365362)
            float physics:mass = 0.92487997
            quatf physics:principalAxes = (-0.24516177, -0.15246214, 0.34992623, 0.89118046)
            matrix4d xformOp:transform = ( (0.245507, 0, 0, 0), (0, 0.008, 0, 0), (0, 0, 0.041748, 0), (0.021031, 0.270267, -0.078968, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Cube "Cube" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(1, 0, 0)]
                float[] primvars:displayOpacity = [0.5]
            }
        }

        def Xform "cabinet9_drawer2_collision_3" (
            prepend apiSchemas = ["PhysicsMassAPI"]
        )
        {
            point3f physics:centerOfMass = (0, 0, 0)
            float physics:density = 100
            float3 physics:diagonalInertia = (-5.2892876, -2.8912802, 10.365362)
            float physics:mass = 0.92487997
            quatf physics:principalAxes = (-0.24516177, -0.15246214, 0.34992623, 0.89118046)
            matrix4d xformOp:transform = ( (0.245507, 0, 0, 0), (0, 0.008, 0, 0), (0, 0, 0.041748, 0), (0.021031, -0.270267, -0.078968, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Cube "Cube" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(1, 0, 0)]
                float[] primvars:displayOpacity = [0.5]
            }
        }

        def Xform "cabinet9_drawer2_collision_4" (
            prepend apiSchemas = ["PhysicsMassAPI"]
        )
        {
            point3f physics:centerOfMass = (0, 0, 0)
            float physics:density = 100
            float3 physics:diagonalInertia = (-5.2892876, -2.8912802, 10.365362)
            float physics:mass = 0.92487997
            quatf physics:principalAxes = (-0.24516177, -0.15246214, 0.34992623, 0.89118046)
            matrix4d xformOp:transform = ( (0.0095, 0, 0, 0), (0, 0.298468, 0, 0), (0, 0, 0.131375, 0), (-0.233977, 0, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Cube "Cube" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(1, 0, 0)]
                float[] primvars:displayOpacity = [0.5]
            }
        }

        def Xform "cabinet9_drawer2_collision_5" (
            prepend apiSchemas = ["PhysicsMassAPI"]
        )
        {
            point3f physics:centerOfMass = (0, 0, 0)
            float physics:density = 100
            float3 physics:diagonalInertia = (-5.2892876, -2.8912802, 10.365362)
            float physics:mass = 0.92487997
            quatf physics:principalAxes = (-0.24516177, -0.15246214, 0.34992623, 0.89118046)
            matrix4d xformOp:transform = ( (0.008, 0, 0, 0), (0, 0.269804, 0, 0), (0, 0, 0.084491, 0), (0.260372, 0, -0.037996, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Cube "Cube" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(1, 0, 0)]
                float[] primvars:displayOpacity = [0.5]
            }
        }

        def Xform "cabinet9_drawer2_collision_6" (
            prepend apiSchemas = ["PhysicsMassAPI"]
        )
        {
            point3f physics:centerOfMass = (0, 0, 0)
            float physics:density = 100
            float3 physics:diagonalInertia = (-5.2892876, -2.8912802, 10.365362)
            float physics:mass = 0.92487997
            quatf physics:principalAxes = (-0.24516177, -0.15246214, 0.34992623, 0.89118046)
            matrix4d xformOp:transform = ( (0.245507, 0, 0, 0), (0, 0.269804, 0, 0), (0, 0, 0.008, 0), (0.021031, 0, -0.113735, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Cube "Cube" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(1, 0, 0)]
                float[] primvars:displayOpacity = [0.5]
            }
        }

        def Xform "cabinet9_drawer2_handle"
        {
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 2.220446049250313e-16, 1, 0), (0, -1, 2.220446049250313e-16, 0), (-0.2707106, 0.00106413, 0.08500843, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Xform "cabinet9_drawer2_handle_visual_0" (
                prepend references = @./../meshes/usd/visual/SM_Kitchen_Handle.usda@</SM_Kitchen_Handle>
            )
            {
                matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]

                over "SM_Kitchen_Handle" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    rel material:binding = </_materials/_Game_Materials_Laborraum_M_Metal_Brushed_M_Metal_Brushed_003>
                }
            }

            def Xform "cabinet9_drawer2_handle_collision_0" (
                prepend apiSchemas = ["PhysicsMassAPI"]
            )
            {
                point3f physics:centerOfMass = (0, 0, 0)
                float physics:density = 100
                float3 physics:diagonalInertia = (-5.2892876, -2.8912802, 10.365362)
                float physics:mass = 0.92487997
                quatf physics:principalAxes = (-0.24516177, -0.15246214, 0.34992623, 0.89118046)
                matrix4d xformOp:transform = ( (0.01, 0, 0, 0), (0, 0.0065, 0, 0), (0, 0, 0.0065, 0), (0.0164985, 0, 0.08, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]

                def Cube "Cube" (
                    prepend apiSchemas = ["PhysicsCollisionAPI"]
                )
                {
                    float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                    bool physics:collisionEnabled = 1
                    color3f[] primvars:displayColor = [(1, 0, 0)]
                    float[] primvars:displayOpacity = [0.5]
                }
            }

            def Xform "cabinet9_drawer2_handle_collision_1" (
                prepend apiSchemas = ["PhysicsMassAPI"]
            )
            {
                point3f physics:centerOfMass = (0, 0, 0)
                float physics:density = 100
                float3 physics:diagonalInertia = (-5.2892876, -2.8912802, 10.365362)
                float physics:mass = 0.92487997
                quatf physics:principalAxes = (-0.24516177, -0.15246214, 0.34992623, 0.89118046)
                matrix4d xformOp:transform = ( (0.01, 0, 0, 0), (0, 0.0065, 0, 0), (0, 0, 0.0065, 0), (0.0164985, 0, -0.08, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]

                def Cube "Cube" (
                    prepend apiSchemas = ["PhysicsCollisionAPI"]
                )
                {
                    float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                    bool physics:collisionEnabled = 1
                    color3f[] primvars:displayColor = [(1, 0, 0)]
                    float[] primvars:displayOpacity = [0.5]
                }
            }

            def Xform "cabinet9_drawer2_handle_collision_2" (
                prepend apiSchemas = ["PhysicsMassAPI"]
            )
            {
                point3f physics:centerOfMass = (0, 0, 0)
                float physics:density = 100
                float3 physics:diagonalInertia = (-5.2892876, -2.8912802, 10.365362)
                float physics:mass = 0.92487997
                quatf physics:principalAxes = (-0.24516177, -0.15246214, 0.34992623, 0.89118046)
                matrix4d xformOp:transform = ( (0.0065, 0, 0, 0), (0, 0.0065, 0, 0), (0, 0, 0.086516, 0), (0, 0, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]

                def Cube "Cube" (
                    prepend apiSchemas = ["PhysicsCollisionAPI"]
                )
                {
                    float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                    bool physics:collisionEnabled = 1
                    color3f[] primvars:displayColor = [(1, 0, 0)]
                    float[] primvars:displayOpacity = [0.5]
                }
            }
        }
    }

    def Xform "cabinet9_drawer3" (
        prepend apiSchemas = ["PhysicsRigidBodyAPI"]
    )
    {
        bool physics:rigidBodyEnabled = 1
        matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (2.54243013, 2.77101736, 0.29795444000000004, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]

        def Xform "cabinet9_drawer3_visual_0" (
            prepend references = @./../meshes/usd/visual/SM_Kitchen_09_Drawer_03.usda@</SM_Kitchen_09_Drawer_03>
        )
        {
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            over "SM_Kitchen_09_Base_Drawer_03" (
                prepend apiSchemas = ["MaterialBindingAPI"]
            )
            {
                rel material:binding = </_materials/_Game_Materials_Laborraum_M_Plastic_White_M_Plastic_White_010>

                over "_Game_Materials_Laborraum_M_Metal_Chrome_M_Metal_Chrome_003" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    rel material:binding = </_materials/_Game_Materials_Laborraum_M_Metal_Chrome_M_Metal_Chrome_003>
                }

                over "_Game_Materials_Laborraum_M_Kitchen_Fronts_M_Kitchen_Fronts_004" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    rel material:binding = </_materials/_Game_Materials_Laborraum_M_Kitchen_Fronts_M_Kitchen_Fronts_004>
                }

                over "_Game_Materials_Laborraum_M_Plastic_White_M_Plastic_White_010" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    rel material:binding = </_materials/_Game_Materials_Laborraum_M_Plastic_White_M_Plastic_White_010>
                }

                over "_Game_Materials_Laborraum_M_Drawer_Mat_M_Drawer_Mat_003" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    rel material:binding = </_materials/_Game_Materials_Laborraum_M_Drawer_Mat_M_Drawer_Mat_003>
                }
            }
        }

        def Xform "cabinet9_drawer3_collision_0" (
            prepend apiSchemas = ["PhysicsMassAPI"]
        )
        {
            point3f physics:centerOfMass = (0, 0, 0)
            float physics:density = 100
            float3 physics:diagonalInertia = (-5.4504128, -3.830229, 12.159611)
            float physics:mass = 1.0757052
            quatf physics:principalAxes = (-0.2230673, -0.13975434, 0.3614801, 0.8944506)
            matrix4d xformOp:transform = ( (0.245507, 0, 0, 0), (0, 0.008, 0, 0), (0, 0, 0.011638, 0), (0.021031, 0.270267, -0.00926, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Cube "Cube" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(1, 0, 0)]
                float[] primvars:displayOpacity = [0.5]
            }
        }

        def Xform "cabinet9_drawer3_collision_1" (
            prepend apiSchemas = ["PhysicsMassAPI"]
        )
        {
            point3f physics:centerOfMass = (0, 0, 0)
            float physics:density = 100
            float3 physics:diagonalInertia = (-5.4504128, -3.830229, 12.159611)
            float physics:mass = 1.0757052
            quatf physics:principalAxes = (-0.2230673, -0.13975434, 0.3614801, 0.8944506)
            matrix4d xformOp:transform = ( (0.245507, 0, 0, 0), (0, 0.008, 0, 0), (0, 0, 0.011638, 0), (0.021031, -0.270267, -0.00926, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Cube "Cube" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(1, 0, 0)]
                float[] primvars:displayOpacity = [0.5]
            }
        }

        def Xform "cabinet9_drawer3_collision_2" (
            prepend apiSchemas = ["PhysicsMassAPI"]
        )
        {
            point3f physics:centerOfMass = (0, 0, 0)
            float physics:density = 100
            float3 physics:diagonalInertia = (-5.4504128, -3.830229, 12.159611)
            float physics:mass = 1.0757052
            quatf physics:principalAxes = (-0.2230673, -0.13975434, 0.3614801, 0.8944506)
            matrix4d xformOp:transform = ( (0.245507, 0, 0, 0), (0, 0.008, 0, 0), (0, 0, 0.041711, 0), (0.021031, 0.270267, -0.129424, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Cube "Cube" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(1, 0, 0)]
                float[] primvars:displayOpacity = [0.5]
            }
        }

        def Xform "cabinet9_drawer3_collision_3" (
            prepend apiSchemas = ["PhysicsMassAPI"]
        )
        {
            point3f physics:centerOfMass = (0, 0, 0)
            float physics:density = 100
            float3 physics:diagonalInertia = (-5.4504128, -3.830229, 12.159611)
            float physics:mass = 1.0757052
            quatf physics:principalAxes = (-0.2230673, -0.13975434, 0.3614801, 0.8944506)
            matrix4d xformOp:transform = ( (0.245507, 0, 0, 0), (0, 0.008, 0, 0), (0, 0, 0.041711, 0), (0.021031, -0.270267, -0.129424, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Cube "Cube" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(1, 0, 0)]
                float[] primvars:displayOpacity = [0.5]
            }
        }

        def Xform "cabinet9_drawer3_collision_4" (
            prepend apiSchemas = ["PhysicsMassAPI"]
        )
        {
            point3f physics:centerOfMass = (0, 0, 0)
            float physics:density = 100
            float3 physics:diagonalInertia = (-5.4504128, -3.830229, 12.159611)
            float physics:mass = 1.0757052
            quatf physics:principalAxes = (-0.2230673, -0.13975434, 0.3614801, 0.8944506)
            matrix4d xformOp:transform = ( (0.0095, 0, 0, 0), (0, 0.298468, 0, 0), (0, 0, 0.197867, 0), (-0.233977, 0, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Cube "Cube" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(1, 0, 0)]
                float[] primvars:displayOpacity = [0.5]
            }
        }

        def Xform "cabinet9_drawer3_collision_5" (
            prepend apiSchemas = ["PhysicsMassAPI"]
        )
        {
            point3f physics:centerOfMass = (0, 0, 0)
            float physics:density = 100
            float3 physics:diagonalInertia = (-5.4504128, -3.830229, 12.159611)
            float physics:mass = 1.0757052
            quatf physics:principalAxes = (-0.2230673, -0.13975434, 0.3614801, 0.8944506)
            matrix4d xformOp:transform = ( (0.008, 0, 0, 0), (0, 0.269804, 0, 0), (0, 0, 0.084105, 0), (0.260372, 0, -0.088821, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Cube "Cube" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(1, 0, 0)]
                float[] primvars:displayOpacity = [0.5]
            }
        }

        def Xform "cabinet9_drawer3_collision_6" (
            prepend apiSchemas = ["PhysicsMassAPI"]
        )
        {
            point3f physics:centerOfMass = (0, 0, 0)
            float physics:density = 100
            float3 physics:diagonalInertia = (-5.4504128, -3.830229, 12.159611)
            float physics:mass = 1.0757052
            quatf physics:principalAxes = (-0.2230673, -0.13975434, 0.3614801, 0.8944506)
            matrix4d xformOp:transform = ( (0.245507, 0, 0, 0), (0, 0.269804, 0, 0), (0, 0, 0.008, 0), (0.021031, 0, -0.164582, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Cube "Cube" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(1, 0, 0)]
                float[] primvars:displayOpacity = [0.5]
            }
        }

        def Xform "cabinet9_drawer3_handle"
        {
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 2.220446049250313e-16, 1, 0), (0, -1, 2.220446049250313e-16, 0), (-0.26888186, 0.00102875, 0.15027037, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Xform "cabinet9_drawer3_handle_visual_0" (
                prepend references = @./../meshes/usd/visual/SM_Kitchen_Handle.usda@</SM_Kitchen_Handle>
            )
            {
                matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]

                over "SM_Kitchen_Handle" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    rel material:binding = </_materials/_Game_Materials_Laborraum_M_Metal_Brushed_M_Metal_Brushed_003>
                }
            }

            def Xform "cabinet9_drawer3_handle_collision_0" (
                prepend apiSchemas = ["PhysicsMassAPI"]
            )
            {
                point3f physics:centerOfMass = (0, 0, 0)
                float physics:density = 100
                float3 physics:diagonalInertia = (-5.4504128, -3.830229, 12.159611)
                float physics:mass = 1.0757052
                quatf physics:principalAxes = (-0.2230673, -0.13975434, 0.3614801, 0.8944506)
                matrix4d xformOp:transform = ( (0.01, 0, 0, 0), (0, 0.0065, 0, 0), (0, 0, 0.0065, 0), (0.0164985, 0, 0.08, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]

                def Cube "Cube" (
                    prepend apiSchemas = ["PhysicsCollisionAPI"]
                )
                {
                    float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                    bool physics:collisionEnabled = 1
                    color3f[] primvars:displayColor = [(1, 0, 0)]
                    float[] primvars:displayOpacity = [0.5]
                }
            }

            def Xform "cabinet9_drawer3_handle_collision_1" (
                prepend apiSchemas = ["PhysicsMassAPI"]
            )
            {
                point3f physics:centerOfMass = (0, 0, 0)
                float physics:density = 100
                float3 physics:diagonalInertia = (-5.4504128, -3.830229, 12.159611)
                float physics:mass = 1.0757052
                quatf physics:principalAxes = (-0.2230673, -0.13975434, 0.3614801, 0.8944506)
                matrix4d xformOp:transform = ( (0.01, 0, 0, 0), (0, 0.0065, 0, 0), (0, 0, 0.0065, 0), (0.0164985, 0, -0.08, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]

                def Cube "Cube" (
                    prepend apiSchemas = ["PhysicsCollisionAPI"]
                )
                {
                    float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                    bool physics:collisionEnabled = 1
                    color3f[] primvars:displayColor = [(1, 0, 0)]
                    float[] primvars:displayOpacity = [0.5]
                }
            }

            def Xform "cabinet9_drawer3_handle_collision_2" (
                prepend apiSchemas = ["PhysicsMassAPI"]
            )
            {
                point3f physics:centerOfMass = (0, 0, 0)
                float physics:density = 100
                float3 physics:diagonalInertia = (-5.4504128, -3.830229, 12.159611)
                float physics:mass = 1.0757052
                quatf physics:principalAxes = (-0.2230673, -0.13975434, 0.3614801, 0.8944506)
                matrix4d xformOp:transform = ( (0.0065, 0, 0, 0), (0, 0.0065, 0, 0), (0, 0, 0.086516, 0), (0, 0, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]

                def Cube "Cube" (
                    prepend apiSchemas = ["PhysicsCollisionAPI"]
                )
                {
                    float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                    bool physics:collisionEnabled = 1
                    color3f[] primvars:displayColor = [(1, 0, 0)]
                    float[] primvars:displayOpacity = [0.5]
                }
            }
        }
    }

    def Xform "cabinet10_drawer1" (
        prepend apiSchemas = ["PhysicsRigidBodyAPI"]
    )
    {
        bool physics:rigidBodyEnabled = 1
        matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (2.54203385, 2.27254399, 0.82677193, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]

        def Xform "cabinet10_drawer1_visual_0" (
            prepend references = @./../meshes/usd/visual/SM_Kitchen_10_Drawer_01.usda@</SM_Kitchen_10_Drawer_01>
        )
        {
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            over "SM_Kitchen_10_Base_Drawer_01" (
                prepend apiSchemas = ["MaterialBindingAPI"]
            )
            {
                rel material:binding = </_materials/_Game_Materials_Laborraum_M_Drawer_Mat_M_Drawer_Mat_005>

                over "_Game_Materials_Laborraum_M_Metal_Brushed_M_Metal_Brushed_004" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    rel material:binding = </_materials/_Game_Materials_Laborraum_M_Metal_Brushed_M_Metal_Brushed_004>
                }

                over "_Game_Materials_Laborraum_M_Kitchen_Fronts_M_Kitchen_Fronts_006" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    rel material:binding = </_materials/_Game_Materials_Laborraum_M_Kitchen_Fronts_M_Kitchen_Fronts_006>
                }

                over "_Game_Materials_Laborraum_M_Plastic_White_M_Plastic_White_013" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    rel material:binding = </_materials/_Game_Materials_Laborraum_M_Plastic_White_M_Plastic_White_013>
                }

                over "_Game_Materials_Laborraum_M_Drawer_Mat_M_Drawer_Mat_005" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    rel material:binding = </_materials/_Game_Materials_Laborraum_M_Drawer_Mat_M_Drawer_Mat_005>
                }
            }
        }

        def Xform "cabinet10_drawer1_collision_0" (
            prepend apiSchemas = ["PhysicsMassAPI"]
        )
        {
            point3f physics:centerOfMass = (0, 0, 0)
            float physics:density = 100
            float3 physics:diagonalInertia = (-2.1781926, -1.1654099, 3.8509607)
            float physics:mass = 0.4815126
            quatf physics:principalAxes = (-0.5694668, -0.20332551, 0.77424425, -0.18684776)
            matrix4d xformOp:transform = ( (0.245507, 0, 0, 0), (0, 0.008, 0, 0), (0, 0, 0.042633, 0), (0.021031, 0.170562, -0.01336, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Cube "Cube" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(1, 0, 0)]
                float[] primvars:displayOpacity = [0.5]
            }
        }

        def Xform "cabinet10_drawer1_collision_1" (
            prepend apiSchemas = ["PhysicsMassAPI"]
        )
        {
            point3f physics:centerOfMass = (0, 0, 0)
            float physics:density = 100
            float3 physics:diagonalInertia = (-2.1781926, -1.1654099, 3.8509607)
            float physics:mass = 0.4815126
            quatf physics:principalAxes = (-0.5694668, -0.20332551, 0.77424425, -0.18684776)
            matrix4d xformOp:transform = ( (0.245507, 0, 0, 0), (0, 0.008, 0, 0), (0, 0, 0.042633, 0), (0.021031, -0.170562, -0.01336, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Cube "Cube" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(1, 0, 0)]
                float[] primvars:displayOpacity = [0.5]
            }
        }

        def Xform "cabinet10_drawer1_collision_2" (
            prepend apiSchemas = ["PhysicsMassAPI"]
        )
        {
            point3f physics:centerOfMass = (0, 0, 0)
            float physics:density = 100
            float3 physics:diagonalInertia = (-2.1781926, -1.1654099, 3.8509607)
            float physics:mass = 0.4815126
            quatf physics:principalAxes = (-0.5694668, -0.20332551, 0.77424425, -0.18684776)
            matrix4d xformOp:transform = ( (0.0095, 0, 0, 0), (0, 0.198867, 0, 0), (0, 0, 0.064993, 0), (-0.233977, 0, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Cube "Cube" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(1, 0, 0)]
                float[] primvars:displayOpacity = [0.5]
            }
        }

        def Xform "cabinet10_drawer1_collision_3" (
            prepend apiSchemas = ["PhysicsMassAPI"]
        )
        {
            point3f physics:centerOfMass = (0, 0, 0)
            float physics:density = 100
            float3 physics:diagonalInertia = (-2.1781926, -1.1654099, 3.8509607)
            float physics:mass = 0.4815126
            quatf physics:principalAxes = (-0.5694668, -0.20332551, 0.77424425, -0.18684776)
            matrix4d xformOp:transform = ( (0.008, 0, 0, 0), (0, 0.178822, 0, 0), (0, 0, 0.042633, 0), (0.260372, 0, -0.01336, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Cube "Cube" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(1, 0, 0)]
                float[] primvars:displayOpacity = [0.5]
            }
        }

        def Xform "cabinet10_drawer1_collision_4" (
            prepend apiSchemas = ["PhysicsMassAPI"]
        )
        {
            point3f physics:centerOfMass = (0, 0, 0)
            float physics:density = 100
            float3 physics:diagonalInertia = (-2.1781926, -1.1654099, 3.8509607)
            float physics:mass = 0.4815126
            quatf physics:principalAxes = (-0.5694668, -0.20332551, 0.77424425, -0.18684776)
            matrix4d xformOp:transform = ( (0.245507, 0, 0, 0), (0, 0.178822, 0, 0), (0, 0, 0.0075, 0), (0.021031, 0, -0.047595, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Cube "Cube" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(1, 0, 0)]
                float[] primvars:displayOpacity = [0.5]
            }
        }

        def Xform "cabinet10_drawer1_handle"
        {
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 2.220446049250313e-16, 1, 0), (0, -1, 2.220446049250313e-16, 0), (-0.26662336, -0.00124599, 0.0172039, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Xform "cabinet10_drawer1_handle_visual_0" (
                prepend references = @./../meshes/usd/visual/SM_Kitchen_Handle.usda@</SM_Kitchen_Handle>
            )
            {
                matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]

                over "SM_Kitchen_Handle" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    rel material:binding = </_materials/_Game_Materials_Laborraum_M_Metal_Brushed_M_Metal_Brushed_003>
                }
            }

            def Xform "cabinet10_drawer1_handle_collision_0" (
                prepend apiSchemas = ["PhysicsMassAPI"]
            )
            {
                point3f physics:centerOfMass = (0, 0, 0)
                float physics:density = 100
                float3 physics:diagonalInertia = (-2.1781926, -1.1654099, 3.8509607)
                float physics:mass = 0.4815126
                quatf physics:principalAxes = (-0.5694668, -0.20332551, 0.77424425, -0.18684776)
                matrix4d xformOp:transform = ( (0.01, 0, 0, 0), (0, 0.0065, 0, 0), (0, 0, 0.0065, 0), (0.0164985, 0, 0.08, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]

                def Cube "Cube" (
                    prepend apiSchemas = ["PhysicsCollisionAPI"]
                )
                {
                    float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                    bool physics:collisionEnabled = 1
                    color3f[] primvars:displayColor = [(1, 0, 0)]
                    float[] primvars:displayOpacity = [0.5]
                }
            }

            def Xform "cabinet10_drawer1_handle_collision_1" (
                prepend apiSchemas = ["PhysicsMassAPI"]
            )
            {
                point3f physics:centerOfMass = (0, 0, 0)
                float physics:density = 100
                float3 physics:diagonalInertia = (-2.1781926, -1.1654099, 3.8509607)
                float physics:mass = 0.4815126
                quatf physics:principalAxes = (-0.5694668, -0.20332551, 0.77424425, -0.18684776)
                matrix4d xformOp:transform = ( (0.01, 0, 0, 0), (0, 0.0065, 0, 0), (0, 0, 0.0065, 0), (0.0164985, 0, -0.08, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]

                def Cube "Cube" (
                    prepend apiSchemas = ["PhysicsCollisionAPI"]
                )
                {
                    float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                    bool physics:collisionEnabled = 1
                    color3f[] primvars:displayColor = [(1, 0, 0)]
                    float[] primvars:displayOpacity = [0.5]
                }
            }

            def Xform "cabinet10_drawer1_handle_collision_2" (
                prepend apiSchemas = ["PhysicsMassAPI"]
            )
            {
                point3f physics:centerOfMass = (0, 0, 0)
                float physics:density = 100
                float3 physics:diagonalInertia = (-2.1781926, -1.1654099, 3.8509607)
                float physics:mass = 0.4815126
                quatf physics:principalAxes = (-0.5694668, -0.20332551, 0.77424425, -0.18684776)
                matrix4d xformOp:transform = ( (0.0065, 0, 0, 0), (0, 0.0065, 0, 0), (0, 0, 0.086516, 0), (0, 0, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]

                def Cube "Cube" (
                    prepend apiSchemas = ["PhysicsCollisionAPI"]
                )
                {
                    float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                    bool physics:collisionEnabled = 1
                    color3f[] primvars:displayColor = [(1, 0, 0)]
                    float[] primvars:displayOpacity = [0.5]
                }
            }
        }
    }

    def Xform "cabinet10_drawer2" (
        prepend apiSchemas = ["PhysicsRigidBodyAPI"]
    )
    {
        bool physics:rigidBodyEnabled = 1
        matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (2.5422772300000003, 2.27185079, 0.6291715200000001, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]

        def Xform "cabinet10_drawer2_visual_0" (
            prepend references = @./../meshes/usd/visual/SM_Kitchen_10_Drawer_02.usda@</SM_Kitchen_10_Drawer_02>
        )
        {
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            over "SM_Kitchen_10_Base_Drawer_02" (
                prepend apiSchemas = ["MaterialBindingAPI"]
            )
            {
                rel material:binding = </_materials/_Game_Materials_Laborraum_M_Drawer_Mat_M_Drawer_Mat_006>

                over "_Game_Materials_Laborraum_M_Metal_Brushed_M_Metal_Brushed_005" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    rel material:binding = </_materials/_Game_Materials_Laborraum_M_Metal_Brushed_M_Metal_Brushed_005>
                }

                over "_Game_Materials_Laborraum_M_Kitchen_Fronts_M_Kitchen_Fronts_007" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    rel material:binding = </_materials/_Game_Materials_Laborraum_M_Kitchen_Fronts_M_Kitchen_Fronts_007>
                }

                over "_Game_Materials_Laborraum_M_Plastic_White_M_Plastic_White_014" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    rel material:binding = </_materials/_Game_Materials_Laborraum_M_Plastic_White_M_Plastic_White_014>
                }

                over "_Game_Materials_Laborraum_M_Drawer_Mat_M_Drawer_Mat_006" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    rel material:binding = </_materials/_Game_Materials_Laborraum_M_Drawer_Mat_M_Drawer_Mat_006>
                }
            }
        }

        def Xform "cabinet10_drawer2_collision_0" (
            prepend apiSchemas = ["PhysicsMassAPI"]
        )
        {
            point3f physics:centerOfMass = (0, 0, 0)
            float physics:density = 100
            float3 physics:diagonalInertia = (-2.5775924, -1.8522997, 5.835665)
            float physics:mass = 0.6502114
            quatf physics:principalAxes = (-0.53464806, -0.20126691, 0.8020559, -0.17421086)
            matrix4d xformOp:transform = ( (0.245507, 0, 0, 0), (0, 0.008, 0, 0), (0, 0, 0.011649, 0), (0.021031, 0.170562, 0.041246, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Cube "Cube" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(1, 0, 0)]
                float[] primvars:displayOpacity = [0.5]
            }
        }

        def Xform "cabinet10_drawer2_collision_1" (
            prepend apiSchemas = ["PhysicsMassAPI"]
        )
        {
            point3f physics:centerOfMass = (0, 0, 0)
            float physics:density = 100
            float3 physics:diagonalInertia = (-2.5775924, -1.8522997, 5.835665)
            float physics:mass = 0.6502114
            quatf physics:principalAxes = (-0.53464806, -0.20126691, 0.8020559, -0.17421086)
            matrix4d xformOp:transform = ( (0.245507, 0, 0, 0), (0, 0.008, 0, 0), (0, 0, 0.011649, 0), (0.021031, -0.170562, 0.041246, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Cube "Cube" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(1, 0, 0)]
                float[] primvars:displayOpacity = [0.5]
            }
        }

        def Xform "cabinet10_drawer2_collision_2" (
            prepend apiSchemas = ["PhysicsMassAPI"]
        )
        {
            point3f physics:centerOfMass = (0, 0, 0)
            float physics:density = 100
            float3 physics:diagonalInertia = (-2.5775924, -1.8522997, 5.835665)
            float physics:mass = 0.6502114
            quatf physics:principalAxes = (-0.53464806, -0.20126691, 0.8020559, -0.17421086)
            matrix4d xformOp:transform = ( (0.245507, 0, 0, 0), (0, 0.008, 0, 0), (0, 0, 0.041748, 0), (0.021031, 0.170562, -0.078968, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Cube "Cube" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(1, 0, 0)]
                float[] primvars:displayOpacity = [0.5]
            }
        }

        def Xform "cabinet10_drawer2_collision_3" (
            prepend apiSchemas = ["PhysicsMassAPI"]
        )
        {
            point3f physics:centerOfMass = (0, 0, 0)
            float physics:density = 100
            float3 physics:diagonalInertia = (-2.5775924, -1.8522997, 5.835665)
            float physics:mass = 0.6502114
            quatf physics:principalAxes = (-0.53464806, -0.20126691, 0.8020559, -0.17421086)
            matrix4d xformOp:transform = ( (0.245507, 0, 0, 0), (0, 0.008, 0, 0), (0, 0, 0.041748, 0), (0.021031, -0.170562, -0.078968, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Cube "Cube" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(1, 0, 0)]
                float[] primvars:displayOpacity = [0.5]
            }
        }

        def Xform "cabinet10_drawer2_collision_4" (
            prepend apiSchemas = ["PhysicsMassAPI"]
        )
        {
            point3f physics:centerOfMass = (0, 0, 0)
            float physics:density = 100
            float3 physics:diagonalInertia = (-2.5775924, -1.8522997, 5.835665)
            float physics:mass = 0.6502114
            quatf physics:principalAxes = (-0.53464806, -0.20126691, 0.8020559, -0.17421086)
            matrix4d xformOp:transform = ( (0.0095, 0, 0, 0), (0, 0.198867, 0, 0), (0, 0, 0.131375, 0), (-0.233977, 0, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Cube "Cube" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(1, 0, 0)]
                float[] primvars:displayOpacity = [0.5]
            }
        }

        def Xform "cabinet10_drawer2_collision_5" (
            prepend apiSchemas = ["PhysicsMassAPI"]
        )
        {
            point3f physics:centerOfMass = (0, 0, 0)
            float physics:density = 100
            float3 physics:diagonalInertia = (-2.5775924, -1.8522997, 5.835665)
            float physics:mass = 0.6502114
            quatf physics:principalAxes = (-0.53464806, -0.20126691, 0.8020559, -0.17421086)
            matrix4d xformOp:transform = ( (0.008, 0, 0, 0), (0, 0.178822, 0, 0), (0, 0, 0.084491, 0), (0.260372, 0, -0.037996, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Cube "Cube" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(1, 0, 0)]
                float[] primvars:displayOpacity = [0.5]
            }
        }

        def Xform "cabinet10_drawer2_collision_6" (
            prepend apiSchemas = ["PhysicsMassAPI"]
        )
        {
            point3f physics:centerOfMass = (0, 0, 0)
            float physics:density = 100
            float3 physics:diagonalInertia = (-2.5775924, -1.8522997, 5.835665)
            float physics:mass = 0.6502114
            quatf physics:principalAxes = (-0.53464806, -0.20126691, 0.8020559, -0.17421086)
            matrix4d xformOp:transform = ( (0.245507, 0, 0, 0), (0, 0.178822, 0, 0), (0, 0, 0.008, 0), (0.021031, 0, -0.113735, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Cube "Cube" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(1, 0, 0)]
                float[] primvars:displayOpacity = [0.5]
            }
        }

        def Xform "cabinet10_drawer2_handle"
        {
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 2.220446049250313e-16, 1, 0), (0, -1, 2.220446049250313e-16, 0), (-0.26686237, -0.00397854, 0.08541794, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Xform "cabinet10_drawer2_handle_visual_0" (
                prepend references = @./../meshes/usd/visual/SM_Kitchen_Handle.usda@</SM_Kitchen_Handle>
            )
            {
                matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]

                over "SM_Kitchen_Handle" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    rel material:binding = </_materials/_Game_Materials_Laborraum_M_Metal_Brushed_M_Metal_Brushed_003>
                }
            }

            def Xform "cabinet10_drawer2_handle_collision_0" (
                prepend apiSchemas = ["PhysicsMassAPI"]
            )
            {
                point3f physics:centerOfMass = (0, 0, 0)
                float physics:density = 100
                float3 physics:diagonalInertia = (-2.5775924, -1.8522997, 5.835665)
                float physics:mass = 0.6502114
                quatf physics:principalAxes = (-0.53464806, -0.20126691, 0.8020559, -0.17421086)
                matrix4d xformOp:transform = ( (0.01, 0, 0, 0), (0, 0.0065, 0, 0), (0, 0, 0.0065, 0), (0.0164985, 0, 0.08, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]

                def Cube "Cube" (
                    prepend apiSchemas = ["PhysicsCollisionAPI"]
                )
                {
                    float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                    bool physics:collisionEnabled = 1
                    color3f[] primvars:displayColor = [(1, 0, 0)]
                    float[] primvars:displayOpacity = [0.5]
                }
            }

            def Xform "cabinet10_drawer2_handle_collision_1" (
                prepend apiSchemas = ["PhysicsMassAPI"]
            )
            {
                point3f physics:centerOfMass = (0, 0, 0)
                float physics:density = 100
                float3 physics:diagonalInertia = (-2.5775924, -1.8522997, 5.835665)
                float physics:mass = 0.6502114
                quatf physics:principalAxes = (-0.53464806, -0.20126691, 0.8020559, -0.17421086)
                matrix4d xformOp:transform = ( (0.01, 0, 0, 0), (0, 0.0065, 0, 0), (0, 0, 0.0065, 0), (0.0164985, 0, -0.08, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]

                def Cube "Cube" (
                    prepend apiSchemas = ["PhysicsCollisionAPI"]
                )
                {
                    float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                    bool physics:collisionEnabled = 1
                    color3f[] primvars:displayColor = [(1, 0, 0)]
                    float[] primvars:displayOpacity = [0.5]
                }
            }

            def Xform "cabinet10_drawer2_handle_collision_2" (
                prepend apiSchemas = ["PhysicsMassAPI"]
            )
            {
                point3f physics:centerOfMass = (0, 0, 0)
                float physics:density = 100
                float3 physics:diagonalInertia = (-2.5775924, -1.8522997, 5.835665)
                float physics:mass = 0.6502114
                quatf physics:principalAxes = (-0.53464806, -0.20126691, 0.8020559, -0.17421086)
                matrix4d xformOp:transform = ( (0.0065, 0, 0, 0), (0, 0.0065, 0, 0), (0, 0, 0.086516, 0), (0, 0, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]

                def Cube "Cube" (
                    prepend apiSchemas = ["PhysicsCollisionAPI"]
                )
                {
                    float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                    bool physics:collisionEnabled = 1
                    color3f[] primvars:displayColor = [(1, 0, 0)]
                    float[] primvars:displayOpacity = [0.5]
                }
            }
        }
    }

    def Xform "cabinet10_drawer3" (
        prepend apiSchemas = ["PhysicsRigidBodyAPI"]
    )
    {
        bool physics:rigidBodyEnabled = 1
        matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (2.5425879000000005, 2.2715501899999997, 0.29715225000000006, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]

        def Xform "cabinet10_drawer3_visual_0" (
            prepend references = @./../meshes/usd/visual/SM_Kitchen_10_Drawer_03.usda@</SM_Kitchen_10_Drawer_03>
        )
        {
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            over "SM_Kitchen_10_Base_Drawer_03" (
                prepend apiSchemas = ["MaterialBindingAPI"]
            )
            {
                rel material:binding = </_materials/_Game_Materials_Laborraum_M_Drawer_Mat_M_Drawer_Mat_007>

                over "_Game_Materials_Laborraum_M_Metal_Chrome_M_Metal_Chrome_005" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    rel material:binding = </_materials/_Game_Materials_Laborraum_M_Metal_Chrome_M_Metal_Chrome_005>
                }

                over "_Game_Materials_Laborraum_M_Kitchen_Fronts_M_Kitchen_Fronts_008" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    rel material:binding = </_materials/_Game_Materials_Laborraum_M_Kitchen_Fronts_M_Kitchen_Fronts_008>
                }

                over "_Game_Materials_Laborraum_M_Plastic_White_M_Plastic_White_015" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    rel material:binding = </_materials/_Game_Materials_Laborraum_M_Plastic_White_M_Plastic_White_015>
                }

                over "_Game_Materials_Laborraum_M_Drawer_Mat_M_Drawer_Mat_007" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    rel material:binding = </_materials/_Game_Materials_Laborraum_M_Drawer_Mat_M_Drawer_Mat_007>
                }
            }
        }

        def Xform "cabinet10_drawer3_collision_0" (
            prepend apiSchemas = ["PhysicsMassAPI"]
        )
        {
            point3f physics:centerOfMass = (0, 0, 0)
            float physics:density = 100
            float3 physics:diagonalInertia = (-2.645346, -2.4815633, 7.133539)
            float physics:mass = 0.750759
            quatf physics:principalAxes = (-0.5118642, -0.4610361, 0.72486675, 0.0029947215)
            matrix4d xformOp:transform = ( (0.245507, 0, 0, 0), (0, 0.008, 0, 0), (0, 0, 0.011638, 0), (0.021031, 0.170562, -0.00926, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Cube "Cube" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(1, 0, 0)]
                float[] primvars:displayOpacity = [0.5]
            }
        }

        def Xform "cabinet10_drawer3_collision_1" (
            prepend apiSchemas = ["PhysicsMassAPI"]
        )
        {
            point3f physics:centerOfMass = (0, 0, 0)
            float physics:density = 100
            float3 physics:diagonalInertia = (-2.645346, -2.4815633, 7.133539)
            float physics:mass = 0.750759
            quatf physics:principalAxes = (-0.5118642, -0.4610361, 0.72486675, 0.0029947215)
            matrix4d xformOp:transform = ( (0.245507, 0, 0, 0), (0, 0.008, 0, 0), (0, 0, 0.011638, 0), (0.021031, -0.170562, -0.00926, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Cube "Cube" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(1, 0, 0)]
                float[] primvars:displayOpacity = [0.5]
            }
        }

        def Xform "cabinet10_drawer3_collision_2" (
            prepend apiSchemas = ["PhysicsMassAPI"]
        )
        {
            point3f physics:centerOfMass = (0, 0, 0)
            float physics:density = 100
            float3 physics:diagonalInertia = (-2.645346, -2.4815633, 7.133539)
            float physics:mass = 0.750759
            quatf physics:principalAxes = (-0.5118642, -0.4610361, 0.72486675, 0.0029947215)
            matrix4d xformOp:transform = ( (0.245507, 0, 0, 0), (0, 0.008, 0, 0), (0, 0, 0.041711, 0), (0.021031, 0.170562, -0.129424, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Cube "Cube" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(1, 0, 0)]
                float[] primvars:displayOpacity = [0.5]
            }
        }

        def Xform "cabinet10_drawer3_collision_3" (
            prepend apiSchemas = ["PhysicsMassAPI"]
        )
        {
            point3f physics:centerOfMass = (0, 0, 0)
            float physics:density = 100
            float3 physics:diagonalInertia = (-2.645346, -2.4815633, 7.133539)
            float physics:mass = 0.750759
            quatf physics:principalAxes = (-0.5118642, -0.4610361, 0.72486675, 0.0029947215)
            matrix4d xformOp:transform = ( (0.245507, 0, 0, 0), (0, 0.008, 0, 0), (0, 0, 0.041711, 0), (0.021031, -0.170562, -0.129424, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Cube "Cube" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(1, 0, 0)]
                float[] primvars:displayOpacity = [0.5]
            }
        }

        def Xform "cabinet10_drawer3_collision_4" (
            prepend apiSchemas = ["PhysicsMassAPI"]
        )
        {
            point3f physics:centerOfMass = (0, 0, 0)
            float physics:density = 100
            float3 physics:diagonalInertia = (-2.645346, -2.4815633, 7.133539)
            float physics:mass = 0.750759
            quatf physics:principalAxes = (-0.5118642, -0.4610361, 0.72486675, 0.0029947215)
            matrix4d xformOp:transform = ( (0.0095, 0, 0, 0), (0, 0.198867, 0, 0), (0, 0, 0.197867, 0), (-0.233977, 0, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Cube "Cube" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(1, 0, 0)]
                float[] primvars:displayOpacity = [0.5]
            }
        }

        def Xform "cabinet10_drawer3_collision_5" (
            prepend apiSchemas = ["PhysicsMassAPI"]
        )
        {
            point3f physics:centerOfMass = (0, 0, 0)
            float physics:density = 100
            float3 physics:diagonalInertia = (-2.645346, -2.4815633, 7.133539)
            float physics:mass = 0.750759
            quatf physics:principalAxes = (-0.5118642, -0.4610361, 0.72486675, 0.0029947215)
            matrix4d xformOp:transform = ( (0.008, 0, 0, 0), (0, 0.178822, 0, 0), (0, 0, 0.084105, 0), (0.260372, 0, -0.088821, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Cube "Cube" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(1, 0, 0)]
                float[] primvars:displayOpacity = [0.5]
            }
        }

        def Xform "cabinet10_drawer3_collision_6" (
            prepend apiSchemas = ["PhysicsMassAPI"]
        )
        {
            point3f physics:centerOfMass = (0, 0, 0)
            float physics:density = 100
            float3 physics:diagonalInertia = (-2.645346, -2.4815633, 7.133539)
            float physics:mass = 0.750759
            quatf physics:principalAxes = (-0.5118642, -0.4610361, 0.72486675, 0.0029947215)
            matrix4d xformOp:transform = ( (0.245507, 0, 0, 0), (0, 0.178822, 0, 0), (0, 0, 0.008, 0), (0.021031, 0, -0.164582, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Cube "Cube" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(1, 0, 0)]
                float[] primvars:displayOpacity = [0.5]
            }
        }

        def Xform "cabinet10_drawer3_handle"
        {
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 2.220446049250313e-16, 1, 0), (0, -1, 2.220446049250313e-16, 0), (-0.26712164, -0.00402777, 0.15116583, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Xform "cabinet10_drawer3_handle_visual_0" (
                prepend references = @./../meshes/usd/visual/SM_Kitchen_Handle.usda@</SM_Kitchen_Handle>
            )
            {
                matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]

                over "SM_Kitchen_Handle" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    rel material:binding = </_materials/_Game_Materials_Laborraum_M_Metal_Brushed_M_Metal_Brushed_003>
                }
            }

            def Xform "cabinet10_drawer3_handle_collision_0" (
                prepend apiSchemas = ["PhysicsMassAPI"]
            )
            {
                point3f physics:centerOfMass = (0, 0, 0)
                float physics:density = 100
                float3 physics:diagonalInertia = (-2.645346, -2.4815633, 7.133539)
                float physics:mass = 0.750759
                quatf physics:principalAxes = (-0.5118642, -0.4610361, 0.72486675, 0.0029947215)
                matrix4d xformOp:transform = ( (0.01, 0, 0, 0), (0, 0.0065, 0, 0), (0, 0, 0.0065, 0), (0.0164985, 0, 0.08, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]

                def Cube "Cube" (
                    prepend apiSchemas = ["PhysicsCollisionAPI"]
                )
                {
                    float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                    bool physics:collisionEnabled = 1
                    color3f[] primvars:displayColor = [(1, 0, 0)]
                    float[] primvars:displayOpacity = [0.5]
                }
            }

            def Xform "cabinet10_drawer3_handle_collision_1" (
                prepend apiSchemas = ["PhysicsMassAPI"]
            )
            {
                point3f physics:centerOfMass = (0, 0, 0)
                float physics:density = 100
                float3 physics:diagonalInertia = (-2.645346, -2.4815633, 7.133539)
                float physics:mass = 0.750759
                quatf physics:principalAxes = (-0.5118642, -0.4610361, 0.72486675, 0.0029947215)
                matrix4d xformOp:transform = ( (0.01, 0, 0, 0), (0, 0.0065, 0, 0), (0, 0, 0.0065, 0), (0.0164985, 0, -0.08, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]

                def Cube "Cube" (
                    prepend apiSchemas = ["PhysicsCollisionAPI"]
                )
                {
                    float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                    bool physics:collisionEnabled = 1
                    color3f[] primvars:displayColor = [(1, 0, 0)]
                    float[] primvars:displayOpacity = [0.5]
                }
            }

            def Xform "cabinet10_drawer3_handle_collision_2" (
                prepend apiSchemas = ["PhysicsMassAPI"]
            )
            {
                point3f physics:centerOfMass = (0, 0, 0)
                float physics:density = 100
                float3 physics:diagonalInertia = (-2.645346, -2.4815633, 7.133539)
                float physics:mass = 0.750759
                quatf physics:principalAxes = (-0.5118642, -0.4610361, 0.72486675, 0.0029947215)
                matrix4d xformOp:transform = ( (0.0065, 0, 0, 0), (0, 0.0065, 0, 0), (0, 0, 0.086516, 0), (0, 0, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]

                def Cube "Cube" (
                    prepend apiSchemas = ["PhysicsCollisionAPI"]
                )
                {
                    float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                    bool physics:collisionEnabled = 1
                    color3f[] primvars:displayColor = [(1, 0, 0)]
                    float[] primvars:displayOpacity = [0.5]
                }
            }
        }
    }

    def Xform "cabinet11_drawer1" (
        prepend apiSchemas = ["PhysicsRigidBodyAPI"]
    )
    {
        bool physics:rigidBodyEnabled = 1
        matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (2.54211427, 1.62219746, 0.82801322, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]

        def Xform "cabinet11_drawer1_visual_0" (
            prepend references = @./../meshes/usd/visual/SM_Kitchen_11_Drawer_01.usda@</SM_Kitchen_11_Drawer_01>
        )
        {
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            over "SM_Kitchen_11_Drawer_01" (
                prepend apiSchemas = ["MaterialBindingAPI"]
            )
            {
                rel material:binding = </_materials/_Game_Materials_Laborraum_M_Drawer_Mat_M_Drawer_Mat_008>

                over "_Game_Materials_Laborraum_M_Metal_Chrome_M_Metal_Chrome_007" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    rel material:binding = </_materials/_Game_Materials_Laborraum_M_Metal_Chrome_M_Metal_Chrome_007>
                }

                over "_Game_Materials_Laborraum_M_Kitchen_Fronts_M_Kitchen_Fronts_009" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    rel material:binding = </_materials/_Game_Materials_Laborraum_M_Kitchen_Fronts_M_Kitchen_Fronts_009>
                }

                over "_Game_Materials_Laborraum_M_Plastic_White_M_Plastic_White_017" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    rel material:binding = </_materials/_Game_Materials_Laborraum_M_Plastic_White_M_Plastic_White_017>
                }

                over "_Game_Materials_Laborraum_M_Drawer_Mat_M_Drawer_Mat_008" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    rel material:binding = </_materials/_Game_Materials_Laborraum_M_Drawer_Mat_M_Drawer_Mat_008>
                }
            }
        }

        def Xform "cabinet11_drawer1_collision_0" (
            prepend apiSchemas = ["PhysicsMassAPI"]
        )
        {
            point3f physics:centerOfMass = (0, 0, 0)
            float physics:density = 100
            float3 physics:diagonalInertia = (-10.994816, -6.510247, 18.374786)
            float physics:mass = 0.9771583
            quatf physics:principalAxes = (-0.2888746, -0.25373927, 0.33756083, 0.8591976)
            matrix4d xformOp:transform = ( (0.245507, 0, 0, 0), (0, 0.008, 0, 0), (0, 0, 0.042633, 0), (0.021031, 0.418233, -0.01336, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Cube "Cube" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(1, 0, 0)]
                float[] primvars:displayOpacity = [0.5]
            }
        }

        def Xform "cabinet11_drawer1_collision_1" (
            prepend apiSchemas = ["PhysicsMassAPI"]
        )
        {
            point3f physics:centerOfMass = (0, 0, 0)
            float physics:density = 100
            float3 physics:diagonalInertia = (-10.994816, -6.510247, 18.374786)
            float physics:mass = 0.9771583
            quatf physics:principalAxes = (-0.2888746, -0.25373927, 0.33756083, 0.8591976)
            matrix4d xformOp:transform = ( (0.245507, 0, 0, 0), (0, 0.008, 0, 0), (0, 0, 0.042633, 0), (0.021031, -0.418233, -0.01336, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Cube "Cube" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(1, 0, 0)]
                float[] primvars:displayOpacity = [0.5]
            }
        }

        def Xform "cabinet11_drawer1_collision_2" (
            prepend apiSchemas = ["PhysicsMassAPI"]
        )
        {
            point3f physics:centerOfMass = (0, 0, 0)
            float physics:density = 100
            float3 physics:diagonalInertia = (-10.994816, -6.510247, 18.374786)
            float physics:mass = 0.9771583
            quatf physics:principalAxes = (-0.2888746, -0.25373927, 0.33756083, 0.8591976)
            matrix4d xformOp:transform = ( (0.0095, 0, 0, 0), (0, 0.448341, 0, 0), (0, 0, 0.064993, 0), (-0.233977, 0, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Cube "Cube" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(1, 0, 0)]
                float[] primvars:displayOpacity = [0.5]
            }
        }

        def Xform "cabinet11_drawer1_collision_3" (
            prepend apiSchemas = ["PhysicsMassAPI"]
        )
        {
            point3f physics:centerOfMass = (0, 0, 0)
            float physics:density = 100
            float3 physics:diagonalInertia = (-10.994816, -6.510247, 18.374786)
            float physics:mass = 0.9771583
            quatf physics:principalAxes = (-0.2888746, -0.25373927, 0.33756083, 0.8591976)
            matrix4d xformOp:transform = ( (0.008, 0, 0, 0), (0, 0.419788, 0, 0), (0, 0, 0.042633, 0), (0.260372, 0, -0.01336, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Cube "Cube" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(1, 0, 0)]
                float[] primvars:displayOpacity = [0.5]
            }
        }

        def Xform "cabinet11_drawer1_collision_4" (
            prepend apiSchemas = ["PhysicsMassAPI"]
        )
        {
            point3f physics:centerOfMass = (0, 0, 0)
            float physics:density = 100
            float3 physics:diagonalInertia = (-10.994816, -6.510247, 18.374786)
            float physics:mass = 0.9771583
            quatf physics:principalAxes = (-0.2888746, -0.25373927, 0.33756083, 0.8591976)
            matrix4d xformOp:transform = ( (0.245507, 0, 0, 0), (0, 0.419788, 0, 0), (0, 0, 0.0075, 0), (0.021031, 0, -0.047595, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Cube "Cube" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(1, 0, 0)]
                float[] primvars:displayOpacity = [0.5]
            }
        }

        def Xform "cabinet11_drawer1_handle"
        {
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 2.220446049250313e-16, 1, 0), (0, -1, 2.220446049250313e-16, 0), (-0.26662336, -0.00124599, 0.0172039, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Xform "cabinet11_drawer1_handle_visual_0" (
                prepend references = @./../meshes/usd/visual/SM_Kitchen_Handle.usda@</SM_Kitchen_Handle>
            )
            {
                matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]

                over "SM_Kitchen_Handle" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    rel material:binding = </_materials/_Game_Materials_Laborraum_M_Metal_Brushed_M_Metal_Brushed_003>
                }
            }

            def Xform "cabinet11_drawer1_handle_collision_0" (
                prepend apiSchemas = ["PhysicsMassAPI"]
            )
            {
                point3f physics:centerOfMass = (0, 0, 0)
                float physics:density = 100
                float3 physics:diagonalInertia = (-10.994816, -6.510247, 18.374786)
                float physics:mass = 0.9771583
                quatf physics:principalAxes = (-0.2888746, -0.25373927, 0.33756083, 0.8591976)
                matrix4d xformOp:transform = ( (0.01, 0, 0, 0), (0, 0.0065, 0, 0), (0, 0, 0.0065, 0), (0.0164985, 0, 0.08, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]

                def Cube "Cube" (
                    prepend apiSchemas = ["PhysicsCollisionAPI"]
                )
                {
                    float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                    bool physics:collisionEnabled = 1
                    color3f[] primvars:displayColor = [(1, 0, 0)]
                    float[] primvars:displayOpacity = [0.5]
                }
            }

            def Xform "cabinet11_drawer1_handle_collision_1" (
                prepend apiSchemas = ["PhysicsMassAPI"]
            )
            {
                point3f physics:centerOfMass = (0, 0, 0)
                float physics:density = 100
                float3 physics:diagonalInertia = (-10.994816, -6.510247, 18.374786)
                float physics:mass = 0.9771583
                quatf physics:principalAxes = (-0.2888746, -0.25373927, 0.33756083, 0.8591976)
                matrix4d xformOp:transform = ( (0.01, 0, 0, 0), (0, 0.0065, 0, 0), (0, 0, 0.0065, 0), (0.0164985, 0, -0.08, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]

                def Cube "Cube" (
                    prepend apiSchemas = ["PhysicsCollisionAPI"]
                )
                {
                    float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                    bool physics:collisionEnabled = 1
                    color3f[] primvars:displayColor = [(1, 0, 0)]
                    float[] primvars:displayOpacity = [0.5]
                }
            }

            def Xform "cabinet11_drawer1_handle_collision_2" (
                prepend apiSchemas = ["PhysicsMassAPI"]
            )
            {
                point3f physics:centerOfMass = (0, 0, 0)
                float physics:density = 100
                float3 physics:diagonalInertia = (-10.994816, -6.510247, 18.374786)
                float physics:mass = 0.9771583
                quatf physics:principalAxes = (-0.2888746, -0.25373927, 0.33756083, 0.8591976)
                matrix4d xformOp:transform = ( (0.0065, 0, 0, 0), (0, 0.0065, 0, 0), (0, 0, 0.086516, 0), (0, 0, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]

                def Cube "Cube" (
                    prepend apiSchemas = ["PhysicsCollisionAPI"]
                )
                {
                    float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                    bool physics:collisionEnabled = 1
                    color3f[] primvars:displayColor = [(1, 0, 0)]
                    float[] primvars:displayOpacity = [0.5]
                }
            }
        }
    }

    def Xform "cabinet11_drawer2" (
        prepend apiSchemas = ["PhysicsRigidBodyAPI"]
    )
    {
        bool physics:rigidBodyEnabled = 1
        matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (2.54262788, 1.62201787, 0.6290229, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]

        def Xform "cabinet11_drawer2_visual_0" (
            prepend references = @./../meshes/usd/visual/SM_Kitchen_11_Drawer_02.usda@</SM_Kitchen_11_Drawer_02>
        )
        {
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            over "SM_Kitchen_11_Drawer_02" (
                prepend apiSchemas = ["MaterialBindingAPI"]
            )
            {
                rel material:binding = </_materials/_Game_Materials_Laborraum_M_Drawer_Mat_M_Drawer_Mat_009>

                over "_Game_Materials_Laborraum_M_Metal_Chrome_M_Metal_Chrome_008" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    rel material:binding = </_materials/_Game_Materials_Laborraum_M_Metal_Chrome_M_Metal_Chrome_008>
                }

                over "_Game_Materials_Laborraum_M_Kitchen_Fronts_M_Kitchen_Fronts_010" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    rel material:binding = </_materials/_Game_Materials_Laborraum_M_Kitchen_Fronts_M_Kitchen_Fronts_010>
                }

                over "_Game_Materials_Laborraum_M_Plastic_White_M_Plastic_White_018" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    rel material:binding = </_materials/_Game_Materials_Laborraum_M_Plastic_White_M_Plastic_White_018>
                }

                over "_Game_Materials_Laborraum_M_Drawer_Mat_M_Drawer_Mat_009" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    rel material:binding = </_materials/_Game_Materials_Laborraum_M_Drawer_Mat_M_Drawer_Mat_009>
                }
            }
        }

        def Xform "cabinet11_drawer2_collision_0" (
            prepend apiSchemas = ["PhysicsMassAPI"]
        )
        {
            point3f physics:centerOfMass = (0, 0, 0)
            float physics:density = 100
            float3 physics:diagonalInertia = (-13.585582, -8.863193, 24.854698)
            float physics:mass = 1.3389739
            quatf physics:principalAxes = (0.36004195, 0.8541277, 0.28411108, 0.24518679)
            matrix4d xformOp:transform = ( (0.245507, 0, 0, 0), (0, 0.008, 0, 0), (0, 0, 0.011649, 0), (0.021031, 0.418233, 0.041246, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Cube "Cube" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(1, 0, 0)]
                float[] primvars:displayOpacity = [0.5]
            }
        }

        def Xform "cabinet11_drawer2_collision_1" (
            prepend apiSchemas = ["PhysicsMassAPI"]
        )
        {
            point3f physics:centerOfMass = (0, 0, 0)
            float physics:density = 100
            float3 physics:diagonalInertia = (-13.585582, -8.863193, 24.854698)
            float physics:mass = 1.3389739
            quatf physics:principalAxes = (0.36004195, 0.8541277, 0.28411108, 0.24518679)
            matrix4d xformOp:transform = ( (0.245507, 0, 0, 0), (0, 0.008, 0, 0), (0, 0, 0.011649, 0), (0.021031, -0.418233, 0.041246, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Cube "Cube" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(1, 0, 0)]
                float[] primvars:displayOpacity = [0.5]
            }
        }

        def Xform "cabinet11_drawer2_collision_2" (
            prepend apiSchemas = ["PhysicsMassAPI"]
        )
        {
            point3f physics:centerOfMass = (0, 0, 0)
            float physics:density = 100
            float3 physics:diagonalInertia = (-13.585582, -8.863193, 24.854698)
            float physics:mass = 1.3389739
            quatf physics:principalAxes = (0.36004195, 0.8541277, 0.28411108, 0.24518679)
            matrix4d xformOp:transform = ( (0.245507, 0, 0, 0), (0, 0.008, 0, 0), (0, 0, 0.041748, 0), (0.021031, 0.418233, -0.078968, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Cube "Cube" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(1, 0, 0)]
                float[] primvars:displayOpacity = [0.5]
            }
        }

        def Xform "cabinet11_drawer2_collision_3" (
            prepend apiSchemas = ["PhysicsMassAPI"]
        )
        {
            point3f physics:centerOfMass = (0, 0, 0)
            float physics:density = 100
            float3 physics:diagonalInertia = (-13.585582, -8.863193, 24.854698)
            float physics:mass = 1.3389739
            quatf physics:principalAxes = (0.36004195, 0.8541277, 0.28411108, 0.24518679)
            matrix4d xformOp:transform = ( (0.245507, 0, 0, 0), (0, 0.008, 0, 0), (0, 0, 0.041748, 0), (0.021031, -0.418233, -0.078968, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Cube "Cube" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(1, 0, 0)]
                float[] primvars:displayOpacity = [0.5]
            }
        }

        def Xform "cabinet11_drawer2_collision_4" (
            prepend apiSchemas = ["PhysicsMassAPI"]
        )
        {
            point3f physics:centerOfMass = (0, 0, 0)
            float physics:density = 100
            float3 physics:diagonalInertia = (-13.585582, -8.863193, 24.854698)
            float physics:mass = 1.3389739
            quatf physics:principalAxes = (0.36004195, 0.8541277, 0.28411108, 0.24518679)
            matrix4d xformOp:transform = ( (0.0095, 0, 0, 0), (0, 0.448341, 0, 0), (0, 0, 0.131375, 0), (-0.233977, 0, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Cube "Cube" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(1, 0, 0)]
                float[] primvars:displayOpacity = [0.5]
            }
        }

        def Xform "cabinet11_drawer2_collision_5" (
            prepend apiSchemas = ["PhysicsMassAPI"]
        )
        {
            point3f physics:centerOfMass = (0, 0, 0)
            float physics:density = 100
            float3 physics:diagonalInertia = (-13.585582, -8.863193, 24.854698)
            float physics:mass = 1.3389739
            quatf physics:principalAxes = (0.36004195, 0.8541277, 0.28411108, 0.24518679)
            matrix4d xformOp:transform = ( (0.008, 0, 0, 0), (0, 0.419788, 0, 0), (0, 0, 0.084491, 0), (0.260372, 0, -0.037996, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Cube "Cube" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(1, 0, 0)]
                float[] primvars:displayOpacity = [0.5]
            }
        }

        def Xform "cabinet11_drawer2_collision_6" (
            prepend apiSchemas = ["PhysicsMassAPI"]
        )
        {
            point3f physics:centerOfMass = (0, 0, 0)
            float physics:density = 100
            float3 physics:diagonalInertia = (-13.585582, -8.863193, 24.854698)
            float physics:mass = 1.3389739
            quatf physics:principalAxes = (0.36004195, 0.8541277, 0.28411108, 0.24518679)
            matrix4d xformOp:transform = ( (0.245507, 0, 0, 0), (0, 0.419788, 0, 0), (0, 0, 0.008, 0), (0.021031, 0, -0.113735, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Cube "Cube" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(1, 0, 0)]
                float[] primvars:displayOpacity = [0.5]
            }
        }

        def Xform "cabinet11_drawer2_handle"
        {
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 2.220446049250313e-16, 1, 0), (0, -1, 2.220446049250313e-16, 0), (-0.26686237, -0.00397854, 0.08541794, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Xform "cabinet11_drawer2_handle_visual_0" (
                prepend references = @./../meshes/usd/visual/SM_Kitchen_Handle.usda@</SM_Kitchen_Handle>
            )
            {
                matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]

                over "SM_Kitchen_Handle" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    rel material:binding = </_materials/_Game_Materials_Laborraum_M_Metal_Brushed_M_Metal_Brushed_003>
                }
            }

            def Xform "cabinet11_drawer2_handle_collision_0" (
                prepend apiSchemas = ["PhysicsMassAPI"]
            )
            {
                point3f physics:centerOfMass = (0, 0, 0)
                float physics:density = 100
                float3 physics:diagonalInertia = (-13.585582, -8.863193, 24.854698)
                float physics:mass = 1.3389739
                quatf physics:principalAxes = (0.36004195, 0.8541277, 0.28411108, 0.24518679)
                matrix4d xformOp:transform = ( (0.01, 0, 0, 0), (0, 0.0065, 0, 0), (0, 0, 0.0065, 0), (0.0164985, 0, 0.08, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]

                def Cube "Cube" (
                    prepend apiSchemas = ["PhysicsCollisionAPI"]
                )
                {
                    float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                    bool physics:collisionEnabled = 1
                    color3f[] primvars:displayColor = [(1, 0, 0)]
                    float[] primvars:displayOpacity = [0.5]
                }
            }

            def Xform "cabinet11_drawer2_handle_collision_1" (
                prepend apiSchemas = ["PhysicsMassAPI"]
            )
            {
                point3f physics:centerOfMass = (0, 0, 0)
                float physics:density = 100
                float3 physics:diagonalInertia = (-13.585582, -8.863193, 24.854698)
                float physics:mass = 1.3389739
                quatf physics:principalAxes = (0.36004195, 0.8541277, 0.28411108, 0.24518679)
                matrix4d xformOp:transform = ( (0.01, 0, 0, 0), (0, 0.0065, 0, 0), (0, 0, 0.0065, 0), (0.0164985, 0, -0.08, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]

                def Cube "Cube" (
                    prepend apiSchemas = ["PhysicsCollisionAPI"]
                )
                {
                    float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                    bool physics:collisionEnabled = 1
                    color3f[] primvars:displayColor = [(1, 0, 0)]
                    float[] primvars:displayOpacity = [0.5]
                }
            }

            def Xform "cabinet11_drawer2_handle_collision_2" (
                prepend apiSchemas = ["PhysicsMassAPI"]
            )
            {
                point3f physics:centerOfMass = (0, 0, 0)
                float physics:density = 100
                float3 physics:diagonalInertia = (-13.585582, -8.863193, 24.854698)
                float physics:mass = 1.3389739
                quatf physics:principalAxes = (0.36004195, 0.8541277, 0.28411108, 0.24518679)
                matrix4d xformOp:transform = ( (0.0065, 0, 0, 0), (0, 0.0065, 0, 0), (0, 0, 0.086516, 0), (0, 0, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]

                def Cube "Cube" (
                    prepend apiSchemas = ["PhysicsCollisionAPI"]
                )
                {
                    float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                    bool physics:collisionEnabled = 1
                    color3f[] primvars:displayColor = [(1, 0, 0)]
                    float[] primvars:displayOpacity = [0.5]
                }
            }
        }
    }

    def Xform "cabinet11_drawer3" (
        prepend apiSchemas = ["PhysicsRigidBodyAPI"]
    )
    {
        bool physics:rigidBodyEnabled = 1
        matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (2.54216156, 1.62302159, 0.29653661, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]

        def Xform "cabinet11_drawer3_visual_0" (
            prepend references = @./../meshes/usd/visual/SM_Kitchen_11_Drawer_03.usda@</SM_Kitchen_11_Drawer_03>
        )
        {
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            over "SM_Kitchen_11_Drawer_03" (
                prepend apiSchemas = ["MaterialBindingAPI"]
            )
            {
                rel material:binding = </_materials/_Game_Materials_Laborraum_M_Drawer_Mat_M_Drawer_Mat_010>

                over "_Game_Materials_Laborraum_M_Metal_Chrome_M_Metal_Chrome_009" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    rel material:binding = </_materials/_Game_Materials_Laborraum_M_Metal_Chrome_M_Metal_Chrome_009>
                }

                over "_Game_Materials_Laborraum_M_Kitchen_Fronts_M_Kitchen_Fronts_011" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    rel material:binding = </_materials/_Game_Materials_Laborraum_M_Kitchen_Fronts_M_Kitchen_Fronts_011>
                }

                over "_Game_Materials_Laborraum_M_Plastic_White_M_Plastic_White_019" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    rel material:binding = </_materials/_Game_Materials_Laborraum_M_Plastic_White_M_Plastic_White_019>
                }

                over "_Game_Materials_Laborraum_M_Drawer_Mat_M_Drawer_Mat_010" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    rel material:binding = </_materials/_Game_Materials_Laborraum_M_Drawer_Mat_M_Drawer_Mat_010>
                }
            }
        }

        def Xform "cabinet11_drawer3_collision_0" (
            prepend apiSchemas = ["PhysicsMassAPI"]
        )
        {
            point3f physics:centerOfMass = (0, 0, 0)
            float physics:density = 100
            float3 physics:diagonalInertia = (-14.209945, -10.76337, 27.913052)
            float physics:mass = 1.5655425
            quatf physics:principalAxes = (-0.28104055, -0.23889418, 0.40046486, 0.838793)
            matrix4d xformOp:transform = ( (0.245507, 0, 0, 0), (0, 0.008, 0, 0), (0, 0, 0.011638, 0), (0.021031, 0.418233, -0.00926, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Cube "Cube" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(1, 0, 0)]
                float[] primvars:displayOpacity = [0.5]
            }
        }

        def Xform "cabinet11_drawer3_collision_1" (
            prepend apiSchemas = ["PhysicsMassAPI"]
        )
        {
            point3f physics:centerOfMass = (0, 0, 0)
            float physics:density = 100
            float3 physics:diagonalInertia = (-14.209945, -10.76337, 27.913052)
            float physics:mass = 1.5655425
            quatf physics:principalAxes = (-0.28104055, -0.23889418, 0.40046486, 0.838793)
            matrix4d xformOp:transform = ( (0.245507, 0, 0, 0), (0, 0.008, 0, 0), (0, 0, 0.011638, 0), (0.021031, -0.418233, -0.00926, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Cube "Cube" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(1, 0, 0)]
                float[] primvars:displayOpacity = [0.5]
            }
        }

        def Xform "cabinet11_drawer3_collision_2" (
            prepend apiSchemas = ["PhysicsMassAPI"]
        )
        {
            point3f physics:centerOfMass = (0, 0, 0)
            float physics:density = 100
            float3 physics:diagonalInertia = (-14.209945, -10.76337, 27.913052)
            float physics:mass = 1.5655425
            quatf physics:principalAxes = (-0.28104055, -0.23889418, 0.40046486, 0.838793)
            matrix4d xformOp:transform = ( (0.245507, 0, 0, 0), (0, 0.008, 0, 0), (0, 0, 0.041711, 0), (0.021031, 0.418233, -0.129424, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Cube "Cube" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(1, 0, 0)]
                float[] primvars:displayOpacity = [0.5]
            }
        }

        def Xform "cabinet11_drawer3_collision_3" (
            prepend apiSchemas = ["PhysicsMassAPI"]
        )
        {
            point3f physics:centerOfMass = (0, 0, 0)
            float physics:density = 100
            float3 physics:diagonalInertia = (-14.209945, -10.76337, 27.913052)
            float physics:mass = 1.5655425
            quatf physics:principalAxes = (-0.28104055, -0.23889418, 0.40046486, 0.838793)
            matrix4d xformOp:transform = ( (0.245507, 0, 0, 0), (0, 0.008, 0, 0), (0, 0, 0.041711, 0), (0.021031, -0.418233, -0.129424, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Cube "Cube" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(1, 0, 0)]
                float[] primvars:displayOpacity = [0.5]
            }
        }

        def Xform "cabinet11_drawer3_collision_4" (
            prepend apiSchemas = ["PhysicsMassAPI"]
        )
        {
            point3f physics:centerOfMass = (0, 0, 0)
            float physics:density = 100
            float3 physics:diagonalInertia = (-14.209945, -10.76337, 27.913052)
            float physics:mass = 1.5655425
            quatf physics:principalAxes = (-0.28104055, -0.23889418, 0.40046486, 0.838793)
            matrix4d xformOp:transform = ( (0.0095, 0, 0, 0), (0, 0.448341, 0, 0), (0, 0, 0.197867, 0), (-0.233977, 0, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Cube "Cube" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(1, 0, 0)]
                float[] primvars:displayOpacity = [0.5]
            }
        }

        def Xform "cabinet11_drawer3_collision_5" (
            prepend apiSchemas = ["PhysicsMassAPI"]
        )
        {
            point3f physics:centerOfMass = (0, 0, 0)
            float physics:density = 100
            float3 physics:diagonalInertia = (-14.209945, -10.76337, 27.913052)
            float physics:mass = 1.5655425
            quatf physics:principalAxes = (-0.28104055, -0.23889418, 0.40046486, 0.838793)
            matrix4d xformOp:transform = ( (0.008, 0, 0, 0), (0, 0.419788, 0, 0), (0, 0, 0.084105, 0), (0.260372, 0, -0.088821, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Cube "Cube" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(1, 0, 0)]
                float[] primvars:displayOpacity = [0.5]
            }
        }

        def Xform "cabinet11_drawer3_collision_6" (
            prepend apiSchemas = ["PhysicsMassAPI"]
        )
        {
            point3f physics:centerOfMass = (0, 0, 0)
            float physics:density = 100
            float3 physics:diagonalInertia = (-14.209945, -10.76337, 27.913052)
            float physics:mass = 1.5655425
            quatf physics:principalAxes = (-0.28104055, -0.23889418, 0.40046486, 0.838793)
            matrix4d xformOp:transform = ( (0.245507, 0, 0, 0), (0, 0.419788, 0, 0), (0, 0, 0.008, 0), (0.021031, 0, -0.164582, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Cube "Cube" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(1, 0, 0)]
                float[] primvars:displayOpacity = [0.5]
            }
        }

        def Xform "cabinet11_drawer3_handle"
        {
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 2.220446049250313e-16, 1, 0), (0, -1, 2.220446049250313e-16, 0), (-0.26712164, -0.00402777, 0.15116583, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Xform "cabinet11_drawer3_handle_visual_0" (
                prepend references = @./../meshes/usd/visual/SM_Kitchen_Handle.usda@</SM_Kitchen_Handle>
            )
            {
                matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]

                over "SM_Kitchen_Handle" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    rel material:binding = </_materials/_Game_Materials_Laborraum_M_Metal_Brushed_M_Metal_Brushed_003>
                }
            }

            def Xform "cabinet11_drawer3_handle_collision_0" (
                prepend apiSchemas = ["PhysicsMassAPI"]
            )
            {
                point3f physics:centerOfMass = (0, 0, 0)
                float physics:density = 100
                float3 physics:diagonalInertia = (-14.209945, -10.76337, 27.913052)
                float physics:mass = 1.5655425
                quatf physics:principalAxes = (-0.28104055, -0.23889418, 0.40046486, 0.838793)
                matrix4d xformOp:transform = ( (0.01, 0, 0, 0), (0, 0.0065, 0, 0), (0, 0, 0.0065, 0), (0.0164985, 0, 0.08, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]

                def Cube "Cube" (
                    prepend apiSchemas = ["PhysicsCollisionAPI"]
                )
                {
                    float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                    bool physics:collisionEnabled = 1
                    color3f[] primvars:displayColor = [(1, 0, 0)]
                    float[] primvars:displayOpacity = [0.5]
                }
            }

            def Xform "cabinet11_drawer3_handle_collision_1" (
                prepend apiSchemas = ["PhysicsMassAPI"]
            )
            {
                point3f physics:centerOfMass = (0, 0, 0)
                float physics:density = 100
                float3 physics:diagonalInertia = (-14.209945, -10.76337, 27.913052)
                float physics:mass = 1.5655425
                quatf physics:principalAxes = (-0.28104055, -0.23889418, 0.40046486, 0.838793)
                matrix4d xformOp:transform = ( (0.01, 0, 0, 0), (0, 0.0065, 0, 0), (0, 0, 0.0065, 0), (0.0164985, 0, -0.08, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]

                def Cube "Cube" (
                    prepend apiSchemas = ["PhysicsCollisionAPI"]
                )
                {
                    float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                    bool physics:collisionEnabled = 1
                    color3f[] primvars:displayColor = [(1, 0, 0)]
                    float[] primvars:displayOpacity = [0.5]
                }
            }

            def Xform "cabinet11_drawer3_handle_collision_2" (
                prepend apiSchemas = ["PhysicsMassAPI"]
            )
            {
                point3f physics:centerOfMass = (0, 0, 0)
                float physics:density = 100
                float3 physics:diagonalInertia = (-14.209945, -10.76337, 27.913052)
                float physics:mass = 1.5655425
                quatf physics:principalAxes = (-0.28104055, -0.23889418, 0.40046486, 0.838793)
                matrix4d xformOp:transform = ( (0.0065, 0, 0, 0), (0, 0.0065, 0, 0), (0, 0, 0.086516, 0), (0, 0, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]

                def Cube "Cube" (
                    prepend apiSchemas = ["PhysicsCollisionAPI"]
                )
                {
                    float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                    bool physics:collisionEnabled = 1
                    color3f[] primvars:displayColor = [(1, 0, 0)]
                    float[] primvars:displayOpacity = [0.5]
                }
            }
        }
    }
}

def "_materials" (
    prepend references = [
        @./../meshes/usd/visual/SM_Wall_01.usda@</_materials>,
        @./../meshes/usd/visual/SM_Wall_02.usda@</_materials>,
        @./../meshes/usd/visual/SM_Wall_03.usda@</_materials>,
        @./../meshes/usd/visual/SM_Wall_04.usda@</_materials>,
        @./../meshes/usd/visual/windows_without_4.usda@</_materials>,
        @./../meshes/usd/visual/SM_Window_Frame.usda@</_materials>,
        @./../meshes/usd/visual/SM_Window_Right.usda@</_materials>,
        @./../meshes/usd/visual/SM_Window_Left.usda@</_materials>,
        @./../meshes/usd/visual/SM_Window_Handle.usda@</_materials>,
        @./../meshes/usd/visual/wardrobe.usda@</_materials>,
        @./../meshes/usd/visual/wardrobe_door_left.usda@</_materials>,
        @./../meshes/usd/visual/wardrobe_door_right.usda@</_materials>,
        @./../meshes/usd/visual/wardrobe_door_handle.usda@</_materials>,
        @./../meshes/usd/visual/armchair.usda@</_materials>,
        @./../meshes/usd/visual/sofa.usda@</_materials>,
        @./../meshes/usd/visual/coffee_table.usda@</_materials>,
        @./../meshes/usd/visual/coffee_table_drawer.usda@</_materials>,
        @./../meshes/usd/visual/bedside_table.usda@</_materials>,
        @./../meshes/usd/visual/SM_Kitchen_01_Base.usda@</_materials>,
        @./../meshes/usd/visual/SM_Kitchen_01_Door_01.usda@</_materials>,
        @./../meshes/usd/visual/SM_Kitchen_01_Drawer_01.usda@</_materials>,
        @./../meshes/usd/visual/SM_Kitchen_01_Drawer_02.usda@</_materials>,
        @./../meshes/usd/visual/SM_Oven.usda@</_materials>,
        @./../meshes/usd/visual/SM_Oven_Door.usda@</_materials>,
        @./../meshes/usd/visual/SM_Kitchen_02_Base.usda@</_materials>,
        @./../meshes/usd/visual/SM_Kitchen_02_Door.usda@</_materials>,
        @./../meshes/usd/visual/SM_Kitchen_02_Shelf.usda@</_materials>,
        @./../meshes/usd/visual/SM_Kitchen_02_Drawer_01.usda@</_materials>,
        @./../meshes/usd/visual/SM_Kitchen_02_Drawer_02.usda@</_materials>,
        @./../meshes/usd/visual/SM_Kitchen_03_Fridge.usda@</_materials>,
        @./../meshes/usd/visual/SM_Fridge_Door_01.usda@</_materials>,
        @./../meshes/usd/visual/SM_Fridge_Door_Tray_01.usda@</_materials>,
        @./../meshes/usd/visual/SM_Fridge_Door_Tray_02.usda@</_materials>,
        @./../meshes/usd/visual/SM_Fridge_Egg_Tray.usda@</_materials>,
        @./../meshes/usd/visual/SM_Fridge_Door_02.usda@</_materials>,
        @./../meshes/usd/visual/SM_Fridge_Shelf.usda@</_materials>,
        @./../meshes/usd/visual/SM_Fridge_Drawer_01.usda@</_materials>,
        @./../meshes/usd/visual/SM_Fridge_Drawer_02.usda@</_materials>,
        @./../meshes/usd/visual/SM_Fridge_Drawer_03.usda@</_materials>,
        @./../meshes/usd/visual/SM_Fridge_Drawer_04.usda@</_materials>,
        @./../meshes/usd/visual/SM_Fridge_Drawer_05.usda@</_materials>,
        @./../meshes/usd/visual/SM_Kitchen_04_Base.usda@</_materials>,
        @./../meshes/usd/visual/SM_Kitchen_04_Door_01.usda@</_materials>,
        @./../meshes/usd/visual/SM_Kitchen_04_Door_02.usda@</_materials>,
        @./../meshes/usd/visual/SM_Kitchen_04_Shelf.usda@</_materials>,
        @./../meshes/usd/visual/SM_Counter_Wall.usda@</_materials>,
        @./../meshes/usd/visual/SM_Kitchen_05_Base.usda@</_materials>,
        @./../meshes/usd/visual/SM_Kitchen_05_Drawer_01.usda@</_materials>,
        @./../meshes/usd/visual/SM_Kitchen_05_Drawer_02.usda@</_materials>,
        @./../meshes/usd/visual/SM_Kitchen_05_Drawer_03.usda@</_materials>,
        @./../meshes/usd/visual/SM_Kitchen_06_Base.usda@</_materials>,
        @./../meshes/usd/visual/SM_Kitchen_06_Drawer_01.usda@</_materials>,
        @./../meshes/usd/visual/SM_Kitchen_06_Drawer_02.usda@</_materials>,
        @./../meshes/usd/visual/SM_Kitchen_06_Drawer_03.usda@</_materials>,
        @./../meshes/usd/visual/SM_Kitchen_Island_Cover_04.usda@</_materials>,
        @./../meshes/usd/visual/SM_Kitchen_Base_Board_01.usda@</_materials>,
        @./../meshes/usd/visual/SM_Counter_Sink_Stove.usda@</_materials>,
        @./../meshes/usd/visual/SM_Stove.usda@</_materials>,
        @./../meshes/usd/visual/SM_Counter_Sink.usda@</_materials>,
        @./../meshes/usd/visual/SM_Counter_Watertab.usda@</_materials>,
        @./../meshes/usd/visual/SM_Counter_Sink_Tap.usda@</_materials>,
        @./../meshes/usd/visual/SM_Dishwasher_Base.usda@</_materials>,
        @./../meshes/usd/visual/SM_Dishwasher_Front.usda@</_materials>,
        @./../meshes/usd/visual/SM_Kitchen_08_Sink_Base.usda@</_materials>,
        @./../meshes/usd/visual/SM_Kitchen_08_Sink_Drawer_02.usda@</_materials>,
        @./../meshes/usd/visual/SM_Kitchen_09_Base.usda@</_materials>,
        @./../meshes/usd/visual/SM_Kitchen_09_Drawer_01.usda@</_materials>,
        @./../meshes/usd/visual/SM_Kitchen_09_Drawer_02.usda@</_materials>,
        @./../meshes/usd/visual/SM_Kitchen_09_Drawer_03.usda@</_materials>,
        @./../meshes/usd/visual/SM_Kitchen_10_Base.usda@</_materials>,
        @./../meshes/usd/visual/SM_Kitchen_10_Drawer_01.usda@</_materials>,
        @./../meshes/usd/visual/SM_Kitchen_10_Drawer_02.usda@</_materials>,
        @./../meshes/usd/visual/SM_Kitchen_10_Drawer_03.usda@</_materials>,
        @./../meshes/usd/visual/SM_Kitchen_11_Base.usda@</_materials>,
        @./../meshes/usd/visual/SM_Kitchen_11_Drawer_01.usda@</_materials>,
        @./../meshes/usd/visual/SM_Kitchen_11_Drawer_02.usda@</_materials>,
        @./../meshes/usd/visual/SM_Kitchen_11_Drawer_03.usda@</_materials>,
        @./../meshes/usd/visual/SM_Kitchen_Handle.usda@</_materials>,
        @./../meshes/usd/visual/SM_Kitchen_Base_Board_02.usda@</_materials>,
        @./../meshes/usd/visual/SM_Kitchen_Island_Cover_01.usda@</_materials>,
        @./../meshes/usd/visual/SM_Kitchen_Island_Cover_03.usda@</_materials>
    ]
)
{
}

