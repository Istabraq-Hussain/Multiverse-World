#usda 1.0
(
    defaultPrim = "world"
    metersPerUnit = 1
    upAxis = "Z"
)

def Xform "world"
{
    def Xform "apartment"
    {
        matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]

        def Xform "apartment_root"
        {
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Xform "envelope_root"
            {
                matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (8.85, 1.75, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]

                def Xform "wall1" (
                    prepend apiSchemas = ["PhysicsMassAPI"]
                )
                {
                    point3f physics:centerOfMass = (0.505224, -1.81425, 1.73439)
                    float3 physics:diagonalInertia = (5719.5225, 221480.25, 215780.97)
                    float physics:mass = 0
                    matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, -0.2, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]

                    def Cube "geom_1" (
                        prepend apiSchemas = ["PhysicsCollisionAPI"]
                    )
                    {
                        bool physics:collisionEnabled = 1
                        color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                        float[] primvars:displayOpacity = [1]
                        matrix4d xformOp:transform = ( (9.38022, 0, 0, 0), (0, 0.06425, 0, 0), (0, 0, 1.52585, 0), (0.505224, -1.81425, 1.73439, 1) )
                        uniform token[] xformOpOrder = ["xformOp:transform"]
                    }
                }

                def Xform "wall2" (
                    prepend apiSchemas = ["PhysicsMassAPI"]
                )
                {
                    point3f physics:centerOfMass = (-8.875, 0.713447, 1.73439)
                    float3 physics:diagonalInertia = (8136.464, 2238.3623, 5915.3066)
                    float physics:mass = 0
                    matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, -0.2, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]

                    def Cube "geom_2" (
                        prepend apiSchemas = ["PhysicsCollisionAPI"]
                    )
                    {
                        bool physics:collisionEnabled = 1
                        color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                        float[] primvars:displayOpacity = [1]
                        matrix4d xformOp:transform = ( (0.094776, 0, 0, 0), (0, 2.48345, 0, 0), (0, 0, 1.52585, 0), (-8.875, 0.713447, 1.73439, 1) )
                        uniform token[] xformOpOrder = ["xformOp:transform"]
                    }
                }

                def Xform "wall3" (
                    prepend apiSchemas = ["PhysicsMassAPI"]
                )
                {
                    point3f physics:centerOfMass = (0.56198984, 3.27776, 1.73439)
                    float3 physics:diagonalInertia = (225311, 220218.8, 5110.298)
                    float physics:mass = 0
                    matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, -0.2, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]

                    def Cube "geom_3" (
                        prepend apiSchemas = ["PhysicsCollisionAPI"]
                    )
                    {
                        bool physics:collisionEnabled = 1
                        color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                        float[] primvars:displayOpacity = [1]
                        matrix4d xformOp:transform = ( (4.23677, 0, 0, 0), (0, 0.06425, 0, 0), (0, 0, 1.52585, 0), (-4.63823, 3.27776, 1.73439, 1) )
                        uniform token[] xformOpOrder = ["xformOp:transform"]
                    }

                    def Cube "geom_4" (
                        prepend apiSchemas = ["PhysicsCollisionAPI"]
                    )
                    {
                        bool physics:collisionEnabled = 1
                        color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                        float[] primvars:displayOpacity = [1]
                        matrix4d xformOp:transform = ( (4.1443, 0, 0, 0), (0, 0.06425, 0, 0), (0, 0, 1.52585, 0), (5.87824, 3.27776, 1.73439, 1) )
                        uniform token[] xformOpOrder = ["xformOp:transform"]
                    }
                }

                def Xform "wall4" (
                    prepend apiSchemas = ["PhysicsMassAPI"]
                )
                {
                    point3f physics:centerOfMass = (9.98022, 0.713447, 1.73439)
                    float3 physics:diagonalInertia = (8136.464, 2238.3623, 5915.3066)
                    float physics:mass = 0
                    matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, -0.2, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]

                    def Cube "geom_5" (
                        prepend apiSchemas = ["PhysicsCollisionAPI"]
                    )
                    {
                        bool physics:collisionEnabled = 1
                        color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                        float[] primvars:displayOpacity = [1]
                        matrix4d xformOp:transform = ( (0.094776, 0, 0, 0), (0, 2.48345, 0, 0), (0, 0, 1.52585, 0), (9.98022, 0.713447, 1.73439, 1) )
                        uniform token[] xformOpOrder = ["xformOp:transform"]
                    }
                }

                def Xform "windows"
                {
                    matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, -0.2, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]
                }

                def Xform "window4_frame" (
                    prepend apiSchemas = ["PhysicsMassAPI"]
                )
                {
                    point3f physics:centerOfMass = (0, 0, 0.38660255)
                    float3 physics:diagonalInertia = (72.95457, 44.774952, 28.183193)
                    float physics:mass = 0
                    matrix4d xformOp:transform = ( (2.220446049250313e-16, -0.9999999999999998, -0, 0), (0.9999999999999998, 2.220446049250313e-16, 0, 0), (0, -0, 1, 0), (0.671098, 3.37273, 1.72145, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]

                    def Cube "geom_6" (
                        prepend apiSchemas = ["PhysicsCollisionAPI"]
                    )
                    {
                        bool physics:collisionEnabled = 1
                        color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                        float[] primvars:displayOpacity = [1]
                        matrix4d xformOp:transform = ( (0.01, 0, 0, 0), (0, 1.0677, 0, 0), (0, 0, 0.092776, 0), (0, 0, 1.42883, 1) )
                        uniform token[] xformOpOrder = ["xformOp:transform"]
                    }

                    def Cube "geom_7" (
                        prepend apiSchemas = ["PhysicsCollisionAPI"]
                    )
                    {
                        bool physics:collisionEnabled = 1
                        color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                        float[] primvars:displayOpacity = [1]
                        matrix4d xformOp:transform = ( (0.01, 0, 0, 0), (0, 1.0677, 0, 0), (0, 0, 0.18914, 0), (0, 0, 0.795222, 1) )
                        uniform token[] xformOpOrder = ["xformOp:transform"]
                    }

                    def Cube "geom_8" (
                        prepend apiSchemas = ["PhysicsCollisionAPI"]
                    )
                    {
                        bool physics:collisionEnabled = 1
                        color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                        float[] primvars:displayOpacity = [1]
                        matrix4d xformOp:transform = ( (0.01, 0, 0, 0), (0, 1.0677, 0, 0), (0, 0, 0.026796, 0), (0, 0, -1.49481, 1) )
                        uniform token[] xformOpOrder = ["xformOp:transform"]
                    }

                    def Cube "geom_9" (
                        prepend apiSchemas = ["PhysicsCollisionAPI"]
                    )
                    {
                        bool physics:collisionEnabled = 1
                        color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                        float[] primvars:displayOpacity = [1]
                        matrix4d xformOp:transform = ( (0.01, 0, 0, 0), (0, 0.075574, 0, 0), (0, 0, 1.52161, 0), (0, 0.992126, 0, 1) )
                        uniform token[] xformOpOrder = ["xformOp:transform"]
                    }

                    def Cube "geom_10" (
                        prepend apiSchemas = ["PhysicsCollisionAPI"]
                    )
                    {
                        bool physics:collisionEnabled = 1
                        color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                        float[] primvars:displayOpacity = [1]
                        matrix4d xformOp:transform = ( (0.01, 0, 0, 0), (0, 0.075574, 0, 0), (0, 0, 1.52161, 0), (0, -0.992126, 0, 1) )
                        uniform token[] xformOpOrder = ["xformOp:transform"]
                    }

                    def Cube "geom_11" (
                        prepend apiSchemas = ["PhysicsCollisionAPI"]
                    )
                    {
                        bool physics:collisionEnabled = 1
                        color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                        float[] primvars:displayOpacity = [1]
                        matrix4d xformOp:transform = ( (0.01, 0, 0, 0), (0, 0.073126, 0, 0), (0, 0, 1.52161, 0), (0, 0, 0, 1) )
                        uniform token[] xformOpOrder = ["xformOp:transform"]
                    }

                    def PhysicsRevoluteJoint "window4_right_joint"
                    {
                        uniform token physics:axis = "Z"
                        rel physics:body0 = </world/apartment/apartment_root/envelope_root/window4_frame>
                        rel physics:body1 = </world/window4_right>
                        bool physics:collisionEnabled = 0
                        point3f physics:localPos0 = (0, -0.916552, -0.425471)
                        point3f physics:localPos1 = (0, 0, 0)
                        quatf physics:localRot0 = (0, 0, 1, 0)
                        quatf physics:localRot1 = (0, 0, 1, 0)
                        float physics:lowerLimit = 0
                        float physics:upperLimit = 90.00021
                    }

                    def PhysicsRevoluteJoint "window4_left_joint"
                    {
                        uniform token physics:axis = "Z"
                        rel physics:body0 = </world/apartment/apartment_root/envelope_root/window4_frame>
                        rel physics:body1 = </world/window4_left>
                        bool physics:collisionEnabled = 0
                        point3f physics:localPos0 = (0.00162, 0.929112, -0.425471)
                        point3f physics:localPos1 = (0, 0, 0)
                        quatf physics:localRot0 = (1, 0, 0, 0)
                        quatf physics:localRot1 = (1, 0, 0, 0)
                        float physics:lowerLimit = 0
                        float physics:upperLimit = 90.00021
                    }
                }
            }

            def Xform "furnitures_root"
            {
                matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (8.85, 1.75, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]

                def Xform "wardrobe" (
                    prepend apiSchemas = ["PhysicsMassAPI"]
                )
                {
                    point3f physics:centerOfMass = (0.051664993, -0.008428507, 0.95859957)
                    float3 physics:diagonalInertia = (80.77623, 63.388485, 25.782024)
                    float physics:mass = 0
                    matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (9.7082, -0.6331, 0, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]

                    def Cube "geom_20" (
                        prepend apiSchemas = ["PhysicsCollisionAPI"]
                    )
                    {
                        bool physics:collisionEnabled = 1
                        color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                        float[] primvars:displayOpacity = [1]
                        matrix4d xformOp:transform = ( (0.04, 0, 0, 0), (0, 0.04, 0, 0), (0, 0, 0.075, 0), (-0.2693, -0.4482, 0.075, 1) )
                        uniform token[] xformOpOrder = ["xformOp:transform"]
                    }

                    def Cube "geom_21" (
                        prepend apiSchemas = ["PhysicsCollisionAPI"]
                    )
                    {
                        bool physics:collisionEnabled = 1
                        color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                        float[] primvars:displayOpacity = [1]
                        matrix4d xformOp:transform = ( (0.04, 0, 0, 0), (0, 0.04, 0, 0), (0, 0, 0.075, 0), (0.10603, -0.4482, 0.075, 1) )
                        uniform token[] xformOpOrder = ["xformOp:transform"]
                    }

                    def Cube "geom_22" (
                        prepend apiSchemas = ["PhysicsCollisionAPI"]
                    )
                    {
                        bool physics:collisionEnabled = 1
                        color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                        float[] primvars:displayOpacity = [1]
                        matrix4d xformOp:transform = ( (0.04, 0, 0, 0), (0, 0.04, 0, 0), (0, 0, 0.075, 0), (-0.2693, 0.4482, 0.075, 1) )
                        uniform token[] xformOpOrder = ["xformOp:transform"]
                    }

                    def Cube "geom_23" (
                        prepend apiSchemas = ["PhysicsCollisionAPI"]
                    )
                    {
                        bool physics:collisionEnabled = 1
                        color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                        float[] primvars:displayOpacity = [1]
                        matrix4d xformOp:transform = ( (0.04, 0, 0, 0), (0, 0.04, 0, 0), (0, 0, 0.075, 0), (0.10603, 0.4482, 0.075, 1) )
                        uniform token[] xformOpOrder = ["xformOp:transform"]
                    }

                    def Cube "geom_24" (
                        prepend apiSchemas = ["PhysicsCollisionAPI"]
                    )
                    {
                        bool physics:collisionEnabled = 1
                        color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                        float[] primvars:displayOpacity = [1]
                        matrix4d xformOp:transform = ( (0.2435, 0, 0, 0), (0, 0.5, 0, 0), (0, 0, 0.01345, 0), (-0.0805, 0, 0.16345, 1) )
                        uniform token[] xformOpOrder = ["xformOp:transform"]
                    }

                    def Cube "geom_25" (
                        prepend apiSchemas = ["PhysicsCollisionAPI"]
                    )
                    {
                        bool physics:collisionEnabled = 1
                        color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                        float[] primvars:displayOpacity = [1]
                        matrix4d xformOp:transform = ( (0.2435, 0, 0, 0), (0, 0.01035, 0, 0), (0, 0, 0.825, 0), (-0.0805, 0.48965, 0.975, 1) )
                        uniform token[] xformOpOrder = ["xformOp:transform"]
                    }

                    def Cube "geom_26" (
                        prepend apiSchemas = ["PhysicsCollisionAPI"]
                    )
                    {
                        bool physics:collisionEnabled = 1
                        color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                        float[] primvars:displayOpacity = [1]
                        matrix4d xformOp:transform = ( (0.2159, 0, 0, 0), (0, 0.009284, 0, 0), (0, 0, 0.825, 0), (-0.0896, 0, 0.975, 1) )
                        uniform token[] xformOpOrder = ["xformOp:transform"]
                    }

                    def Cube "geom_27" (
                        prepend apiSchemas = ["PhysicsCollisionAPI"]
                    )
                    {
                        bool physics:collisionEnabled = 1
                        color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                        float[] primvars:displayOpacity = [1]
                        matrix4d xformOp:transform = ( (0.2435, 0, 0, 0), (0, 0.01035, 0, 0), (0, 0, 0.825, 0), (-0.0805, -0.48965, 0.975, 1) )
                        uniform token[] xformOpOrder = ["xformOp:transform"]
                    }

                    def Cube "geom_28" (
                        prepend apiSchemas = ["PhysicsCollisionAPI"]
                    )
                    {
                        bool physics:collisionEnabled = 1
                        color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                        float[] primvars:displayOpacity = [1]
                        matrix4d xformOp:transform = ( (0.01835, 0, 0, 0), (0, 0.5, 0, 0), (0, 0, 0.825, 0), (0.14465, 0, 0.975, 1) )
                        uniform token[] xformOpOrder = ["xformOp:transform"]
                    }

                    def Cube "geom_29" (
                        prepend apiSchemas = ["PhysicsCollisionAPI"]
                    )
                    {
                        bool physics:collisionEnabled = 1
                        color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                        float[] primvars:displayOpacity = [1]
                        matrix4d xformOp:transform = ( (0.01835, 0, 0, 0), (0, 0.5, 0, 0), (0, 0, 0.825, 0), (0.14465, 0, 0.975, 1) )
                        uniform token[] xformOpOrder = ["xformOp:transform"]
                    }

                    def Cube "geom_30" (
                        prepend apiSchemas = ["PhysicsCollisionAPI"]
                    )
                    {
                        bool physics:collisionEnabled = 1
                        color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                        float[] primvars:displayOpacity = [1]
                        matrix4d xformOp:transform = ( (0.2435, 0, 0, 0), (0, 0.5, 0, 0), (0, 0, 0.0135, 0), (-0.0805, 0, 1.7865, 1) )
                        uniform token[] xformOpOrder = ["xformOp:transform"]
                    }

                    def Cube "geom_31" (
                        prepend apiSchemas = ["PhysicsCollisionAPI"]
                    )
                    {
                        bool physics:collisionEnabled = 1
                        color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                        float[] primvars:displayOpacity = [1]
                        matrix4d xformOp:transform = ( (0.21495, 0, 0, 0), (0, 0.234979, 0, 0), (0, 0, 0.0059, 0), (-0.08861, -0.244343, 0.5727, 1) )
                        uniform token[] xformOpOrder = ["xformOp:transform"]
                    }

                    def Cube "geom_32" (
                        prepend apiSchemas = ["PhysicsCollisionAPI"]
                    )
                    {
                        bool physics:collisionEnabled = 1
                        color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                        float[] primvars:displayOpacity = [1]
                        matrix4d xformOp:transform = ( (0.21495, 0, 0, 0), (0, 0.234979, 0, 0), (0, 0, 0.0059, 0), (-0.08861, -0.244343, 0.974836, 1) )
                        uniform token[] xformOpOrder = ["xformOp:transform"]
                    }

                    def Cube "geom_33" (
                        prepend apiSchemas = ["PhysicsCollisionAPI"]
                    )
                    {
                        bool physics:collisionEnabled = 1
                        color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                        float[] primvars:displayOpacity = [1]
                        matrix4d xformOp:transform = ( (0.21495, 0, 0, 0), (0, 0.234979, 0, 0), (0, 0, 0.0059, 0), (-0.08861, -0.244343, 1.37686, 1) )
                        uniform token[] xformOpOrder = ["xformOp:transform"]
                    }

                    def Cylinder "geom_34" (
                        prepend apiSchemas = ["PhysicsCollisionAPI"]
                    )
                    {
                        float3[] extent = [(-0.0075, -0.0075, -0.234949), (0.0075, 0.0075, 0.234949)]
                        double height = 0.469898
                        bool physics:collisionEnabled = 1
                        color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                        float[] primvars:displayOpacity = [1]
                        double radius = 0.0075
                        matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, -0.000004242642374308048, 0.9999999999910001, 0), (0, -0.9999999999910001, -0.000004242642374308048, 0), (-0.086923, 0.244373, 1.66898, 1) )
                        uniform token[] xformOpOrder = ["xformOp:transform"]
                    }

                    def PhysicsRevoluteJoint "wardrobe_door_left_joint"
                    {
                        uniform token physics:axis = "Z"
                        rel physics:body0 = </world/apartment/apartment_root/furnitures_root/wardrobe>
                        rel physics:body1 = </world/wardrobe_door_left>
                        bool physics:collisionEnabled = 0
                        point3f physics:localPos0 = (-0.3246, 0.5, 0)
                        point3f physics:localPos1 = (0, 0, 0)
                        quatf physics:localRot0 = (0, 0, 1, 0)
                        quatf physics:localRot1 = (0, 0, 1, 0)
                        float physics:lowerLimit = 0
                        float physics:upperLimit = 90.00021
                    }

                    def PhysicsRevoluteJoint "wardrobe_door_right_joint"
                    {
                        uniform token physics:axis = "Z"
                        rel physics:body0 = </world/apartment/apartment_root/furnitures_root/wardrobe>
                        rel physics:body1 = </world/wardrobe_door_right>
                        bool physics:collisionEnabled = 0
                        point3f physics:localPos0 = (-0.3246, -0.5, 0)
                        point3f physics:localPos1 = (0, 0, 0)
                        quatf physics:localRot0 = (1, 0, 0, 0)
                        quatf physics:localRot1 = (1, 0, 0, 0)
                        float physics:lowerLimit = 0
                        float physics:upperLimit = 90.00021
                    }
                }

                def Xform "armchair" (
                    prepend apiSchemas = ["PhysicsMassAPI"]
                )
                {
                    point3f physics:centerOfMass = (-6.527516e-9, 0.0905744, -0.12016437)
                    float3 physics:diagonalInertia = (25.962498, 19.984154, 14.373783)
                    float physics:mass = 0
                    matrix4d xformOp:transform = ( (-0.34205571731337603, 0.939679672150692, 0, 0), (-0.939679672150692, -0.34205571731337603, 0, 0), (0, 0, 1, 0), (7.9688, -0.3791, 0.355943, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]

                    def Mesh "geom_43" (
                        prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI"]
                        prepend references = @./apartment/usd/armchair.usda@
                    )
                    {
                        uniform token physics:approximation = "convexHull"
                        bool physics:collisionEnabled = 1
                        color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                        float[] primvars:displayOpacity = [1]
                        matrix4d xformOp:transform = ( (-2.220446049250313e-16, -0.3555491310901498, 0.9346575925872747, 0), (-1.0000000000000002, -2.220446049250313e-16, 0, 0), (0, -0.9346575925872747, -0.35554913109014996, 0), (-6.5275157352712924e-9, 0.09057440105729449, -0.12016437151891059, 1) )
                        uniform token[] xformOpOrder = ["xformOp:transform"]
                    }
                }

                def Xform "sofa" (
                    prepend apiSchemas = ["PhysicsMassAPI"]
                )
                {
                    point3f physics:centerOfMass = (0.047360774, 2.4943567e-8, -0.025285752)
                    float3 physics:diagonalInertia = (404.91284, 382.6262, 83.26183)
                    float physics:mass = 0
                    matrix4d xformOp:transform = ( (2.220446049250313e-16, 0.9999999999999998, 0, 0), (-0.9999999999999998, 2.220446049250313e-16, 0, 0), (0, 0, 1, 0), (8.1986, 2.4096, 0.35733, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]

                    def Mesh "geom_44" (
                        prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI"]
                        prepend references = @./apartment/usd/sofa.usda@
                    )
                    {
                        uniform token physics:approximation = "convexHull"
                        bool physics:collisionEnabled = 1
                        color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                        float[] primvars:displayOpacity = [1]
                        matrix4d xformOp:transform = ( (-0.48027295405302817, 0, 0.8771190851903622, 0), (-0.8771190851903622, 0, -0.48027295405302817, 0), (0, -1, 0, 0), (0.0473607747263284, 2.494356775487939e-8, -0.025285752685408044, 1) )
                        uniform token[] xformOpOrder = ["xformOp:transform"]
                    }
                }

                def Xform "coffee_table" (
                    prepend apiSchemas = ["PhysicsMassAPI"]
                )
                {
                    point3f physics:centerOfMass = (0.01086685, 0, 0.20130123)
                    float3 physics:diagonalInertia = (46.798466, 40.253555, 13.411085)
                    float physics:mass = 0
                    matrix4d xformOp:transform = ( (-0.000004242642374308048, 0.9999999999910001, 0, 0), (-0.9999999999910001, -0.000004242642374308048, 0, 0), (0, 0, 1, 0), (7.8034, 1.02957, 0, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]

                    def Cube "geom_45" (
                        prepend apiSchemas = ["PhysicsCollisionAPI"]
                    )
                    {
                        bool physics:collisionEnabled = 1
                        color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                        float[] primvars:displayOpacity = [1]
                        matrix4d xformOp:transform = ( (0.29, 0, 0, 0), (0, 0.54, 0, 0), (0, 0, 0.02977, 0), (0, 0, 0.02977, 1) )
                        uniform token[] xformOpOrder = ["xformOp:transform"]
                    }

                    def Cube "geom_46" (
                        prepend apiSchemas = ["PhysicsCollisionAPI"]
                    )
                    {
                        bool physics:collisionEnabled = 1
                        color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                        float[] primvars:displayOpacity = [1]
                        matrix4d xformOp:transform = ( (0.3053, 0, 0, 0), (0, 0.2, 0, 0), (0, 0, 0.00598, 0), (-0.022101, 0, 0.06552, 1) )
                        uniform token[] xformOpOrder = ["xformOp:transform"]
                    }

                    def Cube "geom_47" (
                        prepend apiSchemas = ["PhysicsCollisionAPI"]
                    )
                    {
                        bool physics:collisionEnabled = 1
                        color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                        float[] primvars:displayOpacity = [1]
                        matrix4d xformOp:transform = ( (0.35, 0, 0, 0), (0, 0.2, 0, 0), (0, 0, 0.16, 0), (0, 0.39975, 0.220625, 1) )
                        uniform token[] xformOpOrder = ["xformOp:transform"]
                    }

                    def Cube "geom_48" (
                        prepend apiSchemas = ["PhysicsCollisionAPI"]
                    )
                    {
                        bool physics:collisionEnabled = 1
                        color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                        float[] primvars:displayOpacity = [1]
                        matrix4d xformOp:transform = ( (0.35, 0, 0, 0), (0, 0.2, 0, 0), (0, 0, 0.16, 0), (0, -0.39975, 0.220625, 1) )
                        uniform token[] xformOpOrder = ["xformOp:transform"]
                    }

                    def Cube "geom_49" (
                        prepend apiSchemas = ["PhysicsCollisionAPI"]
                    )
                    {
                        bool physics:collisionEnabled = 1
                        color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                        float[] primvars:displayOpacity = [1]
                        matrix4d xformOp:transform = ( (0.03365, 0, 0, 0), (0, 0.2, 0, 0), (0, 0, 0.16, 0), (0.316343, 0, 0.22, 1) )
                        uniform token[] xformOpOrder = ["xformOp:transform"]
                    }

                    def Cube "geom_50" (
                        prepend apiSchemas = ["PhysicsCollisionAPI"]
                    )
                    {
                        bool physics:collisionEnabled = 1
                        color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                        float[] primvars:displayOpacity = [1]
                        matrix4d xformOp:transform = ( (0.35, 0, 0, 0), (0, 0.6, 0, 0), (0, 0, 0.01, 0), (0, 0, 0.39, 1) )
                        uniform token[] xformOpOrder = ["xformOp:transform"]
                    }

                    def PhysicsPrismaticJoint "coffee_table_drawer_joint"
                    {
                        uniform token physics:axis = "Z"
                        rel physics:body0 = </world/apartment/apartment_root/furnitures_root/coffee_table>
                        rel physics:body1 = </world/coffee_table_drawer>
                        bool physics:collisionEnabled = 0
                        point3f physics:localPos0 = (0, 0, 0)
                        point3f physics:localPos1 = (0, 0, 0)
                        quatf physics:localRot0 = (0.7071068, 0, -0.7071068, 0)
                        quatf physics:localRot1 = (0.7071068, 0, -0.7071068, 0)
                        float physics:lowerLimit = 0
                        float physics:upperLimit = 0.5
                    }
                }

                def Xform "bedside_table" (
                    prepend apiSchemas = ["PhysicsMassAPI"]
                )
                {
                    point3f physics:centerOfMass = (0, 0, 0)
                    float3 physics:diagonalInertia = (1.1528307, 1.1528307, 0.72648215)
                    float physics:mass = 0
                    matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (7.211, 0.1296, 0.229905, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]

                    def Cube "geom_56" (
                        prepend apiSchemas = ["PhysicsCollisionAPI"]
                    )
                    {
                        bool physics:collisionEnabled = 1
                        color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                        float[] primvars:displayOpacity = [1]
                        matrix4d xformOp:transform = ( (0.156, 0, 0, 0), (0, 0.156, 0, 0), (0, 0, 0.23, 0), (0, 0, 0, 1) )
                        uniform token[] xformOpOrder = ["xformOp:transform"]
                    }
                }
            }

            def Xform "kitchen_root"
            {
                matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]

                def Xform "kitchen1_root"
                {
                    matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]

                    def Xform "cabinet1" (
                        prepend apiSchemas = ["PhysicsMassAPI"]
                    )
                    {
                        point3f physics:centerOfMass = (0.0321849, 0.081360504, 0.10713582)
                        float3 physics:diagonalInertia = (43.66298, 40.300846, 8.858278)
                        float physics:mass = 0
                        matrix4d xformOp:transform = ( (-1, 0, 0, 0), (0, -1, 0, 0), (0, 0, 1, 0), (0.284632, 1.46676, 1.11441, 1) )
                        uniform token[] xformOpOrder = ["xformOp:transform"]

                        def Cube "geom_57" (
                            prepend apiSchemas = ["PhysicsCollisionAPI"]
                        )
                        {
                            bool physics:collisionEnabled = 1
                            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                            float[] primvars:displayOpacity = [1]
                            matrix4d xformOp:transform = ( (0.27747, 0, 0, 0), (0, 0.0095, 0, 0), (0, 0, 1.06389, 0), (0.010499, -0.3, 0.05, 1) )
                            uniform token[] xformOpOrder = ["xformOp:transform"]
                        }

                        def Cube "geom_58" (
                            prepend apiSchemas = ["PhysicsCollisionAPI"]
                        )
                        {
                            bool physics:collisionEnabled = 1
                            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                            float[] primvars:displayOpacity = [1]
                            matrix4d xformOp:transform = ( (0.27747, 0, 0, 0), (0, 0.0095, 0, 0), (0, 0, 1.06389, 0), (0.010499, 0.280469, 0.05, 1) )
                            uniform token[] xformOpOrder = ["xformOp:transform"]
                        }

                        def Cube "geom_59" (
                            prepend apiSchemas = ["PhysicsCollisionAPI"]
                        )
                        {
                            bool physics:collisionEnabled = 1
                            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                            float[] primvars:displayOpacity = [1]
                            matrix4d xformOp:transform = ( (0.004, 0, 0, 0), (0, 0.280969, 0, 0), (0, 0, 1.05589, 0), (0.271973, -0.009901, 0.041995, 1) )
                            uniform token[] xformOpOrder = ["xformOp:transform"]
                        }

                        def Cube "geom_60" (
                            prepend apiSchemas = ["PhysicsCollisionAPI"]
                        )
                        {
                            bool physics:collisionEnabled = 1
                            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                            float[] primvars:displayOpacity = [1]
                            matrix4d xformOp:transform = ( (0.287969, 0, 0, 0), (0, 0.01046, 0, 0), (0, 0, 1.11388, 0), (0, 0.299967, 0, 1) )
                            uniform token[] xformOpOrder = ["xformOp:transform"]
                        }

                        def Cube "geom_61" (
                            prepend apiSchemas = ["PhysicsCollisionAPI"]
                        )
                        {
                            bool physics:collisionEnabled = 1
                            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                            float[] primvars:displayOpacity = [1]
                            matrix4d xformOp:transform = ( (0.008, 0, 0, 0), (0, 0.280969, 0, 0), (0, 0, 0.032, 0), (-0.254976, -0.009901, 1.06578, 1) )
                            uniform token[] xformOpOrder = ["xformOp:transform"]
                        }

                        def Cube "geom_62" (
                            prepend apiSchemas = ["PhysicsCollisionAPI"]
                        )
                        {
                            bool physics:collisionEnabled = 1
                            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                            float[] primvars:displayOpacity = [1]
                            matrix4d xformOp:transform = ( (0.270471, 0, 0, 0), (0, 0.280969, 0, 0), (0, 0, 0.008, 0), (0.0055, -0.009901, 1.10578, 1) )
                            uniform token[] xformOpOrder = ["xformOp:transform"]
                        }

                        def Cube "geom_63" (
                            prepend apiSchemas = ["PhysicsCollisionAPI"]
                        )
                        {
                            bool physics:collisionEnabled = 1
                            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                            float[] primvars:displayOpacity = [1]
                            matrix4d xformOp:transform = ( (0.270471, 0, 0, 0), (0, 0.280969, 0, 0), (0, 0, 0.0075, 0), (0.0005, -0.009901, 0.249501, 1) )
                            uniform token[] xformOpOrder = ["xformOp:transform"]
                        }

                        def Xform "cabinet1_shelf1" (
                            prepend apiSchemas = ["PhysicsMassAPI"]
                        )
                        {
                            point3f physics:centerOfMass = (0, 0, 0)
                            float3 physics:diagonalInertia = (0.10761179, 0.11873842, 0.22618112)
                            float physics:mass = 0
                            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0.009901, 0.0005, 0.56, 1) )
                            uniform token[] xformOpOrder = ["xformOp:transform"]

                            def Cube "geom_64" (
                                prepend apiSchemas = ["PhysicsCollisionAPI"]
                            )
                            {
                                bool physics:collisionEnabled = 1
                                color3f[] primvars:displayColor = [(1, 1, 1)]
                                float[] primvars:displayOpacity = [1]
                                matrix4d xformOp:transform = ( (0.280969, 0, 0, 0), (0, 0.267471, 0, 0), (0, 0, 0.0075, 0), (0, 0, 0, 1) )
                                uniform token[] xformOpOrder = ["xformOp:transform"]
                            }
                        }

                        def Xform "cabinet1_shelf2" (
                            prepend apiSchemas = ["PhysicsMassAPI"]
                        )
                        {
                            point3f physics:centerOfMass = (0.0005, -0.009901, -0.361161)
                            float3 physics:diagonalInertia = (0.11873842, 0.10761179, 0.22618112)
                            float physics:mass = 0
                            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0.009901, 0.0005, 0.249501, 1) )
                            uniform token[] xformOpOrder = ["xformOp:transform"]

                            def Cube "geom_65" (
                                prepend apiSchemas = ["PhysicsCollisionAPI"]
                            )
                            {
                                bool physics:collisionEnabled = 1
                                color3f[] primvars:displayColor = [(1, 1, 1)]
                                float[] primvars:displayOpacity = [1]
                                matrix4d xformOp:transform = ( (0.267471, 0, 0, 0), (0, 0.280969, 0, 0), (0, 0, 0.0075, 0), (0.0005, -0.009901, -0.361161, 1) )
                                uniform token[] xformOpOrder = ["xformOp:transform"]
                            }
                        }

                        def PhysicsRevoluteJoint "cabinet1_door_joint"
                        {
                            uniform token physics:axis = "Z"
                            rel physics:body0 = </world/apartment/apartment_root/kitchen_root/kitchen1_root/cabinet1>
                            rel physics:body1 = </world/cabinet1_door>
                            bool physics:collisionEnabled = 0
                            point3f physics:localPos0 = (-0.28, 0.28, 0.677)
                            point3f physics:localPos1 = (0, 0, 0)
                            quatf physics:localRot0 = (0, 0, 1, 0)
                            quatf physics:localRot1 = (0, 0, 1, 0)
                            float physics:lowerLimit = 0
                            float physics:upperLimit = 90.00021
                        }

                        def PhysicsPrismaticJoint "cabinet1_drawer1_joint"
                        {
                            uniform token physics:axis = "Z"
                            rel physics:body0 = </world/apartment/apartment_root/kitchen_root/kitchen1_root/cabinet1>
                            rel physics:body1 = </world/cabinet1_drawer1>
                            bool physics:collisionEnabled = 0
                            point3f physics:localPos0 = (-0.0467902, -0.0112201, -0.486585)
                            point3f physics:localPos1 = (0, 0, 0)
                            quatf physics:localRot0 = (0.7071068, 0, -0.7071068, 0)
                            quatf physics:localRot1 = (0.7071068, 0, -0.7071068, 0)
                            float physics:lowerLimit = 0
                            float physics:upperLimit = 0.45
                        }

                        def PhysicsPrismaticJoint "cabinet1_drawer2_joint"
                        {
                            uniform token physics:axis = "Z"
                            rel physics:body0 = </world/apartment/apartment_root/kitchen_root/kitchen1_root/cabinet1>
                            rel physics:body1 = </world/cabinet1_drawer2>
                            bool physics:collisionEnabled = 0
                            point3f physics:localPos0 = (-0.046, -0.011, -0.816)
                            point3f physics:localPos1 = (0, 0, 0)
                            quatf physics:localRot0 = (0.7071068, 0, -0.7071068, 0)
                            quatf physics:localRot1 = (0.7071068, 0, -0.7071068, 0)
                            float physics:lowerLimit = 0
                            float physics:upperLimit = 0.45
                        }

                        def Xform "oven" (
                            prepend apiSchemas = ["PhysicsMassAPI"]
                        )
                        {
                            point3f physics:centerOfMass = (0.31322974, 0.07806555, 0.3414465)
                            float3 physics:diagonalInertia = (9.705063, 8.43593, 7.720965)
                            float physics:mass = 0
                            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (-0.273959, -0.0123597, -0.342672, 1) )
                            uniform token[] xformOpOrder = ["xformOp:transform"]

                            def Cube "geom_90" (
                                prepend apiSchemas = ["PhysicsCollisionAPI"]
                            )
                            {
                                bool physics:collisionEnabled = 1
                                color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                                float[] primvars:displayOpacity = [1]
                                matrix4d xformOp:transform = ( (0.272833, 0, 0, 0), (0, 0.294945, 0, 0), (0, 0, 0.075421, 0), (0.264778, 0.003055, 0.50654, 1) )
                                uniform token[] xformOpOrder = ["xformOp:transform"]
                            }

                            def Cube "geom_91" (
                                prepend apiSchemas = ["PhysicsCollisionAPI"]
                            )
                            {
                                bool physics:collisionEnabled = 1
                                color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                                float[] primvars:displayOpacity = [1]
                                matrix4d xformOp:transform = ( (0.272833, 0, 0, 0), (0, 0.294945, 0, 0), (0, 0, 0.022799, 0), (0.264778, 0.003055, 0.018039, 1) )
                                uniform token[] xformOpOrder = ["xformOp:transform"]
                            }

                            def Cube "geom_92" (
                                prepend apiSchemas = ["PhysicsCollisionAPI"]
                            )
                            {
                                bool physics:collisionEnabled = 1
                                color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                                float[] primvars:displayOpacity = [1]
                                matrix4d xformOp:transform = ( (0.272833, 0, 0, 0), (0, 0.0295, 0, 0), (0, 0, 0.293011, 0), (0.264778, 0.2675, 0.288951, 1) )
                                uniform token[] xformOpOrder = ["xformOp:transform"]
                            }

                            def Cube "geom_93" (
                                prepend apiSchemas = ["PhysicsCollisionAPI"]
                            )
                            {
                                bool physics:collisionEnabled = 1
                                color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                                float[] primvars:displayOpacity = [1]
                                matrix4d xformOp:transform = ( (0.272833, 0, 0, 0), (0, 0.027451, 0, 0), (0, 0, 0.293011, 0), (0.264778, 0.264104, 0.288951, 1) )
                                uniform token[] xformOpOrder = ["xformOp:transform"]
                            }

                            def Cube "geom_94" (
                                prepend apiSchemas = ["PhysicsCollisionAPI"]
                            )
                            {
                                bool physics:collisionEnabled = 1
                                color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                                float[] primvars:displayOpacity = [1]
                                matrix4d xformOp:transform = ( (0.037392, 0, 0, 0), (0, 0.294945, 0, 0), (0, 0, 0.293011, 0), (0.5, -0.003055, 0.288951, 1) )
                                uniform token[] xformOpOrder = ["xformOp:transform"]
                            }

                            def PhysicsRevoluteJoint "oven_door_joint"
                            {
                                uniform token physics:axis = "Z"
                                rel physics:body0 = </world/apartment/apartment_root/kitchen_root/kitchen1_root/cabinet1/oven>
                                rel physics:body1 = </world/oven_door>
                                bool physics:collisionEnabled = 0
                                point3f physics:localPos0 = (0, 0, 0)
                                point3f physics:localPos1 = (0, 0, 0)
                                quatf physics:localRot0 = (0.5, 0.5, 0.5, -0.5)
                                quatf physics:localRot1 = (1, 0, 0, 0)
                                float physics:lowerLimit = 0
                                float physics:upperLimit = 90.00021
                            }
                        }
                    }

                    def Xform "cabinet2" (
                        prepend apiSchemas = ["PhysicsMassAPI"]
                    )
                    {
                        point3f physics:centerOfMass = (0.03405041, 0, 0.06526537)
                        float3 physics:diagonalInertia = (28.632782, 28.588385, 3.1973345)
                        float physics:mass = 0
                        matrix4d xformOp:transform = ( (-1, 0, 0, 0), (0, -1, 0, 0), (0, 0, 1, 0), (0.279909, 1.97705, 1.16239, 1) )
                        uniform token[] xformOpOrder = ["xformOp:transform"]

                        def Cube "geom_96" (
                            prepend apiSchemas = ["PhysicsCollisionAPI"]
                        )
                        {
                            bool physics:collisionEnabled = 1
                            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                            float[] primvars:displayOpacity = [1]
                            matrix4d xformOp:transform = ( (0.277359, 0, 0, 0), (0, 0.008, 0, 0), (0, 0, 1.06384, 0), (0.005897, 0.191979, 0, 1) )
                            uniform token[] xformOpOrder = ["xformOp:transform"]
                        }

                        def Cube "geom_97" (
                            prepend apiSchemas = ["PhysicsCollisionAPI"]
                        )
                        {
                            bool physics:collisionEnabled = 1
                            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                            float[] primvars:displayOpacity = [1]
                            matrix4d xformOp:transform = ( (0.277359, 0, 0, 0), (0, 0.008, 0, 0), (0, 0, 1.06384, 0), (0.005897, -0.191979, 0, 1) )
                            uniform token[] xformOpOrder = ["xformOp:transform"]
                        }

                        def Cube "geom_98" (
                            prepend apiSchemas = ["PhysicsCollisionAPI"]
                        )
                        {
                            bool physics:collisionEnabled = 1
                            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                            float[] primvars:displayOpacity = [1]
                            matrix4d xformOp:transform = ( (0.277359, 0, 0, 0), (0, 0.183882, 0, 0), (0, 0, 0.008, 0), (0.005897, 0, 1.05584, 1) )
                            uniform token[] xformOpOrder = ["xformOp:transform"]
                        }

                        def Cube "geom_99" (
                            prepend apiSchemas = ["PhysicsCollisionAPI"]
                        )
                        {
                            bool physics:collisionEnabled = 1
                            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                            float[] primvars:displayOpacity = [1]
                            matrix4d xformOp:transform = ( (0.277359, 0, 0, 0), (0, 0.183882, 0, 0), (0, 0, 0.008, 0), (0.005897, 0, 0.975845, 1) )
                            uniform token[] xformOpOrder = ["xformOp:transform"]
                        }

                        def Cube "geom_100" (
                            prepend apiSchemas = ["PhysicsCollisionAPI"]
                        )
                        {
                            bool physics:collisionEnabled = 1
                            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                            float[] primvars:displayOpacity = [1]
                            matrix4d xformOp:transform = ( (0.277359, 0, 0, 0), (0, 0.183882, 0, 0), (0, 0, 0.008, 0), (0.005897, 0, -1.05594, 1) )
                            uniform token[] xformOpOrder = ["xformOp:transform"]
                        }

                        def Cube "geom_101" (
                            prepend apiSchemas = ["PhysicsCollisionAPI"]
                        )
                        {
                            bool physics:collisionEnabled = 1
                            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                            float[] primvars:displayOpacity = [1]
                            matrix4d xformOp:transform = ( (0.007187, 0, 0, 0), (0, 0.183882, 0, 0), (0, 0, 0.031996, 0), (-0.26039, 0, 1.01584, 1) )
                            uniform token[] xformOpOrder = ["xformOp:transform"]
                        }

                        def Cube "geom_102" (
                            prepend apiSchemas = ["PhysicsCollisionAPI"]
                        )
                        {
                            bool physics:collisionEnabled = 1
                            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                            float[] primvars:displayOpacity = [1]
                            matrix4d xformOp:transform = ( (0.004, 0, 0, 0), (0, 0.183882, 0, 0), (0, 0, 1.04784, 0), (0.267372, 0, 0, 1) )
                            uniform token[] xformOpOrder = ["xformOp:transform"]
                        }

                        def PhysicsRevoluteJoint "cabinet2_door_joint"
                        {
                            uniform token physics:axis = "Z"
                            rel physics:body0 = </world/apartment/apartment_root/kitchen_root/kitchen1_root/cabinet2>
                            rel physics:body1 = </world/cabinet2_door>
                            bool physics:collisionEnabled = 0
                            point3f physics:localPos0 = (-0.284321, 0.18657, 0.00105865)
                            point3f physics:localPos1 = (0, 0, 0)
                            quatf physics:localRot0 = (0, 0, 1, 0)
                            quatf physics:localRot1 = (0, 0, 1, 0)
                            float physics:lowerLimit = 0
                            float physics:upperLimit = 90.00021
                        }

                        def Xform "cabinet2_shelf" (
                            prepend apiSchemas = ["PhysicsMassAPI"]
                        )
                        {
                            point3f physics:centerOfMass = (0, 0, 0.004951)
                            float3 physics:diagonalInertia = (0.030124944, 0.051859476, 0.081884466)
                            float physics:mass = 0
                            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (-0.00337784, 0.00043732, 0.790361, 1) )
                            uniform token[] xformOpOrder = ["xformOp:transform"]

                            def Cube "geom_107" (
                                prepend apiSchemas = ["PhysicsCollisionAPI"]
                            )
                            {
                                bool physics:collisionEnabled = 1
                                color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                                float[] primvars:displayOpacity = [1]
                                matrix4d xformOp:transform = ( (0.241474, 0, 0, 0), (0, 0.183979, 0, 0), (0, 0, 0.0075, 0), (0, 0, 0.004951, 1) )
                                uniform token[] xformOpOrder = ["xformOp:transform"]
                            }
                        }

                        def PhysicsPrismaticJoint "cabinet2_drawer1_joint"
                        {
                            uniform token physics:axis = "Z"
                            rel physics:body0 = </world/apartment/apartment_root/kitchen_root/kitchen1_root/cabinet2>
                            rel physics:body1 = </world/cabinet2_drawer1>
                            bool physics:collisionEnabled = 0
                            point3f physics:localPos0 = (-0.00464775, 0.00134538, 0.580462)
                            point3f physics:localPos1 = (0, 0, 0)
                            quatf physics:localRot0 = (0.7071068, 0, -0.7071068, 0)
                            quatf physics:localRot1 = (0.7071068, 0, -0.7071068, 0)
                            float physics:lowerLimit = 0
                            float physics:upperLimit = 0.45
                        }

                        def PhysicsPrismaticJoint "cabinet2_drawer2_joint"
                        {
                            uniform token physics:axis = "Z"
                            rel physics:body0 = </world/apartment/apartment_root/kitchen_root/kitchen1_root/cabinet2>
                            rel physics:body1 = </world/cabinet2_drawer2>
                            bool physics:collisionEnabled = 0
                            point3f physics:localPos0 = (-0.00464775, -0.00134538, 0.422749)
                            point3f physics:localPos1 = (0, 0, 0)
                            quatf physics:localRot0 = (0.7071068, 0, -0.7071068, 0)
                            quatf physics:localRot1 = (0.7071068, 0, -0.7071068, 0)
                            float physics:lowerLimit = 0
                            float physics:upperLimit = 0.45
                        }

                        def PhysicsPrismaticJoint "cabinet2_drawer3_joint"
                        {
                            uniform token physics:axis = "Z"
                            rel physics:body0 = </world/apartment/apartment_root/kitchen_root/kitchen1_root/cabinet2>
                            rel physics:body1 = </world/cabinet2_drawer3>
                            bool physics:collisionEnabled = 0
                            point3f physics:localPos0 = (-0.00464775, -0.00134538, 0.142897)
                            point3f physics:localPos1 = (0, 0, 0)
                            quatf physics:localRot0 = (0.7071068, 0, -0.7071068, 0)
                            quatf physics:localRot1 = (0.7071068, 0, -0.7071068, 0)
                            float physics:lowerLimit = 0
                            float physics:upperLimit = 0.45
                        }

                        def PhysicsPrismaticJoint "cabinet2_drawer4_joint"
                        {
                            uniform token physics:axis = "Z"
                            rel physics:body0 = </world/apartment/apartment_root/kitchen_root/kitchen1_root/cabinet2>
                            rel physics:body1 = </world/cabinet2_drawer4>
                            bool physics:collisionEnabled = 0
                            point3f physics:localPos0 = (-0.00464775, 0.00134538, -0.242437)
                            point3f physics:localPos1 = (0, 0, 0)
                            quatf physics:localRot0 = (0.7071068, 0, -0.7071068, 0)
                            quatf physics:localRot1 = (0.7071068, 0, -0.7071068, 0)
                            float physics:lowerLimit = 0
                            float physics:upperLimit = 0.45
                        }

                        def PhysicsPrismaticJoint "cabinet2_drawer5_joint"
                        {
                            uniform token physics:axis = "Z"
                            rel physics:body0 = </world/apartment/apartment_root/kitchen_root/kitchen1_root/cabinet2>
                            rel physics:body1 = </world/cabinet2_drawer5>
                            bool physics:collisionEnabled = 0
                            point3f physics:localPos0 = (-0.00464775, 0.00134538, -0.518096)
                            point3f physics:localPos1 = (0, 0, 0)
                            quatf physics:localRot0 = (0.7071068, 0, -0.7071068, 0)
                            quatf physics:localRot1 = (0.7071068, 0, -0.7071068, 0)
                            float physics:lowerLimit = 0
                            float physics:upperLimit = 0.45
                        }

                        def PhysicsPrismaticJoint "cabinet2_drawer6_joint"
                        {
                            uniform token physics:axis = "Z"
                            rel physics:body0 = </world/apartment/apartment_root/kitchen_root/kitchen1_root/cabinet2>
                            rel physics:body1 = </world/cabinet2_drawer6>
                            bool physics:collisionEnabled = 0
                            point3f physics:localPos0 = (-0.00464775, 0.00134538, -0.955192)
                            point3f physics:localPos1 = (0, 0, 0)
                            quatf physics:localRot0 = (0.7071068, 0, -0.7071068, 0)
                            quatf physics:localRot1 = (0.7071068, 0, -0.7071068, 0)
                            float physics:lowerLimit = 0
                            float physics:upperLimit = 0.45
                        }
                    }

                    def Xform "cabinet3" (
                        prepend apiSchemas = ["PhysicsMassAPI"]
                    )
                    {
                        point3f physics:centerOfMass = (-0.008527586, -0.00048441917, 0.085132115)
                        float3 physics:diagonalInertia = (48.640648, 45.904274, 6.8833714)
                        float physics:mass = 0
                        matrix4d xformOp:transform = ( (-1, 0, 0, 0), (0, -1, 0, 0), (0, 0, 1, 0), (0.274985, 2.4799, 1.16288, 1) )
                        uniform token[] xformOpOrder = ["xformOp:transform"]

                        def Cube "geom_163" (
                            prepend apiSchemas = ["PhysicsCollisionAPI"]
                        )
                        {
                            bool physics:collisionEnabled = 1
                            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                            float[] primvars:displayOpacity = [1]
                            matrix4d xformOp:transform = ( (0.277193, 0, 0, 0), (0, 0.01, 0, 0), (0, 0, 1.06382, 0), (0.003155, -0.291968, 0, 1) )
                            uniform token[] xformOpOrder = ["xformOp:transform"]
                        }

                        def Cube "geom_164" (
                            prepend apiSchemas = ["PhysicsCollisionAPI"]
                        )
                        {
                            bool physics:collisionEnabled = 1
                            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                            float[] primvars:displayOpacity = [1]
                            matrix4d xformOp:transform = ( (0.277193, 0, 0, 0), (0, 0.01, 0, 0), (0, 0, 1.06382, 0), (0.003155, 0.291968, 0, 1) )
                            uniform token[] xformOpOrder = ["xformOp:transform"]
                        }

                        def Cube "geom_165" (
                            prepend apiSchemas = ["PhysicsCollisionAPI"]
                        )
                        {
                            bool physics:collisionEnabled = 1
                            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                            float[] primvars:displayOpacity = [1]
                            matrix4d xformOp:transform = ( (0.277193, 0, 0, 0), (0, 0.286067, 0, 0), (0, 0, 0.008, 0), (0.003155, 0, 1.05584, 1) )
                            uniform token[] xformOpOrder = ["xformOp:transform"]
                        }

                        def Cube "geom_166" (
                            prepend apiSchemas = ["PhysicsCollisionAPI"]
                        )
                        {
                            bool physics:collisionEnabled = 1
                            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                            float[] primvars:displayOpacity = [1]
                            matrix4d xformOp:transform = ( (0.277193, 0, 0, 0), (0, 0.286067, 0, 0), (0, 0, 0.008, 0), (0.003155, 0, 0.895854, 1) )
                            uniform token[] xformOpOrder = ["xformOp:transform"]
                        }

                        def Cube "geom_167" (
                            prepend apiSchemas = ["PhysicsCollisionAPI"]
                        )
                        {
                            bool physics:collisionEnabled = 1
                            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                            float[] primvars:displayOpacity = [1]
                            matrix4d xformOp:transform = ( (0.277193, 0, 0, 0), (0, 0.286067, 0, 0), (0, 0, 0.008, 0), (0.003155, 0, 0.819863, 1) )
                            uniform token[] xformOpOrder = ["xformOp:transform"]
                        }

                        def Cube "geom_168" (
                            prepend apiSchemas = ["PhysicsCollisionAPI"]
                        )
                        {
                            bool physics:collisionEnabled = 1
                            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                            float[] primvars:displayOpacity = [1]
                            matrix4d xformOp:transform = ( (0.277193, 0, 0, 0), (0, 0.286067, 0, 0), (0, 0, 0.008, 0), (0.003155, 0, -0.980943, 1) )
                            uniform token[] xformOpOrder = ["xformOp:transform"]
                        }

                        def Cube "geom_169" (
                            prepend apiSchemas = ["PhysicsCollisionAPI"]
                        )
                        {
                            bool physics:collisionEnabled = 1
                            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                            float[] primvars:displayOpacity = [1]
                            matrix4d xformOp:transform = ( (0.277193, 0, 0, 0), (0, 0.286067, 0, 0), (0, 0, 0.008, 0), (0.003155, 0, -1.05594, 1) )
                            uniform token[] xformOpOrder = ["xformOp:transform"]
                        }

                        def Cube "geom_170" (
                            prepend apiSchemas = ["PhysicsCollisionAPI"]
                        )
                        {
                            bool physics:collisionEnabled = 1
                            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                            float[] primvars:displayOpacity = [1]
                            matrix4d xformOp:transform = ( (0.0104594, 0, 0, 0), (0, 0.286067, 0, 0), (0, 0, 0.07201, 0), (-0.262453, 0, 0.975825, 1) )
                            uniform token[] xformOpOrder = ["xformOp:transform"]
                        }

                        def Cube "geom_171" (
                            prepend apiSchemas = ["PhysicsCollisionAPI"]
                        )
                        {
                            bool physics:collisionEnabled = 1
                            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                            float[] primvars:displayOpacity = [1]
                            matrix4d xformOp:transform = ( (0.0104594, 0, 0, 0), (0, 0.286067, 0, 0), (0, 0, 0.03, 0), (-0.262453, 0, 0.857803, 1) )
                            uniform token[] xformOpOrder = ["xformOp:transform"]
                        }

                        def Cube "geom_172" (
                            prepend apiSchemas = ["PhysicsCollisionAPI"]
                        )
                        {
                            bool physics:collisionEnabled = 1
                            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                            float[] primvars:displayOpacity = [1]
                            matrix4d xformOp:transform = ( (0.0104594, 0, 0, 0), (0, 0.286067, 0, 0), (0, 0, 0.03, 0), (-0.262453, 0, 0.857803, 1) )
                            uniform token[] xformOpOrder = ["xformOp:transform"]
                        }

                        def Cube "geom_173" (
                            prepend apiSchemas = ["PhysicsCollisionAPI"]
                        )
                        {
                            bool physics:collisionEnabled = 1
                            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                            float[] primvars:displayOpacity = [1]
                            matrix4d xformOp:transform = ( (0.008, 0, 0, 0), (0, 0.073992, 0, 0), (0, 0, 0.037346, 0), (-0.264485, -0.20788, -1.02629, 1) )
                            uniform token[] xformOpOrder = ["xformOp:transform"]
                        }

                        def PhysicsRevoluteJoint "fridge_door1_joint"
                        {
                            uniform token physics:axis = "Z"
                            rel physics:body0 = </world/apartment/apartment_root/kitchen_root/kitchen1_root/cabinet3>
                            rel physics:body1 = </world/fridge_door1>
                            bool physics:collisionEnabled = 0
                            point3f physics:localPos0 = (-0.297259, 0.299145, 0.25674)
                            point3f physics:localPos1 = (0, 0, 0)
                            quatf physics:localRot0 = (0, 0, 1, 0)
                            quatf physics:localRot1 = (0, 0, 1, 0)
                            float physics:lowerLimit = 0
                            float physics:upperLimit = 90.00021
                        }

                        def PhysicsRevoluteJoint "fridge_door2_joint"
                        {
                            uniform token physics:axis = "Z"
                            rel physics:body0 = </world/apartment/apartment_root/kitchen_root/kitchen1_root/cabinet3>
                            rel physics:body1 = </world/fridge_door2>
                            bool physics:collisionEnabled = 0
                            point3f physics:localPos0 = (-0.297259, 0.29909, -0.638008)
                            point3f physics:localPos1 = (0, 0, 0)
                            quatf physics:localRot0 = (0, 0, 1, 0)
                            quatf physics:localRot1 = (0, 0, 1, 0)
                            float physics:lowerLimit = 0
                            float physics:upperLimit = 90.00021
                        }

                        def Xform "fridge_base" (
                            prepend apiSchemas = ["PhysicsMassAPI"]
                        )
                        {
                            point3f physics:centerOfMass = (0.03482795, 0, -0.063978)
                            float3 physics:diagonalInertia = (70.73892, 66.973236, 11.303162)
                            float physics:mass = 0
                            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (-0.0191809, -0.00292496, -0.0816938, 1) )
                            uniform token[] xformOpOrder = ["xformOp:transform"]

                            def Cube "geom_194" (
                                prepend apiSchemas = ["PhysicsCollisionAPI"]
                            )
                            {
                                bool physics:collisionEnabled = 1
                                color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                                float[] primvars:displayOpacity = [1]
                                matrix4d xformOp:transform = ( (0.241826, 0, 0, 0), (0, 0.021622, 0, 0), (0, 0, 0.879405, 0), (0.016051, -0.257778, 0, 1) )
                                uniform token[] xformOpOrder = ["xformOp:transform"]
                            }

                            def Cube "geom_195" (
                                prepend apiSchemas = ["PhysicsCollisionAPI"]
                            )
                            {
                                bool physics:collisionEnabled = 1
                                color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                                float[] primvars:displayOpacity = [1]
                                matrix4d xformOp:transform = ( (0.241826, 0, 0, 0), (0, 0.021622, 0, 0), (0, 0, 0.879405, 0), (0.016051, 0.257778, 0, 1) )
                                uniform token[] xformOpOrder = ["xformOp:transform"]
                            }

                            def Cube "geom_196" (
                                prepend apiSchemas = ["PhysicsCollisionAPI"]
                            )
                            {
                                bool physics:collisionEnabled = 1
                                color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                                float[] primvars:displayOpacity = [1]
                                matrix4d xformOp:transform = ( (0.196424, 0, 0, 0), (0, 0.012277, 0, 0), (0, 0, 0.318196, 0), (-0.029351, -0.223235, -0.561142, 1) )
                                uniform token[] xformOpOrder = ["xformOp:transform"]
                            }

                            def Cube "geom_197" (
                                prepend apiSchemas = ["PhysicsCollisionAPI"]
                            )
                            {
                                bool physics:collisionEnabled = 1
                                color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                                float[] primvars:displayOpacity = [1]
                                matrix4d xformOp:transform = ( (0.196424, 0, 0, 0), (0, 0.012277, 0, 0), (0, 0, 0.318196, 0), (-0.029351, 0.223235, -0.561142, 1) )
                                uniform token[] xformOpOrder = ["xformOp:transform"]
                            }

                            def Cube "geom_198" (
                                prepend apiSchemas = ["PhysicsCollisionAPI"]
                            )
                            {
                                bool physics:collisionEnabled = 1
                                color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                                float[] primvars:displayOpacity = [1]
                                matrix4d xformOp:transform = ( (0.246695, 0, 0, 0), (0, 0.278217, 0, 0), (0, 0, 0.023998, 0), (0.011034, 0, 0.855407, 1) )
                                uniform token[] xformOpOrder = ["xformOp:transform"]
                            }

                            def Cube "geom_199" (
                                prepend apiSchemas = ["PhysicsCollisionAPI"]
                            )
                            {
                                bool physics:collisionEnabled = 1
                                color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                                float[] primvars:displayOpacity = [1]
                                matrix4d xformOp:transform = ( (0.196424, 0, 0, 0), (0, 0.234783, 0, 0), (0, 0, 0.03771, 0), (-0.029351, 0, 0.839695, 1) )
                                uniform token[] xformOpOrder = ["xformOp:transform"]
                            }

                            def Cube "geom_200" (
                                prepend apiSchemas = ["PhysicsCollisionAPI"]
                            )
                            {
                                bool physics:collisionEnabled = 1
                                color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                                float[] primvars:displayOpacity = [1]
                                matrix4d xformOp:transform = ( (0.196424, 0, 0, 0), (0, 0.234783, 0, 0), (0, 0, 0.0125, 0), (-0.029351, 0, 0.224975, 1) )
                                uniform token[] xformOpOrder = ["xformOp:transform"]
                            }

                            def Cube "geom_201" (
                                prepend apiSchemas = ["PhysicsCollisionAPI"]
                            )
                            {
                                bool physics:collisionEnabled = 1
                                color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                                float[] primvars:displayOpacity = [1]
                                matrix4d xformOp:transform = ( (0.196424, 0, 0, 0), (0, 0.234783, 0, 0), (0, 0, 0.058965, 0), (-0.029351, 0, -0.18398, 1) )
                                uniform token[] xformOpOrder = ["xformOp:transform"]
                            }

                            def Cube "geom_202" (
                                prepend apiSchemas = ["PhysicsCollisionAPI"]
                            )
                            {
                                bool physics:collisionEnabled = 1
                                color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                                float[] primvars:displayOpacity = [1]
                                matrix4d xformOp:transform = ( (0.196424, 0, 0, 0), (0, 0.234783, 0, 0), (0, 0, 0.036788, 0), (-0.029351, 0, -0.842617, 1) )
                                uniform token[] xformOpOrder = ["xformOp:transform"]
                            }

                            def Cube "geom_203" (
                                prepend apiSchemas = ["PhysicsCollisionAPI"]
                            )
                            {
                                bool physics:collisionEnabled = 1
                                color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                                float[] primvars:displayOpacity = [1]
                                matrix4d xformOp:transform = ( (0.00782, 0, 0, 0), (0, 0.234783, 0, 0), (0, 0, 0.464658, 0), (0.159364, 0, 0.339754, 1) )
                                uniform token[] xformOpOrder = ["xformOp:transform"]
                            }

                            def Cube "geom_204" (
                                prepend apiSchemas = ["PhysicsCollisionAPI"]
                            )
                            {
                                bool physics:collisionEnabled = 1
                                color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                                float[] primvars:displayOpacity = [1]
                                matrix4d xformOp:transform = ( (0.058398, 0, 0, 0), (0, 0.234783, 0, 0), (0, 0, 0.281275, 0), (0.199778, 0, -0.524221, 1) )
                                uniform token[] xformOpOrder = ["xformOp:transform"]
                            }

                            def Xform "fridge_shelf1" (
                                prepend apiSchemas = ["PhysicsMassAPI"]
                            )
                            {
                                point3f physics:centerOfMass = (0, 0, 0)
                                float3 physics:diagonalInertia = (0.020846814, 0.0068327826, 0.027663898)
                                float physics:mass = 0
                                matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (-0.00102744, 0.00204316, 0.545451, 1) )
                                uniform token[] xformOpOrder = ["xformOp:transform"]

                                def Cube "geom_205" (
                                    prepend apiSchemas = ["PhysicsCollisionAPI"]
                                )
                                {
                                    bool physics:collisionEnabled = 1
                                    color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                                    float[] primvars:displayOpacity = [1]
                                    matrix4d xformOp:transform = ( (0.133991, 0, 0, 0), (0, 0.234134, 0, 0), (0, 0, 0.004544, 0), (0, 0, 0, 1) )
                                    uniform token[] xformOpOrder = ["xformOp:transform"]
                                }
                            }

                            def Xform "fridge_shelf2" (
                                prepend apiSchemas = ["PhysicsMassAPI"]
                            )
                            {
                                point3f physics:centerOfMass = (0, 0, 0)
                                float3 physics:diagonalInertia = (0.020846814, 0.0068327826, 0.027663898)
                                float physics:mass = 0
                                matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (-0.00102744, 0.00204316, 0.411236, 1) )
                                uniform token[] xformOpOrder = ["xformOp:transform"]

                                def Cube "geom_206" (
                                    prepend apiSchemas = ["PhysicsCollisionAPI"]
                                )
                                {
                                    bool physics:collisionEnabled = 1
                                    color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                                    float[] primvars:displayOpacity = [1]
                                    matrix4d xformOp:transform = ( (0.133991, 0, 0, 0), (0, 0.234134, 0, 0), (0, 0, 0.004544, 0), (0, 0, 0, 1) )
                                    uniform token[] xformOpOrder = ["xformOp:transform"]
                                }
                            }

                            def PhysicsPrismaticJoint "fridge_drawer1_joint"
                            {
                                uniform token physics:axis = "Z"
                                rel physics:body0 = </world/apartment/apartment_root/kitchen_root/kitchen1_root/cabinet3/fridge_base>
                                rel physics:body1 = </world/fridge_drawer1>
                                bool physics:collisionEnabled = 0
                                point3f physics:localPos0 = (-0.0120901, 0.00223595, 0.110257)
                                point3f physics:localPos1 = (0, 0, 0)
                                quatf physics:localRot0 = (0.7071068, 0, -0.7071068, 0)
                                quatf physics:localRot1 = (0.7071068, 0, -0.7071068, 0)
                                float physics:lowerLimit = 0
                                float physics:upperLimit = 0.3
                            }

                            def PhysicsPrismaticJoint "fridge_drawer2_joint"
                            {
                                uniform token physics:axis = "Z"
                                rel physics:body0 = </world/apartment/apartment_root/kitchen_root/kitchen1_root/cabinet3/fridge_base>
                                rel physics:body1 = </world/fridge_drawer2>
                                bool physics:collisionEnabled = 0
                                point3f physics:localPos0 = (-0.0154834, -0.00198811, -0.0496125)
                                point3f physics:localPos1 = (0, 0, 0)
                                quatf physics:localRot0 = (0.7071068, 0, -0.7071068, 0)
                                quatf physics:localRot1 = (0.7071068, 0, -0.7071068, 0)
                                float physics:lowerLimit = 0
                                float physics:upperLimit = 0.3
                            }

                            def PhysicsPrismaticJoint "fridge_drawer3_joint"
                            {
                                uniform token physics:axis = "Z"
                                rel physics:body0 = </world/apartment/apartment_root/kitchen_root/kitchen1_root/cabinet3/fridge_base>
                                rel physics:body1 = </world/fridge_drawer3>
                                bool physics:collisionEnabled = 0
                                point3f physics:localPos0 = (-0.032657, 0.00251899, -0.356176)
                                point3f physics:localPos1 = (0, 0, 0)
                                quatf physics:localRot0 = (0.7071068, 0, -0.7071068, 0)
                                quatf physics:localRot1 = (0.7071068, 0, -0.7071068, 0)
                                float physics:lowerLimit = 0
                                float physics:upperLimit = 0.3
                            }

                            def PhysicsPrismaticJoint "fridge_drawer4_joint"
                            {
                                uniform token physics:axis = "Z"
                                rel physics:body0 = </world/apartment/apartment_root/kitchen_root/kitchen1_root/cabinet3/fridge_base>
                                rel physics:body1 = </world/fridge_drawer4>
                                bool physics:collisionEnabled = 0
                                point3f physics:localPos0 = (-0.0288522, 0.00508168, -0.532998)
                                point3f physics:localPos1 = (0, 0, 0)
                                quatf physics:localRot0 = (0.7071068, 0, -0.7071068, 0)
                                quatf physics:localRot1 = (0.7071068, 0, -0.7071068, 0)
                                float physics:lowerLimit = 0
                                float physics:upperLimit = 0.3
                            }

                            def PhysicsPrismaticJoint "fridge_drawer5_joint"
                            {
                                uniform token physics:axis = "Z"
                                rel physics:body0 = </world/apartment/apartment_root/kitchen_root/kitchen1_root/cabinet3/fridge_base>
                                rel physics:body1 = </world/fridge_drawer5>
                                bool physics:collisionEnabled = 0
                                point3f physics:localPos0 = (-0.0648077, 0, -0.712787)
                                point3f physics:localPos1 = (0, 0, 0)
                                quatf physics:localRot0 = (0.7071068, 0, -0.7071068, 0)
                                quatf physics:localRot1 = (0.7071068, 0, -0.7071068, 0)
                                float physics:lowerLimit = 0
                                float physics:upperLimit = 0.3
                            }
                        }
                    }

                    def Xform "cabinet4" (
                        prepend apiSchemas = ["PhysicsMassAPI"]
                    )
                    {
                        point3f physics:centerOfMass = (0.042299215, -0.081960484, -0.000015838574)
                        float3 physics:diagonalInertia = (7.5693283, 5.228653, 3.1578875)
                        float physics:mass = 0
                        matrix4d xformOp:transform = ( (-1, 0, 0, 0), (0, -1, 0, 0), (0, 0, 1, 0), (0.182244, 3.29388, 1.82711, 1) )
                        uniform token[] xformOpOrder = ["xformOp:transform"]

                        def Cube "geom_237" (
                            prepend apiSchemas = ["PhysicsCollisionAPI"]
                        )
                        {
                            bool physics:collisionEnabled = 1
                            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                            float[] primvars:displayOpacity = [1]
                            matrix4d xformOp:transform = ( (0.005, 0, 0, 0), (0, 0.483948, 0, 0), (0, 0, 0.38291, 0), (0.168984, 0.010048, 0, 1) )
                            uniform token[] xformOpOrder = ["xformOp:transform"]
                        }

                        def Cube "geom_238" (
                            prepend apiSchemas = ["PhysicsCollisionAPI"]
                        )
                        {
                            bool physics:collisionEnabled = 1
                            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                            float[] primvars:displayOpacity = [1]
                            matrix4d xformOp:transform = ( (0.174981, 0, 0, 0), (0, 0.008, 0, 0), (0, 0, 0.398908, 0), (0.01, 0.501898, 0, 1) )
                            uniform token[] xformOpOrder = ["xformOp:transform"]
                        }

                        def Cube "geom_239" (
                            prepend apiSchemas = ["PhysicsCollisionAPI"]
                        )
                        {
                            bool physics:collisionEnabled = 1
                            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                            float[] primvars:displayOpacity = [1]
                            matrix4d xformOp:transform = ( (0.174981, 0, 0, 0), (0, 0.008, 0, 0), (0, 0, 0.398908, 0), (0.01, -0.481997, 0, 1) )
                            uniform token[] xformOpOrder = ["xformOp:transform"]
                        }

                        def Cube "geom_240" (
                            prepend apiSchemas = ["PhysicsCollisionAPI"]
                        )
                        {
                            bool physics:collisionEnabled = 1
                            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                            float[] primvars:displayOpacity = [1]
                            matrix4d xformOp:transform = ( (0.184869, 0, 0, 0), (0, 0.01, 0, 0), (0, 0, 0.398908, 0), (0, -0.5, 0, 1) )
                            uniform token[] xformOpOrder = ["xformOp:transform"]
                        }

                        def Cube "geom_241" (
                            prepend apiSchemas = ["PhysicsCollisionAPI"]
                        )
                        {
                            bool physics:collisionEnabled = 1
                            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                            float[] primvars:displayOpacity = [1]
                            matrix4d xformOp:transform = ( (0.168981, 0, 0, 0), (0, 0.483948, 0, 0), (0, 0, 0.008, 0), (0.004, 0.010048, 0.390908, 1) )
                            uniform token[] xformOpOrder = ["xformOp:transform"]
                        }

                        def Cube "geom_242" (
                            prepend apiSchemas = ["PhysicsCollisionAPI"]
                        )
                        {
                            bool physics:collisionEnabled = 1
                            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                            float[] primvars:displayOpacity = [1]
                            matrix4d xformOp:transform = ( (0.168981, 0, 0, 0), (0, 0.483948, 0, 0), (0, 0, 0.008, 0), (0.004, 0.010048, -0.391007, 1) )
                            uniform token[] xformOpOrder = ["xformOp:transform"]
                        }

                        def Xform "cabinet4_door1" (
                            prepend apiSchemas = ["PhysicsMassAPI"]
                        )
                        {
                            point3f physics:centerOfMass = (-0.002895, 0, 0)
                            float3 physics:diagonalInertia = (0.7146551, 0.097850926, 0.61725426)
                            float physics:mass = 0
                            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (-0.172261, 0.00837158, 0.199167, 1) )
                            uniform token[] xformOpOrder = ["xformOp:transform"]

                            def Cube "geom_243" (
                                prepend apiSchemas = ["PhysicsCollisionAPI"]
                            )
                            {
                                bool physics:collisionEnabled = 1
                                color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                                float[] primvars:displayOpacity = [1]
                                matrix4d xformOp:transform = ( (0.0095, 0, 0, 0), (0, 0.497446, 0, 0), (0, 0, 0.197868, 0), (-0.002895, 0, 0, 1) )
                                uniform token[] xformOpOrder = ["xformOp:transform"]
                            }
                        }

                        def Xform "cabinet4_door2" (
                            prepend apiSchemas = ["PhysicsMassAPI"]
                        )
                        {
                            point3f physics:centerOfMass = (-0.025359, 0, 0)
                            float3 physics:diagonalInertia = (0.7146551, 0.097850926, 0.61725426)
                            float physics:mass = 0
                            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (-0.150429, 0.0093109, -0.199949, 1) )
                            uniform token[] xformOpOrder = ["xformOp:transform"]

                            def Cube "geom_244" (
                                prepend apiSchemas = ["PhysicsCollisionAPI"]
                            )
                            {
                                bool physics:collisionEnabled = 1
                                color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                                float[] primvars:displayOpacity = [1]
                                matrix4d xformOp:transform = ( (0.0095, 0, 0, 0), (0, 0.497446, 0, 0), (0, 0, 0.197868, 0), (-0.025359, 0, 0, 1) )
                                uniform token[] xformOpOrder = ["xformOp:transform"]
                            }

                            def Xform "cabinet4_door2_handle" (
                                prepend apiSchemas = ["PhysicsMassAPI"]
                            )
                            {
                                point3f physics:centerOfMass = (0.0030978445, 0, 0)
                                float3 physics:diagonalInertia = (0.000118450924, 0.000116826224, 0.000002638771)
                                float physics:mass = 0
                                matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 2.220446049250313e-16, 0.9999999999999998, 0), (0, -0.9999999999999998, 2.220446049250313e-16, 0), (-0.0610386, -0.0141519, -0.133571, 1) )
                                uniform token[] xformOpOrder = ["xformOp:transform"]

                                def Cube "geom_245" (
                                    prepend apiSchemas = ["PhysicsCollisionAPI"]
                                )
                                {
                                    bool physics:collisionEnabled = 1
                                    color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                                    float[] primvars:displayOpacity = [1]
                                    matrix4d xformOp:transform = ( (0.01, 0, 0, 0), (0, 0.0065, 0, 0), (0, 0, 0.0065, 0), (0.0164985, 0, 0.08, 1) )
                                    uniform token[] xformOpOrder = ["xformOp:transform"]
                                }

                                def Cube "geom_246" (
                                    prepend apiSchemas = ["PhysicsCollisionAPI"]
                                )
                                {
                                    bool physics:collisionEnabled = 1
                                    color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                                    float[] primvars:displayOpacity = [1]
                                    matrix4d xformOp:transform = ( (0.01, 0, 0, 0), (0, 0.0065, 0, 0), (0, 0, 0.0065, 0), (0.0164985, 0, -0.08, 1) )
                                    uniform token[] xformOpOrder = ["xformOp:transform"]
                                }

                                def Cube "geom_247" (
                                    prepend apiSchemas = ["PhysicsCollisionAPI"]
                                )
                                {
                                    bool physics:collisionEnabled = 1
                                    color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                                    float[] primvars:displayOpacity = [1]
                                    matrix4d xformOp:transform = ( (0.0065, 0, 0, 0), (0, 0.0065, 0, 0), (0, 0, 0.086516, 0), (0, 0, 0, 1) )
                                    uniform token[] xformOpOrder = ["xformOp:transform"]
                                }
                            }
                        }

                        def Xform "cabinet4_shelf1" (
                            prepend apiSchemas = ["PhysicsMassAPI"]
                        )
                        {
                            point3f physics:centerOfMass = (0, 0, 0)
                            float3 physics:diagonalInertia = (0.1875902, 0.018893862, 0.20645788)
                            float physics:mass = 0
                            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0.00833792, -0.0101648, 0.125006, 1) )
                            uniform token[] xformOpOrder = ["xformOp:transform"]

                            def Cube "geom_248" (
                                prepend apiSchemas = ["PhysicsCollisionAPI"]
                            )
                            {
                                bool physics:collisionEnabled = 1
                                color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                                float[] primvars:displayOpacity = [1]
                                matrix4d xformOp:transform = ( (0.153539, 0, 0, 0), (0, 0.483948, 0, 0), (0, 0, 0.004042, 0), (0, 0, 0, 1) )
                                uniform token[] xformOpOrder = ["xformOp:transform"]
                            }
                        }

                        def Xform "cabinet4_shelf2" (
                            prepend apiSchemas = ["PhysicsMassAPI"]
                        )
                        {
                            point3f physics:centerOfMass = (0, 0, 0)
                            float3 physics:diagonalInertia = (0.1875902, 0.018893862, 0.20645788)
                            float physics:mass = 0
                            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0.00833792, -0.0101648, -0.0984018, 1) )
                            uniform token[] xformOpOrder = ["xformOp:transform"]

                            def Cube "geom_249" (
                                prepend apiSchemas = ["PhysicsCollisionAPI"]
                            )
                            {
                                bool physics:collisionEnabled = 1
                                color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                                float[] primvars:displayOpacity = [1]
                                matrix4d xformOp:transform = ( (0.153539, 0, 0, 0), (0, 0.483948, 0, 0), (0, 0, 0.004042, 0), (0, 0, 0, 1) )
                                uniform token[] xformOpOrder = ["xformOp:transform"]
                            }
                        }
                    }

                    def Xform "counter_wall" (
                        prepend apiSchemas = ["PhysicsMassAPI"]
                    )
                    {
                        point3f physics:centerOfMass = (0, 0, 0)
                        float3 physics:diagonalInertia = (1.4661331, 0.49548447, 1.9596411)
                        float physics:mass = 0
                        matrix4d xformOp:transform = ( (-1, 0, 0, 0), (0, -1, 0, 0), (0, 0, 1, 0), (0.281428, 3.29494, 0.908921, 1) )
                        uniform token[] xformOpOrder = ["xformOp:transform"]

                        def Cube "geom_250" (
                            prepend apiSchemas = ["PhysicsCollisionAPI"]
                        )
                        {
                            bool physics:collisionEnabled = 1
                            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                            float[] primvars:displayOpacity = [1]
                            matrix4d xformOp:transform = ( (0.2995, 0, 0, 0), (0, 0.515532, 0, 0), (0, 0, 0.013389, 0), (0, 0, 0, 1) )
                            uniform token[] xformOpOrder = ["xformOp:transform"]
                        }
                    }

                    def Xform "cabinet5" (
                        prepend apiSchemas = ["PhysicsMassAPI"]
                    )
                    {
                        point3f physics:centerOfMass = (0.045634627, 0, -0.0720516)
                        float3 physics:diagonalInertia = (3.1576848, 2.3979921, 2.1526704)
                        float physics:mass = 0
                        matrix4d xformOp:transform = ( (-1, 0, 0, 0), (0, -1, 0, 0), (0, 0, 1, 0), (0.274766, 3.08412, 0.494207, 1) )
                        uniform token[] xformOpOrder = ["xformOp:transform"]

                        def Cube "geom_251" (
                            prepend apiSchemas = ["PhysicsCollisionAPI"]
                        )
                        {
                            bool physics:collisionEnabled = 1
                            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                            float[] primvars:displayOpacity = [1]
                            matrix4d xformOp:transform = ( (0.27726, 0, 0, 0), (0, 0.008, 0, 0), (0, 0, 0.399006, 0), (0, 0.291968, 0, 1) )
                            uniform token[] xformOpOrder = ["xformOp:transform"]
                        }

                        def Cube "geom_252" (
                            prepend apiSchemas = ["PhysicsCollisionAPI"]
                        )
                        {
                            bool physics:collisionEnabled = 1
                            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                            float[] primvars:displayOpacity = [1]
                            matrix4d xformOp:transform = ( (0.27726, 0, 0, 0), (0, 0.008, 0, 0), (0, 0, 0.399006, 0), (0, -0.291968, 0, 1) )
                            uniform token[] xformOpOrder = ["xformOp:transform"]
                        }

                        def Cube "geom_253" (
                            prepend apiSchemas = ["PhysicsCollisionAPI"]
                        )
                        {
                            bool physics:collisionEnabled = 1
                            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                            float[] primvars:displayOpacity = [1]
                            matrix4d xformOp:transform = ( (0.27726, 0, 0, 0), (0, 0.284067, 0, 0), (0, 0, 0.008, 0), (0, 0, -0.391006, 1) )
                            uniform token[] xformOpOrder = ["xformOp:transform"]
                        }

                        def Cube "geom_254" (
                            prepend apiSchemas = ["PhysicsCollisionAPI"]
                        )
                        {
                            bool physics:collisionEnabled = 1
                            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                            float[] primvars:displayOpacity = [1]
                            matrix4d xformOp:transform = ( (0.04, 0, 0, 0), (0, 0.284067, 0, 0), (0, 0, 0.008, 0), (0.217476, 0, 0.390909, 1) )
                            uniform token[] xformOpOrder = ["xformOp:transform"]
                        }

                        def Cube "geom_255" (
                            prepend apiSchemas = ["PhysicsCollisionAPI"]
                        )
                        {
                            bool physics:collisionEnabled = 1
                            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                            float[] primvars:displayOpacity = [1]
                            matrix4d xformOp:transform = ( (0.004, 0, 0, 0), (0, 0.284067, 0, 0), (0, 0, 0.38291, 0), (0.261473, 0, 0, 1) )
                            uniform token[] xformOpOrder = ["xformOp:transform"]
                        }

                        def PhysicsPrismaticJoint "cabinet5_drawer1_joint"
                        {
                            uniform token physics:axis = "Z"
                            rel physics:body0 = </world/apartment/apartment_root/kitchen_root/kitchen1_root/cabinet5>
                            rel physics:body1 = </world/cabinet5_drawer1>
                            bool physics:collisionEnabled = 0
                            point3f physics:localPos0 = (-0.052627, -0.00100026, 0.331778)
                            point3f physics:localPos1 = (0, 0, 0)
                            quatf physics:localRot0 = (0.7071068, 0, -0.7071068, 0)
                            quatf physics:localRot1 = (0.7071068, 0, -0.7071068, 0)
                            float physics:lowerLimit = 0
                            float physics:upperLimit = 0.45
                        }

                        def PhysicsPrismaticJoint "cabinet5_drawer2_joint"
                        {
                            uniform token physics:axis = "Z"
                            rel physics:body0 = </world/apartment/apartment_root/kitchen_root/kitchen1_root/cabinet5>
                            rel physics:body1 = </world/cabinet5_drawer2>
                            bool physics:collisionEnabled = 0
                            point3f physics:localPos0 = (-0.0530376, -0.00079152, 0.133725)
                            point3f physics:localPos1 = (0, 0, 0)
                            quatf physics:localRot0 = (0.7071068, 0, -0.7071068, 0)
                            quatf physics:localRot1 = (0.7071068, 0, -0.7071068, 0)
                            float physics:lowerLimit = 0
                            float physics:upperLimit = 0.45
                        }

                        def PhysicsPrismaticJoint "cabinet5_drawer3_joint"
                        {
                            uniform token physics:axis = "Z"
                            rel physics:body0 = </world/apartment/apartment_root/kitchen_root/kitchen1_root/cabinet5>
                            rel physics:body1 = </world/cabinet5_drawer3>
                            bool physics:collisionEnabled = 0
                            point3f physics:localPos0 = (-0.0534509, -0.00075551, -0.195667)
                            point3f physics:localPos1 = (0, 0, 0)
                            quatf physics:localRot0 = (0.7071068, 0, -0.7071068, 0)
                            quatf physics:localRot1 = (0.7071068, 0, -0.7071068, 0)
                            float physics:lowerLimit = 0
                            float physics:upperLimit = 0.45
                        }
                    }

                    def Xform "cabinet6" (
                        prepend apiSchemas = ["PhysicsMassAPI"]
                    )
                    {
                        point3f physics:centerOfMass = (0.034447238, 0, -0.054388054)
                        float3 physics:diagonalInertia = (1.9767264, 1.9737027, 1.1823037)
                        float physics:mass = 0
                        matrix4d xformOp:transform = ( (-1, 0, 0, 0), (0, -1, 0, 0), (0, 0, 1, 0), (0.274766, 3.58384, 0.494207, 1) )
                        uniform token[] xformOpOrder = ["xformOp:transform"]

                        def Cube "geom_284" (
                            prepend apiSchemas = ["PhysicsCollisionAPI"]
                        )
                        {
                            bool physics:collisionEnabled = 1
                            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                            float[] primvars:displayOpacity = [1]
                            matrix4d xformOp:transform = ( (0.27726, 0, 0, 0), (0, 0.008, 0, 0), (0, 0, 0.399006, 0), (0, 0.191779, 0, 1) )
                            uniform token[] xformOpOrder = ["xformOp:transform"]
                        }

                        def Cube "geom_285" (
                            prepend apiSchemas = ["PhysicsCollisionAPI"]
                        )
                        {
                            bool physics:collisionEnabled = 1
                            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                            float[] primvars:displayOpacity = [1]
                            matrix4d xformOp:transform = ( (0.27726, 0, 0, 0), (0, 0.008, 0, 0), (0, 0, 0.399006, 0), (0, -0.191779, 0, 1) )
                            uniform token[] xformOpOrder = ["xformOp:transform"]
                        }

                        def Cube "geom_286" (
                            prepend apiSchemas = ["PhysicsCollisionAPI"]
                        )
                        {
                            bool physics:collisionEnabled = 1
                            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                            float[] primvars:displayOpacity = [1]
                            matrix4d xformOp:transform = ( (0.27726, 0, 0, 0), (0, 0.184833, 0, 0), (0, 0, 0.008, 0), (0, 0, -0.391006, 1) )
                            uniform token[] xformOpOrder = ["xformOp:transform"]
                        }

                        def Cube "geom_287" (
                            prepend apiSchemas = ["PhysicsCollisionAPI"]
                        )
                        {
                            bool physics:collisionEnabled = 1
                            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                            float[] primvars:displayOpacity = [1]
                            matrix4d xformOp:transform = ( (0.04, 0, 0, 0), (0, 0.184833, 0, 0), (0, 0, 0.008, 0), (0.217476, 0, 0.390909, 1) )
                            uniform token[] xformOpOrder = ["xformOp:transform"]
                        }

                        def Cube "geom_288" (
                            prepend apiSchemas = ["PhysicsCollisionAPI"]
                        )
                        {
                            bool physics:collisionEnabled = 1
                            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                            float[] primvars:displayOpacity = [1]
                            matrix4d xformOp:transform = ( (0.004, 0, 0, 0), (0, 0.184833, 0, 0), (0, 0, 0.38291, 0), (0.261473, 0, 0, 1) )
                            uniform token[] xformOpOrder = ["xformOp:transform"]
                        }

                        def PhysicsPrismaticJoint "cabinet6_drawer1_joint"
                        {
                            uniform token physics:axis = "Z"
                            rel physics:body0 = </world/apartment/apartment_root/kitchen_root/kitchen1_root/cabinet6>
                            rel physics:body1 = </world/cabinet6_drawer1>
                            bool physics:collisionEnabled = 0
                            point3f physics:localPos0 = (-0.053296, -0.00032649, 0.331778)
                            point3f physics:localPos1 = (0, 0, 0)
                            quatf physics:localRot0 = (0.7071068, 0, -0.7071068, 0)
                            quatf physics:localRot1 = (0.7071068, 0, -0.7071068, 0)
                            float physics:lowerLimit = 0
                            float physics:upperLimit = 0.45
                        }

                        def PhysicsPrismaticJoint "cabinet6_drawer2_joint"
                        {
                            uniform token physics:axis = "Z"
                            rel physics:body0 = </world/apartment/apartment_root/kitchen_root/kitchen1_root/cabinet6>
                            rel physics:body1 = </world/cabinet6_drawer2>
                            bool physics:collisionEnabled = 0
                            point3f physics:localPos0 = (-0.0530569, -0.00074397, 0.132969)
                            point3f physics:localPos1 = (0, 0, 0)
                            quatf physics:localRot0 = (0.7071068, 0, -0.7071068, 0)
                            quatf physics:localRot1 = (0.7071068, 0, -0.7071068, 0)
                            float physics:lowerLimit = 0
                            float physics:upperLimit = 0.45
                        }

                        def PhysicsPrismaticJoint "cabinet6_drawer3_joint"
                        {
                            uniform token physics:axis = "Z"
                            rel physics:body0 = </world/apartment/apartment_root/kitchen_root/kitchen1_root/cabinet6>
                            rel physics:body1 = </world/cabinet6_drawer3>
                            bool physics:collisionEnabled = 0
                            point3f physics:localPos0 = (-0.0527976, -0.00069453, -0.196909)
                            point3f physics:localPos1 = (0, 0, 0)
                            quatf physics:localRot0 = (0.7071068, 0, -0.7071068, 0)
                            quatf physics:localRot1 = (0.7071068, 0, -0.7071068, 0)
                            float physics:lowerLimit = 0
                            float physics:upperLimit = 0.45
                        }
                    }

                    def Xform "island_cover4" (
                        prepend apiSchemas = ["PhysicsMassAPI"]
                    )
                    {
                        point3f physics:centerOfMass = (0, 0, 0)
                        float3 physics:diagonalInertia = (0.6808572, 0.9771155, 0.29687595)
                        float physics:mass = 0
                        matrix4d xformOp:transform = ( (-1, 0, 0, 0), (0, -1, 0, 0), (0, 0, 1, 0), (0.272592, 3.79516, 0.446017, 1) )
                        uniform token[] xformOpOrder = ["xformOp:transform"]

                        def Cube "geom_317" (
                            prepend apiSchemas = ["PhysicsCollisionAPI"]
                        )
                        {
                            bool physics:collisionEnabled = 1
                            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                            float[] primvars:displayOpacity = [1]
                            matrix4d xformOp:transform = ( (0.296074, 0, 0, 0), (0, 0.009554, 0, 0), (0, 0, 0.448506, 0), (0, 0, 0, 1) )
                            uniform token[] xformOpOrder = ["xformOp:transform"]
                        }
                    }

                    def Xform "kitchen1_base_board" (
                        prepend apiSchemas = ["PhysicsMassAPI"]
                    )
                    {
                        point3f physics:centerOfMass = (0, 0, 0)
                        float3 physics:diagonalInertia = (2.9116833, 0.0044582705, 2.9075606)
                        float physics:mass = 0
                        matrix4d xformOp:transform = ( (-1, 0, 0, 0), (0, -1, 0, 0), (0, 0, 1, 0), (0.55976, 2.47826, 0.0516843, 1) )
                        uniform token[] xformOpOrder = ["xformOp:transform"]

                        def Cube "geom_318" (
                            prepend apiSchemas = ["PhysicsCollisionAPI"]
                        )
                        {
                            bool physics:collisionEnabled = 1
                            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                            float[] primvars:displayOpacity = [1]
                            matrix4d xformOp:transform = ( (0.009889, 0, 0, 0), (0, 1.30158, 0, 0), (0, 0, 0.05, 0), (0, 0, 0, 1) )
                            uniform token[] xformOpOrder = ["xformOp:transform"]
                        }
                    }
                }

                def Xform "kitchen2_root"
                {
                    matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0.1, 0, 0, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]

                    def Xform "counter_sink_stove" (
                        prepend apiSchemas = ["PhysicsMassAPI"]
                    )
                    {
                        point3f physics:centerOfMass = (0.0466976, -0.304538, 0.37917456)
                        float3 physics:diagonalInertia = (188.77603, 179.29427, 19.826786)
                        float physics:mass = 0
                        matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (2.65274, 2.70904, 0.465629, 1) )
                        uniform token[] xformOpOrder = ["xformOp:transform"]

                        def Cube "geom_319" (
                            prepend apiSchemas = ["PhysicsCollisionAPI"]
                        )
                        {
                            bool physics:collisionEnabled = 1
                            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                            float[] primvars:displayOpacity = [1]
                            matrix4d xformOp:transform = ( (0.5, 0, 0, 0), (0, 0.0145, 0, 0), (0, 0, 0.467231, 0), (0, -1.5755, 0, 1) )
                            uniform token[] xformOpOrder = ["xformOp:transform"]
                        }

                        def Cube "geom_320" (
                            prepend apiSchemas = ["PhysicsCollisionAPI"]
                        )
                        {
                            bool physics:collisionEnabled = 1
                            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                            float[] primvars:displayOpacity = [1]
                            matrix4d xformOp:transform = ( (0.237531, 0, 0, 0), (0, 1.58852, 0, 0), (0, 0, 0.015, 0), (0.262968, 0, 0.453637, 1) )
                            uniform token[] xformOpOrder = ["xformOp:transform"]
                        }

                        def Cube "geom_321" (
                            prepend apiSchemas = ["PhysicsCollisionAPI"]
                        )
                        {
                            bool physics:collisionEnabled = 1
                            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                            float[] primvars:displayOpacity = [1]
                            matrix4d xformOp:transform = ( (0.048817, 0, 0, 0), (0, 1.58852, 0, 0), (0, 0, 0.015, 0), (-0.451058, 0, 0.453637, 1) )
                            uniform token[] xformOpOrder = ["xformOp:transform"]
                        }

                        def Cube "geom_322" (
                            prepend apiSchemas = ["PhysicsCollisionAPI"]
                        )
                        {
                            bool physics:collisionEnabled = 1
                            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                            float[] primvars:displayOpacity = [1]
                            matrix4d xformOp:transform = ( (0.498, 0, 0, 0), (0, 0.367711, 0, 0), (0, 0, 0.015, 0), (0, 1.22213, 0.453637, 1) )
                            uniform token[] xformOpOrder = ["xformOp:transform"]
                        }

                        def Cube "geom_323" (
                            prepend apiSchemas = ["PhysicsCollisionAPI"]
                        )
                        {
                            bool physics:collisionEnabled = 1
                            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                            float[] primvars:displayOpacity = [1]
                            matrix4d xformOp:transform = ( (0.498, 0, 0, 0), (0, 1.02804, 0, 0), (0, 0, 0.015, 0), (0, -0.560551, 0.453637, 1) )
                            uniform token[] xformOpOrder = ["xformOp:transform"]
                        }

                        def Xform "stove" (
                            prepend apiSchemas = ["PhysicsMassAPI"]
                        )
                        {
                            point3f physics:centerOfMass = (0, 0, 0)
                            float3 physics:diagonalInertia = (0.103754714, 0.043711405, 0.14745855)
                            float physics:mass = 0
                            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (-0.156557, -1.08145, 0.471606, 1) )
                            uniform token[] xformOpOrder = ["xformOp:transform"]

                            def Cube "geom_324" (
                                prepend apiSchemas = ["PhysicsCollisionAPI"]
                            )
                            {
                                bool physics:collisionEnabled = 1
                                color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                                float[] primvars:displayOpacity = [1]
                                matrix4d xformOp:transform = ( (0.258, 0, 0, 0), (0, 0.3975, 0, 0), (0, 0, 0.002401, 0), (0, 0, 0, 1) )
                                uniform token[] xformOpOrder = ["xformOp:transform"]
                            }
                        }

                        def Xform "counter_sink" (
                            prepend apiSchemas = ["PhysicsMassAPI"]
                        )
                        {
                            point3f physics:centerOfMass = (0.04775382, 0, -0.024448458)
                            float3 physics:diagonalInertia = (0.63524556, 0.40020916, 0.32437155)
                            float physics:mass = 0
                            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (-0.188876, 0.665534, 0.382404, 1) )
                            uniform token[] xformOpOrder = ["xformOp:transform"]

                            def Cube "geom_325" (
                                prepend apiSchemas = ["PhysicsCollisionAPI"]
                            )
                            {
                                bool physics:collisionEnabled = 1
                                color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                                float[] primvars:displayOpacity = [1]
                                matrix4d xformOp:transform = ( (0.038996, 0, 0, 0), (0, 0.202106, 0, 0), (0, 0, 0.088694, 0), (0.18348, 0, 0, 1) )
                                uniform token[] xformOpOrder = ["xformOp:transform"]
                            }

                            def Cube "geom_326" (
                                prepend apiSchemas = ["PhysicsCollisionAPI"]
                            )
                            {
                                bool physics:collisionEnabled = 1
                                color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                                float[] primvars:displayOpacity = [1]
                                matrix4d xformOp:transform = ( (0.01, 0, 0, 0), (0, 0.202106, 0, 0), (0, 0, 0.088694, 0), (-0.212477, 0, 0, 1) )
                                uniform token[] xformOpOrder = ["xformOp:transform"]
                            }

                            def Cube "geom_327" (
                                prepend apiSchemas = ["PhysicsCollisionAPI"]
                            )
                            {
                                bool physics:collisionEnabled = 1
                                color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                                float[] primvars:displayOpacity = [1]
                                matrix4d xformOp:transform = ( (0.222309, 0, 0, 0), (0, 0.01, 0, 0), (0, 0, 0.088694, 0), (0, -0.192479, 0, 1) )
                                uniform token[] xformOpOrder = ["xformOp:transform"]
                            }

                            def Cube "geom_328" (
                                prepend apiSchemas = ["PhysicsCollisionAPI"]
                            )
                            {
                                bool physics:collisionEnabled = 1
                                color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                                float[] primvars:displayOpacity = [1]
                                matrix4d xformOp:transform = ( (0.222309, 0, 0, 0), (0, 0.01, 0, 0), (0, 0, 0.088694, 0), (0, 0.192479, 0, 1) )
                                uniform token[] xformOpOrder = ["xformOp:transform"]
                            }

                            def Cube "geom_329" (
                                prepend apiSchemas = ["PhysicsCollisionAPI"]
                            )
                            {
                                bool physics:collisionEnabled = 1
                                color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                                float[] primvars:displayOpacity = [1]
                                matrix4d xformOp:transform = ( (0.222309, 0, 0, 0), (0, 0.202106, 0, 0), (0, 0, 0.013701, 0), (0, 0, -0.074992, 1) )
                                uniform token[] xformOpOrder = ["xformOp:transform"]
                            }

                            def Xform "counter_watertab" (
                                prepend apiSchemas = ["PhysicsMassAPI"]
                            )
                            {
                                point3f physics:centerOfMass = (0.079966486, 0.01469326, 0.0038307062)
                                float3 physics:diagonalInertia = (0.009072517, 0.007913992, 0.00154421)
                                float physics:mass = 0
                                matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0.0767719, -0.0196184, 0.238987, 1) )
                                uniform token[] xformOpOrder = ["xformOp:transform"]

                                def Cylinder "geom_330" (
                                    prepend apiSchemas = ["PhysicsCollisionAPI"]
                                )
                                {
                                    float3[] extent = [(-0.022435, -0.022435, -0.038739), (0.022435, 0.022435, 0.038739)]
                                    double height = 0.077478
                                    bool physics:collisionEnabled = 1
                                    color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                                    float[] primvars:displayOpacity = [1]
                                    double radius = 0.022435
                                    matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0.113704, 0.0195, -0.11162, 1) )
                                    uniform token[] xformOpOrder = ["xformOp:transform"]
                                }

                                def Cylinder "geom_331" (
                                    prepend apiSchemas = ["PhysicsCollisionAPI"]
                                )
                                {
                                    float3[] extent = [(-0.014, -0.014, -0.10908), (0.014, 0.014, 0.10908)]
                                    double height = 0.21816
                                    bool physics:collisionEnabled = 1
                                    color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                                    float[] primvars:displayOpacity = [1]
                                    double radius = 0.014
                                    matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0.113704, 0.0195, 0.041404, 1) )
                                    uniform token[] xformOpOrder = ["xformOp:transform"]
                                }

                                def Cylinder "geom_332" (
                                    prepend apiSchemas = ["PhysicsCollisionAPI"]
                                )
                                {
                                    float3[] extent = [(-0.010966, -0.010966, -0.003818), (0.010966, 0.010966, 0.003818)]
                                    double height = 0.007636
                                    bool physics:collisionEnabled = 1
                                    color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                                    float[] primvars:displayOpacity = [1]
                                    double radius = 0.010966
                                    matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (-0.116237, 0.0195, 0.121328, 1) )
                                    uniform token[] xformOpOrder = ["xformOp:transform"]
                                }

                                def Cylinder "geom_333" (
                                    prepend apiSchemas = ["PhysicsCollisionAPI"]
                                )
                                {
                                    float3[] extent = [(-0.022466, -0.022466, -0.044495), (0.022466, 0.022466, 0.044495)]
                                    double height = 0.08899
                                    bool physics:collisionEnabled = 1
                                    color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                                    float[] primvars:displayOpacity = [1]
                                    double radius = 0.022466
                                    matrix4d xformOp:transform = ( (0, 0, -1, 0), (-1, 0, 0, 0), (0, 1, 0, 0), (0.113731, 0.009, -0.073523, 1) )
                                    uniform token[] xformOpOrder = ["xformOp:transform"]
                                }

                                def Sphere "geom_334" (
                                    prepend apiSchemas = ["PhysicsCollisionAPI"]
                                )
                                {
                                    float3[] extent = [(-0.018, -0.018, -0.018), (0.018, 0.018, 0.018)]
                                    bool physics:collisionEnabled = 1
                                    color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                                    float[] primvars:displayOpacity = [1]
                                    double radius = 0.018
                                    matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0.113738, -0.035496, -0.073492, 1) )
                                    uniform token[] xformOpOrder = ["xformOp:transform"]
                                }

                                def Cylinder "geom_335" (
                                    prepend apiSchemas = ["PhysicsCollisionAPI"]
                                )
                                {
                                    float3[] extent = [(-0.014, -0.014, -0.131986), (0.014, 0.014, 0.131986)]
                                    double height = 0.263972
                                    bool physics:collisionEnabled = 1
                                    color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                                    float[] primvars:displayOpacity = [1]
                                    double radius = 0.014
                                    matrix4d xformOp:transform = ( (0, 1, 0, 0), (0, 0, 1, 0), (1, 0, 0, 0), (-0.00425, 0.019498, 0.136485, 1) )
                                    uniform token[] xformOpOrder = ["xformOp:transform"]
                                }

                                def PhysicsRevoluteJoint "counter_sink_tap_temperature_joint"
                                {
                                    uniform token physics:axis = "Z"
                                    rel physics:body0 = </world/apartment/apartment_root/kitchen_root/kitchen2_root/counter_sink_stove/counter_sink/counter_watertab>
                                    rel physics:body1 = </world/counter_sink_tap_switch>
                                    bool physics:collisionEnabled = 0
                                    point3f physics:localPos0 = (0.113711, -0.0405528, -0.0737045)
                                    point3f physics:localPos1 = (0, 0, 0)
                                    quatf physics:localRot0 = (0, 0, 0.7071068, 0.7071068)
                                    quatf physics:localRot1 = (0.7071068, 0.7071068, 0, 0)
                                    float physics:lowerLimit = -90.00021
                                    float physics:upperLimit = 90.00021
                                }
                            }
                        }
                    }

                    def Xform "dishwasher" (
                        prepend apiSchemas = ["PhysicsMassAPI"]
                    )
                    {
                        point3f physics:centerOfMass = (0.19296232, 0, 0.040619005)
                        float3 physics:diagonalInertia = (7.082724, 5.918655, 4.529273)
                        float physics:mass = 0
                        matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (2.32419, 3.96355, 0.162264, 1) )
                        uniform token[] xformOpOrder = ["xformOp:transform"]

                        def Cube "geom_339" (
                            prepend apiSchemas = ["PhysicsCollisionAPI"]
                        )
                        {
                            bool physics:collisionEnabled = 1
                            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                            float[] primvars:displayOpacity = [1]
                            matrix4d xformOp:transform = ( (0.197879, 0, 0, 0), (0, 0.007724, 0, 0), (0, 0, 0.420898, 0), (0.244142, 0.291193, 0.25785, 1) )
                            uniform token[] xformOpOrder = ["xformOp:transform"]
                        }

                        def Cube "geom_340" (
                            prepend apiSchemas = ["PhysicsCollisionAPI"]
                        )
                        {
                            bool physics:collisionEnabled = 1
                            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                            float[] primvars:displayOpacity = [1]
                            matrix4d xformOp:transform = ( (0.197879, 0, 0, 0), (0, 0.007724, 0, 0), (0, 0, 0.420898, 0), (0.244142, -0.291193, 0.25785, 1) )
                            uniform token[] xformOpOrder = ["xformOp:transform"]
                        }

                        def Cube "geom_341" (
                            prepend apiSchemas = ["PhysicsCollisionAPI"]
                        )
                        {
                            bool physics:collisionEnabled = 1
                            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                            float[] primvars:displayOpacity = [1]
                            matrix4d xformOp:transform = ( (0.064761, 0, 0, 0), (0, 0.007724, 0, 0), (0, 0, 0.351941, 0), (-0.018498, 0.291193, 0.328806, 1) )
                            uniform token[] xformOpOrder = ["xformOp:transform"]
                        }

                        def Cube "geom_342" (
                            prepend apiSchemas = ["PhysicsCollisionAPI"]
                        )
                        {
                            bool physics:collisionEnabled = 1
                            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                            float[] primvars:displayOpacity = [1]
                            matrix4d xformOp:transform = ( (0.064761, 0, 0, 0), (0, 0.007724, 0, 0), (0, 0, 0.351941, 0), (-0.018498, -0.291193, 0.328806, 1) )
                            uniform token[] xformOpOrder = ["xformOp:transform"]
                        }

                        def Cube "geom_343" (
                            prepend apiSchemas = ["PhysicsCollisionAPI"]
                        )
                        {
                            bool physics:collisionEnabled = 1
                            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                            float[] primvars:displayOpacity = [1]
                            matrix4d xformOp:transform = ( (0.002413, 0, 0, 0), (0, 0.298917, 0, 0), (0, 0, 0.420898, 0), (0.439555, 0, 0.25785, 1) )
                            uniform token[] xformOpOrder = ["xformOp:transform"]
                        }

                        def Cube "geom_344" (
                            prepend apiSchemas = ["PhysicsCollisionAPI"]
                        )
                        {
                            bool physics:collisionEnabled = 1
                            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                            float[] primvars:displayOpacity = [1]
                            matrix4d xformOp:transform = ( (0.258487, 0, 0, 0), (0, 0.298917, 0, 0), (0, 0, 0.006749, 0), (0.183466, 0, 0.671998, 1) )
                            uniform token[] xformOpOrder = ["xformOp:transform"]
                        }

                        def Cube "geom_345" (
                            prepend apiSchemas = ["PhysicsCollisionAPI"]
                        )
                        {
                            bool physics:collisionEnabled = 1
                            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                            float[] primvars:displayOpacity = [1]
                            matrix4d xformOp:transform = ( (0.258487, 0, 0, 0), (0, 0.298917, 0, 0), (0, 0, 0.083552, 0), (0.183466, 0, -0.079608, 1) )
                            uniform token[] xformOpOrder = ["xformOp:transform"]
                        }

                        def PhysicsRevoluteJoint "dishwasher_front_joint"
                        {
                            uniform token physics:axis = "Z"
                            rel physics:body0 = </world/apartment/apartment_root/kitchen_root/kitchen2_root/dishwasher>
                            rel physics:body1 = </world/dishwasher_front>
                            bool physics:collisionEnabled = 0
                            point3f physics:localPos0 = (-0.0761212, 0.00031149, 0.00728645)
                            point3f physics:localPos1 = (0, 0, 0)
                            quatf physics:localRot0 = (0, 0, 0.70710677, -0.70710677)
                            quatf physics:localRot1 = (0, 0, 1, 0)
                            float physics:lowerLimit = 0
                            float physics:upperLimit = 90.00021
                        }

                        def PhysicsPrismaticJoint "dishwasher_tray1_joint"
                        {
                            uniform token physics:axis = "Z"
                            rel physics:body0 = </world/apartment/apartment_root/kitchen_root/kitchen2_root/dishwasher>
                            rel physics:body1 = </world/dishwasher_tray1>
                            bool physics:collisionEnabled = 0
                            point3f physics:localPos0 = (0.194014, 0.00735926, 0.227136)
                            point3f physics:localPos1 = (0, 0, 0)
                            quatf physics:localRot0 = (0.7071068, 0, -0.7071068, 0)
                            quatf physics:localRot1 = (0.7071068, 0, -0.7071068, 0)
                            float physics:lowerLimit = 0
                            float physics:upperLimit = 0.5
                        }

                        def PhysicsPrismaticJoint "dishwasher_tray2_joint"
                        {
                            uniform token physics:axis = "Z"
                            rel physics:body0 = </world/apartment/apartment_root/kitchen_root/kitchen2_root/dishwasher>
                            rel physics:body1 = </world/dishwasher_tray2>
                            bool physics:collisionEnabled = 0
                            point3f physics:localPos0 = (0.17742, 0.00735798, 0.402328)
                            point3f physics:localPos1 = (0, 0, 0)
                            quatf physics:localRot0 = (0.7071068, 0, -0.7071068, 0)
                            quatf physics:localRot1 = (0.7071068, 0, -0.7071068, 0)
                            float physics:lowerLimit = 0
                            float physics:upperLimit = 0.3
                        }

                        def PhysicsPrismaticJoint "dishwasher_tray3_joint"
                        {
                            uniform token physics:axis = "Z"
                            rel physics:body0 = </world/apartment/apartment_root/kitchen_root/kitchen2_root/dishwasher>
                            rel physics:body1 = </world/dishwasher_tray3>
                            bool physics:collisionEnabled = 0
                            point3f physics:localPos0 = (0.197872, 0.0131252, 0.611314)
                            point3f physics:localPos1 = (0, 0, 0)
                            quatf physics:localRot0 = (0.7071068, 0, -0.7071068, 0)
                            quatf physics:localRot1 = (0.7071068, 0, -0.7071068, 0)
                            float physics:lowerLimit = 0
                            float physics:upperLimit = 0.3
                        }
                    }

                    def Xform "cabinet8" (
                        prepend apiSchemas = ["PhysicsMassAPI"]
                    )
                    {
                        point3f physics:centerOfMass = (0.04543142, 0, -0.07251122)
                        float3 physics:diagonalInertia = (3.1352587, 2.381179, 2.1342988)
                        float physics:mass = 0
                        matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (2.49268, 3.37232, 0.494481, 1) )
                        uniform token[] xformOpOrder = ["xformOp:transform"]

                        def Cube "geom_362" (
                            prepend apiSchemas = ["PhysicsCollisionAPI"]
                        )
                        {
                            bool physics:collisionEnabled = 1
                            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                            float[] primvars:displayOpacity = [1]
                            matrix4d xformOp:transform = ( (0.277025, 0, 0, 0), (0, 0.007942, 0, 0), (0, 0, 0.398895, 0), (0, 0.291912, 0, 1) )
                            uniform token[] xformOpOrder = ["xformOp:transform"]
                        }

                        def Cube "geom_363" (
                            prepend apiSchemas = ["PhysicsCollisionAPI"]
                        )
                        {
                            bool physics:collisionEnabled = 1
                            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                            float[] primvars:displayOpacity = [1]
                            matrix4d xformOp:transform = ( (0.277025, 0, 0, 0), (0, 0.007942, 0, 0), (0, 0, 0.398895, 0), (0, -0.291912, 0, 1) )
                            uniform token[] xformOpOrder = ["xformOp:transform"]
                        }

                        def Cube "geom_364" (
                            prepend apiSchemas = ["PhysicsCollisionAPI"]
                        )
                        {
                            bool physics:collisionEnabled = 1
                            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                            float[] primvars:displayOpacity = [1]
                            matrix4d xformOp:transform = ( (0.003944, 0, 0, 0), (0, 0.284067, 0, 0), (0, 0, 0.382909, 0), (0.26153, 0, 0, 1) )
                            uniform token[] xformOpOrder = ["xformOp:transform"]
                        }

                        def Cube "geom_365" (
                            prepend apiSchemas = ["PhysicsCollisionAPI"]
                        )
                        {
                            bool physics:collisionEnabled = 1
                            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                            float[] primvars:displayOpacity = [1]
                            matrix4d xformOp:transform = ( (0.04, 0, 0, 0), (0, 0.284067, 0, 0), (0, 0, 0.008, 0), (0.217476, 0, 0.39091, 1) )
                            uniform token[] xformOpOrder = ["xformOp:transform"]
                        }

                        def Cube "geom_366" (
                            prepend apiSchemas = ["PhysicsCollisionAPI"]
                        )
                        {
                            bool physics:collisionEnabled = 1
                            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                            float[] primvars:displayOpacity = [1]
                            matrix4d xformOp:transform = ( (0.277025, 0, 0, 0), (0, 0.284067, 0, 0), (0, 0, 0.008, 0), (0, 0, -0.391005, 1) )
                            uniform token[] xformOpOrder = ["xformOp:transform"]
                        }

                        def PhysicsPrismaticJoint "sink_drawer1_joint"
                        {
                            uniform token physics:axis = "Z"
                            rel physics:body0 = </world/apartment/apartment_root/kitchen_root/kitchen2_root/cabinet8>
                            rel physics:body1 = </world/sink_drawer1>
                            bool physics:collisionEnabled = 0
                            point3f physics:localPos0 = (-0.0508662, 0.00013535, 0.0032)
                            point3f physics:localPos1 = (0, 0, 0)
                            quatf physics:localRot0 = (0.7071068, 0, -0.7071068, 0)
                            quatf physics:localRot1 = (0.7071068, 0, -0.7071068, 0)
                            float physics:lowerLimit = 0
                            float physics:upperLimit = 0.45
                        }

                        def PhysicsPrismaticJoint "sink_drawer2_joint"
                        {
                            uniform token physics:axis = "Z"
                            rel physics:body0 = </world/apartment/apartment_root/kitchen_root/kitchen2_root/cabinet8>
                            rel physics:body1 = </world/sink_drawer2>
                            bool physics:collisionEnabled = 0
                            point3f physics:localPos0 = (-0.0729948, 0.00142344, 0.164377)
                            point3f physics:localPos1 = (0, 0, 0)
                            quatf physics:localRot0 = (0.7071068, 0, -0.7071068, 0)
                            quatf physics:localRot1 = (0.7071068, 0, -0.7071068, 0)
                            float physics:lowerLimit = 0
                            float physics:upperLimit = 0.3
                        }
                    }

                    def Xform "cabinet9" (
                        prepend apiSchemas = ["PhysicsMassAPI"]
                    )
                    {
                        point3f physics:centerOfMass = (0.04543142, 0, -0.07251122)
                        float3 physics:diagonalInertia = (3.1352587, 2.381179, 2.1342988)
                        float physics:mass = 0
                        matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (2.49288, 2.77269, 0.494068, 1) )
                        uniform token[] xformOpOrder = ["xformOp:transform"]

                        def Cube "geom_409" (
                            prepend apiSchemas = ["PhysicsCollisionAPI"]
                        )
                        {
                            bool physics:collisionEnabled = 1
                            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                            float[] primvars:displayOpacity = [1]
                            matrix4d xformOp:transform = ( (0.277025, 0, 0, 0), (0, 0.007942, 0, 0), (0, 0, 0.398895, 0), (0, 0.291912, 0, 1) )
                            uniform token[] xformOpOrder = ["xformOp:transform"]
                        }

                        def Cube "geom_410" (
                            prepend apiSchemas = ["PhysicsCollisionAPI"]
                        )
                        {
                            bool physics:collisionEnabled = 1
                            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                            float[] primvars:displayOpacity = [1]
                            matrix4d xformOp:transform = ( (0.277025, 0, 0, 0), (0, 0.007942, 0, 0), (0, 0, 0.398895, 0), (0, -0.291912, 0, 1) )
                            uniform token[] xformOpOrder = ["xformOp:transform"]
                        }

                        def Cube "geom_411" (
                            prepend apiSchemas = ["PhysicsCollisionAPI"]
                        )
                        {
                            bool physics:collisionEnabled = 1
                            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                            float[] primvars:displayOpacity = [1]
                            matrix4d xformOp:transform = ( (0.003944, 0, 0, 0), (0, 0.284067, 0, 0), (0, 0, 0.382909, 0), (0.26153, 0, 0, 1) )
                            uniform token[] xformOpOrder = ["xformOp:transform"]
                        }

                        def Cube "geom_412" (
                            prepend apiSchemas = ["PhysicsCollisionAPI"]
                        )
                        {
                            bool physics:collisionEnabled = 1
                            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                            float[] primvars:displayOpacity = [1]
                            matrix4d xformOp:transform = ( (0.04, 0, 0, 0), (0, 0.284067, 0, 0), (0, 0, 0.008, 0), (0.217476, 0, 0.39091, 1) )
                            uniform token[] xformOpOrder = ["xformOp:transform"]
                        }

                        def Cube "geom_413" (
                            prepend apiSchemas = ["PhysicsCollisionAPI"]
                        )
                        {
                            bool physics:collisionEnabled = 1
                            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                            float[] primvars:displayOpacity = [1]
                            matrix4d xformOp:transform = ( (0.277025, 0, 0, 0), (0, 0.284067, 0, 0), (0, 0, 0.008, 0), (0, 0, -0.391005, 1) )
                            uniform token[] xformOpOrder = ["xformOp:transform"]
                        }

                        def PhysicsPrismaticJoint "cabinet9_drawer1_joint"
                        {
                            uniform token physics:axis = "Z"
                            rel physics:body0 = </world/apartment/apartment_root/kitchen_root/kitchen2_root/cabinet9>
                            rel physics:body1 = </world/cabinet9_drawer1>
                            bool physics:collisionEnabled = 0
                            point3f physics:localPos0 = (-0.0507959, -0.00175364, 0.332084)
                            point3f physics:localPos1 = (0, 0, 0)
                            quatf physics:localRot0 = (0.7071068, 0, -0.7071068, 0)
                            quatf physics:localRot1 = (0.7071068, 0, -0.7071068, 0)
                            float physics:lowerLimit = 0
                            float physics:upperLimit = 0.45
                        }

                        def PhysicsPrismaticJoint "cabinet9_drawer2_joint"
                        {
                            uniform token physics:axis = "Z"
                            rel physics:body0 = </world/apartment/apartment_root/kitchen_root/kitchen2_root/cabinet9>
                            rel physics:body1 = </world/cabinet9_drawer2>
                            bool physics:collisionEnabled = 0
                            point3f physics:localPos0 = (-0.050753, -0.00065196, 0.134945)
                            point3f physics:localPos1 = (0, 0, 0)
                            quatf physics:localRot0 = (0.7071068, 0, -0.7071068, 0)
                            quatf physics:localRot1 = (0.7071068, 0, -0.7071068, 0)
                            float physics:lowerLimit = 0
                            float physics:upperLimit = 0.45
                        }

                        def PhysicsPrismaticJoint "cabinet9_drawer3_joint"
                        {
                            uniform token physics:axis = "Z"
                            rel physics:body0 = </world/apartment/apartment_root/kitchen_root/kitchen2_root/cabinet9>
                            rel physics:body1 = </world/cabinet9_drawer3>
                            bool physics:collisionEnabled = 0
                            point3f physics:localPos0 = (-0.0504523, -0.00167063, -0.196113)
                            point3f physics:localPos1 = (0, 0, 0)
                            quatf physics:localRot0 = (0.7071068, 0, -0.7071068, 0)
                            quatf physics:localRot1 = (0.7071068, 0, -0.7071068, 0)
                            float physics:lowerLimit = 0
                            float physics:upperLimit = 0.45
                        }
                    }

                    def Xform "cabinet10" (
                        prepend apiSchemas = ["PhysicsMassAPI"]
                    )
                    {
                        point3f physics:centerOfMass = (0.034447238, 0, -0.054388054)
                        float3 physics:diagonalInertia = (1.9767264, 1.9737027, 1.1823037)
                        float physics:mass = 0
                        matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (2.49299, 2.27192, 0.50112, 1) )
                        uniform token[] xformOpOrder = ["xformOp:transform"]

                        def Cube "geom_442" (
                            prepend apiSchemas = ["PhysicsCollisionAPI"]
                        )
                        {
                            bool physics:collisionEnabled = 1
                            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                            float[] primvars:displayOpacity = [1]
                            matrix4d xformOp:transform = ( (0.27726, 0, 0, 0), (0, 0.008, 0, 0), (0, 0, 0.399006, 0), (0, 0.191779, 0, 1) )
                            uniform token[] xformOpOrder = ["xformOp:transform"]
                        }

                        def Cube "geom_443" (
                            prepend apiSchemas = ["PhysicsCollisionAPI"]
                        )
                        {
                            bool physics:collisionEnabled = 1
                            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                            float[] primvars:displayOpacity = [1]
                            matrix4d xformOp:transform = ( (0.27726, 0, 0, 0), (0, 0.008, 0, 0), (0, 0, 0.399006, 0), (0, -0.191779, 0, 1) )
                            uniform token[] xformOpOrder = ["xformOp:transform"]
                        }

                        def Cube "geom_444" (
                            prepend apiSchemas = ["PhysicsCollisionAPI"]
                        )
                        {
                            bool physics:collisionEnabled = 1
                            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                            float[] primvars:displayOpacity = [1]
                            matrix4d xformOp:transform = ( (0.27726, 0, 0, 0), (0, 0.184833, 0, 0), (0, 0, 0.008, 0), (0, 0, -0.391006, 1) )
                            uniform token[] xformOpOrder = ["xformOp:transform"]
                        }

                        def Cube "geom_445" (
                            prepend apiSchemas = ["PhysicsCollisionAPI"]
                        )
                        {
                            bool physics:collisionEnabled = 1
                            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                            float[] primvars:displayOpacity = [1]
                            matrix4d xformOp:transform = ( (0.04, 0, 0, 0), (0, 0.184833, 0, 0), (0, 0, 0.008, 0), (0.217476, 0, 0.390909, 1) )
                            uniform token[] xformOpOrder = ["xformOp:transform"]
                        }

                        def Cube "geom_446" (
                            prepend apiSchemas = ["PhysicsCollisionAPI"]
                        )
                        {
                            bool physics:collisionEnabled = 1
                            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                            float[] primvars:displayOpacity = [1]
                            matrix4d xformOp:transform = ( (0.004, 0, 0, 0), (0, 0.184833, 0, 0), (0, 0, 0.38291, 0), (0.261473, 0, 0, 1) )
                            uniform token[] xformOpOrder = ["xformOp:transform"]
                        }

                        def PhysicsPrismaticJoint "cabinet10_drawer1_joint"
                        {
                            uniform token physics:axis = "Z"
                            rel physics:body0 = </world/apartment/apartment_root/kitchen_root/kitchen2_root/cabinet10>
                            rel physics:body1 = </world/cabinet10_drawer1>
                            bool physics:collisionEnabled = 0
                            point3f physics:localPos0 = (-0.0509572, 0.00062459, 0.325652)
                            point3f physics:localPos1 = (0, 0, 0)
                            quatf physics:localRot0 = (0.7071068, 0, -0.7071068, 0)
                            quatf physics:localRot1 = (0.7071068, 0, -0.7071068, 0)
                            float physics:lowerLimit = 0
                            float physics:upperLimit = 0.45
                        }

                        def PhysicsPrismaticJoint "cabinet10_drawer2_joint"
                        {
                            uniform token physics:axis = "Z"
                            rel physics:body0 = </world/apartment/apartment_root/kitchen_root/kitchen2_root/cabinet10>
                            rel physics:body1 = </world/cabinet10_drawer2>
                            bool physics:collisionEnabled = 0
                            point3f physics:localPos0 = (-0.0507138, -0.00006861, 0.128052)
                            point3f physics:localPos1 = (0, 0, 0)
                            quatf physics:localRot0 = (0.7071068, 0, -0.7071068, 0)
                            quatf physics:localRot1 = (0.7071068, 0, -0.7071068, 0)
                            float physics:lowerLimit = 0
                            float physics:upperLimit = 0.45
                        }

                        def PhysicsPrismaticJoint "cabinet10_drawer3_joint"
                        {
                            uniform token physics:axis = "Z"
                            rel physics:body0 = </world/apartment/apartment_root/kitchen_root/kitchen2_root/cabinet10>
                            rel physics:body1 = </world/cabinet10_drawer3>
                            bool physics:collisionEnabled = 0
                            point3f physics:localPos0 = (-0.0504031, -0.00036921, -0.203967)
                            point3f physics:localPos1 = (0, 0, 0)
                            quatf physics:localRot0 = (0.7071068, 0, -0.7071068, 0)
                            quatf physics:localRot1 = (0.7071068, 0, -0.7071068, 0)
                            float physics:lowerLimit = 0
                            float physics:upperLimit = 0.45
                        }
                    }

                    def Xform "cabinet11" (
                        prepend apiSchemas = ["PhysicsMassAPI"]
                    )
                    {
                        point3f physics:centerOfMass = (0.05768674, -0.22122848, -0.091080435)
                        float3 physics:diagonalInertia = (4.587831, 3.4648354, 2.4973118)
                        float physics:mass = 0
                        matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (2.49294, 1.62156, 0.509844, 1) )
                        uniform token[] xformOpOrder = ["xformOp:transform"]

                        def Cube "geom_475" (
                            prepend apiSchemas = ["PhysicsCollisionAPI"]
                        )
                        {
                            bool physics:collisionEnabled = 1
                            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                            float[] primvars:displayOpacity = [1]
                            matrix4d xformOp:transform = ( (0.27726, 0, 0, 0), (0, 0.008, 0, 0), (0, 0, 0.399006, 0), (0, -0.441952, 0, 1) )
                            uniform token[] xformOpOrder = ["xformOp:transform"]
                        }

                        def Cube "geom_476" (
                            prepend apiSchemas = ["PhysicsCollisionAPI"]
                        )
                        {
                            bool physics:collisionEnabled = 1
                            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                            float[] primvars:displayOpacity = [1]
                            matrix4d xformOp:transform = ( (0.27726, 0, 0, 0), (0, 0.008, 0, 0), (0, 0, 0.399006, 0), (0, -0.441952, 0, 1) )
                            uniform token[] xformOpOrder = ["xformOp:transform"]
                        }

                        def Cube "geom_477" (
                            prepend apiSchemas = ["PhysicsCollisionAPI"]
                        )
                        {
                            bool physics:collisionEnabled = 1
                            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                            float[] primvars:displayOpacity = [1]
                            matrix4d xformOp:transform = ( (0.27726, 0, 0, 0), (0, 0.43394, 0, 0), (0, 0, 0.008, 0), (0, 0, -0.391006, 1) )
                            uniform token[] xformOpOrder = ["xformOp:transform"]
                        }

                        def Cube "geom_478" (
                            prepend apiSchemas = ["PhysicsCollisionAPI"]
                        )
                        {
                            bool physics:collisionEnabled = 1
                            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                            float[] primvars:displayOpacity = [1]
                            matrix4d xformOp:transform = ( (0.04, 0, 0, 0), (0, 0.43394, 0, 0), (0, 0, 0.008, 0), (0.217476, 0, 0.390909, 1) )
                            uniform token[] xformOpOrder = ["xformOp:transform"]
                        }

                        def Cube "geom_479" (
                            prepend apiSchemas = ["PhysicsCollisionAPI"]
                        )
                        {
                            bool physics:collisionEnabled = 1
                            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                            float[] primvars:displayOpacity = [1]
                            matrix4d xformOp:transform = ( (0.004, 0, 0, 0), (0, 0.43394, 0, 0), (0, 0, 0.38291, 0), (0.261473, 0, 0, 1) )
                            uniform token[] xformOpOrder = ["xformOp:transform"]
                        }

                        def PhysicsPrismaticJoint "cabinet11_drawer1_joint"
                        {
                            uniform token physics:axis = "Z"
                            rel physics:body0 = </world/apartment/apartment_root/kitchen_root/kitchen2_root/cabinet11>
                            rel physics:body1 = </world/cabinet11_drawer1>
                            bool physics:collisionEnabled = 0
                            point3f physics:localPos0 = (-0.0508224, 0.00063939, 0.318169)
                            point3f physics:localPos1 = (0, 0, 0)
                            quatf physics:localRot0 = (0.7071068, 0, -0.7071068, 0)
                            quatf physics:localRot1 = (0.7071068, 0, -0.7071068, 0)
                            float physics:lowerLimit = 0
                            float physics:upperLimit = 0.45
                        }

                        def PhysicsPrismaticJoint "cabinet11_drawer2_joint"
                        {
                            uniform token physics:axis = "Z"
                            rel physics:body0 = </world/apartment/apartment_root/kitchen_root/kitchen2_root/cabinet11>
                            rel physics:body1 = </world/cabinet11_drawer2>
                            bool physics:collisionEnabled = 0
                            point3f physics:localPos0 = (-0.0503088, 0.0004598, 0.119178)
                            point3f physics:localPos1 = (0, 0, 0)
                            quatf physics:localRot0 = (0.7071068, 0, -0.7071068, 0)
                            quatf physics:localRot1 = (0.7071068, 0, -0.7071068, 0)
                            float physics:lowerLimit = 0
                            float physics:upperLimit = 0.45
                        }

                        def PhysicsPrismaticJoint "cabinet11_drawer3_joint"
                        {
                            uniform token physics:axis = "Z"
                            rel physics:body0 = </world/apartment/apartment_root/kitchen_root/kitchen2_root/cabinet11>
                            rel physics:body1 = </world/cabinet11_drawer3>
                            bool physics:collisionEnabled = 0
                            point3f physics:localPos0 = (-0.0507751, 0.00146352, -0.213308)
                            point3f physics:localPos1 = (0, 0, 0)
                            quatf physics:localRot0 = (0.7071068, 0, -0.7071068, 0)
                            quatf physics:localRot1 = (0.7071068, 0, -0.7071068, 0)
                            float physics:lowerLimit = 0
                            float physics:upperLimit = 0.45
                        }
                    }

                    def Xform "kitchen2_base_board" (
                        prepend apiSchemas = ["PhysicsMassAPI"]
                    )
                    {
                        point3f physics:centerOfMass = (0, 0.3023, 0)
                        float3 physics:diagonalInertia = (5.0305624, 0.0053949654, 5.0255823)
                        float physics:mass = 0
                        matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (2.21094, 2.40968, 0.0496364, 1) )
                        uniform token[] xformOpOrder = ["xformOp:transform"]

                        def Cube "geom_508" (
                            prepend apiSchemas = ["PhysicsCollisionAPI"]
                        )
                        {
                            bool physics:collisionEnabled = 1
                            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                            float[] primvars:displayOpacity = [1]
                            matrix4d xformOp:transform = ( (0.01, 0, 0, 0), (0, 1.55624, 0, 0), (0, 0, 0.05, 0), (0, 0.3023, 0, 1) )
                            uniform token[] xformOpOrder = ["xformOp:transform"]
                        }
                    }

                    def Xform "island_cover1" (
                        prepend apiSchemas = ["PhysicsMassAPI"]
                    )
                    {
                        point3f physics:centerOfMass = (0, 0, 0)
                        float3 physics:diagonalInertia = (48.40199, 3.7129457, 44.69241)
                        float physics:mass = 0
                        matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (2.86825, 2.7196, 0.450317, 1) )
                        uniform token[] xformOpOrder = ["xformOp:transform"]

                        def Cube "geom_509" (
                            prepend apiSchemas = ["PhysicsCollisionAPI"]
                        )
                        {
                            bool physics:collisionEnabled = 1
                            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                            float[] primvars:displayOpacity = [1]
                            matrix4d xformOp:transform = ( (0.009625, 0, 0, 0), (0, 1.56783, 0, 0), (0, 0, 0.451805, 0), (0, 0, 0, 1) )
                            uniform token[] xformOpOrder = ["xformOp:transform"]
                        }
                    }

                    def Xform "island_cover3" (
                        prepend apiSchemas = ["PhysicsMassAPI"]
                    )
                    {
                        point3f physics:centerOfMass = (0, 0, 0)
                        float3 physics:diagonalInertia = (0.83522344, 1.3060349, 0.47162947)
                        float physics:mass = 0
                        matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (2.53831, 4.2773, 0.45176, 1) )
                        uniform token[] xformOpOrder = ["xformOp:transform"]

                        def Cube "geom_510" (
                            prepend apiSchemas = ["PhysicsCollisionAPI"]
                        )
                        {
                            bool physics:collisionEnabled = 1
                            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                            float[] primvars:displayOpacity = [1]
                            matrix4d xformOp:transform = ( (0.339444, 0, 0, 0), (0, 0.01, 0, 0), (0, 0, 0.451805, 0), (0, 0, 0, 1) )
                            uniform token[] xformOpOrder = ["xformOp:transform"]
                        }
                    }

                    def Xform "island_cover5" (
                        prepend apiSchemas = ["PhysicsMassAPI"]
                    )
                    {
                        point3f physics:centerOfMass = (0, 0, 0)
                        float3 physics:diagonalInertia = (0.83522344, 1.3060349, 0.47162947)
                        float physics:mass = 0
                        matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (2.5375, 1.16089, 0.446014, 1) )
                        uniform token[] xformOpOrder = ["xformOp:transform"]

                        def Cube "geom_511" (
                            prepend apiSchemas = ["PhysicsCollisionAPI"]
                        )
                        {
                            bool physics:collisionEnabled = 1
                            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                            float[] primvars:displayOpacity = [1]
                            matrix4d xformOp:transform = ( (0.339444, 0, 0, 0), (0, 0.01, 0, 0), (0, 0, 0.451805, 0), (0, 0, 0, 1) )
                            uniform token[] xformOpOrder = ["xformOp:transform"]
                        }
                    }
                }
            }
        }
    }

    def Xform "window4_right" (
        prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMassAPI"]
    )
    {
        point3f physics:centerOfMass = (0, 0.421713, 0)
        float3 physics:diagonalInertia = (14.40707, 12.345179, 2.0642111)
        float physics:mass = 34.801445
        bool physics:rigidBodyEnabled = 1
        matrix4d xformOp:transform = ( (-2.220446049250313e-16, -1.0000000000000002, -0, 0), (1.0000000000000002, -2.220446049250313e-16, 0, 0), (0, -0, 1, 0), (8.604546, 5.12273, 1.2959789999999998, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]

        def Cube "geom_12" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.01, 0, 0, 0), (0, 0.421713, 0, 0), (0, 0, 1.03155, 0), (0, 0.421713, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def PhysicsRevoluteJoint "window4_right_handle_rotation_joint"
        {
            uniform token physics:axis = "Z"
            rel physics:body0 = </world/window4_right>
            rel physics:body1 = </world/window4_right_handle_rotation>
            bool physics:collisionEnabled = 0
            point3f physics:localPos0 = (0.01, 0.834107, 0)
            point3f physics:localPos1 = (0, 0, 0)
            quatf physics:localRot0 = (0.7071068, 0, -0.7071068, 0)
            quatf physics:localRot1 = (0.7071068, 0, -0.7071068, 0)
            float physics:lowerLimit = 0
            float physics:upperLimit = 90.00021
        }
    }

    def Xform "window4_right_handle_rotation"
    {
        matrix4d xformOp:transform = ( (-2.220446049250313e-16, -1.0000000000000002, -0, 0), (1.0000000000000002, -2.220446049250313e-16, 0, 0), (0, -0, 1, 0), (9.438652999999999, 5.11273, 1.2959789999999998, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]

        def Xform "window4_right_handle" (
            prepend apiSchemas = ["PhysicsMassAPI"]
        )
        {
            point3f physics:centerOfMass = (-0.012342218, 0, 0.0049588555)
            float3 physics:diagonalInertia = (0.00014247725, 0.00012553482, 0.000018614073)
            float physics:mass = 0
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0.067235, 0, -0.057755, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Cylinder "geom_13" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                float3[] extent = [(-0.008, -0.008, -0.037618), (0.008, 0.008, 0.037618)]
                double height = 0.075236
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                float[] primvars:displayOpacity = [1]
                double radius = 0.008
                matrix4d xformOp:transform = ( (2.220446049250313e-16, 0, -0.9999999999999998, 0), (0, 1, 0, 0), (0.9999999999999998, 0, 2.220446049250313e-16, 0), (-0.029618, 0, 0.057814, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }

            def Cylinder "geom_14" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                float3[] extent = [(-0.008, -0.008, -0.065813), (0.008, 0.008, 0.065813)]
                double height = 0.131626
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                float[] primvars:displayOpacity = [1]
                double radius = 0.008
                matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }

            def Cylinder "geom_15" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                float3[] extent = [(-0.008, -0.008, -0.026476), (0.008, 0.008, 0.026476)]
                double height = 0.052952
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                float[] primvars:displayOpacity = [1]
                double radius = 0.008
                matrix4d xformOp:transform = ( (2.220446049250313e-16, 0, -0.9999999999999998, 0), (0, 1, 0, 0), (0.9999999999999998, 0, 2.220446049250313e-16, 0), (-0.018476, 0, -0.057813, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }
        }
    }

    def Xform "window4_left" (
        prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMassAPI"]
    )
    {
        point3f physics:centerOfMass = (0, -0.43203, 0)
        float3 physics:diagonalInertia = (14.864209, 12.647198, 2.2193885)
        float physics:mass = 35.652843
        bool physics:rigidBodyEnabled = 1
        matrix4d xformOp:transform = ( (-2.220446049250313e-16, -1.0000000000000002, -0, 0), (1.0000000000000002, -2.220446049250313e-16, 0, 0), (0, -0, 1, 0), (10.45021, 5.12111, 1.2959789999999998, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]

        def Cube "geom_16" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.01, 0, 0, 0), (0, 0.43203, 0, 0), (0, 0, 1.03155, 0), (0, -0.43203, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def PhysicsRevoluteJoint "window4_left_handle_rotation_joint"
        {
            uniform token physics:axis = "Z"
            rel physics:body0 = </world/window4_left>
            rel physics:body1 = </world/window4_left_handle_rotation>
            bool physics:collisionEnabled = 0
            point3f physics:localPos0 = (0.01, -0.834107, 0)
            point3f physics:localPos1 = (0, 0, 0)
            quatf physics:localRot0 = (0.7071068, 0, 0.7071068, 0)
            quatf physics:localRot1 = (0.7071068, 0, 0.7071068, 0)
            float physics:lowerLimit = 0
            float physics:upperLimit = 90.00021
        }
    }

    def Xform "window4_left_handle_rotation"
    {
        matrix4d xformOp:transform = ( (-2.220446049250313e-16, -1.0000000000000002, -0, 0), (1.0000000000000002, -2.220446049250313e-16, 0, 0), (0, -0, 1, 0), (9.616103, 5.11111, 1.2959789999999998, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]

        def Xform "window4_left_handle" (
            prepend apiSchemas = ["PhysicsMassAPI"]
        )
        {
            point3f physics:centerOfMass = (-0.012342218, 0, 0.0049588555)
            float3 physics:diagonalInertia = (0.00014247725, 0.00012553482, 0.000018614073)
            float physics:mass = 0
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0.067235, 0, -0.057755, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Cylinder "geom_17" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                float3[] extent = [(-0.008, -0.008, -0.037618), (0.008, 0.008, 0.037618)]
                double height = 0.075236
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                float[] primvars:displayOpacity = [1]
                double radius = 0.008
                matrix4d xformOp:transform = ( (2.220446049250313e-16, 0, -0.9999999999999998, 0), (0, 1, 0, 0), (0.9999999999999998, 0, 2.220446049250313e-16, 0), (-0.029618, 0, 0.057814, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }

            def Cylinder "geom_18" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                float3[] extent = [(-0.008, -0.008, -0.065813), (0.008, 0.008, 0.065813)]
                double height = 0.131626
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                float[] primvars:displayOpacity = [1]
                double radius = 0.008
                matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }

            def Cylinder "geom_19" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                float3[] extent = [(-0.008, -0.008, -0.026476), (0.008, 0.008, 0.026476)]
                double height = 0.052952
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                float[] primvars:displayOpacity = [1]
                double radius = 0.008
                matrix4d xformOp:transform = ( (2.220446049250313e-16, 0, -0.9999999999999998, 0), (0, 1, 0, 0), (0.9999999999999998, 0, 2.220446049250313e-16, 0), (-0.018476, 0, -0.057813, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }
        }
    }

    def Xform "wardrobe_door_left" (
        prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMassAPI"]
    )
    {
        point3f physics:centerOfMass = (-0.006435, -0.2485, 0.975)
        float3 physics:diagonalInertia = (2.614719, 2.3982468, 0.21676879)
        float physics:mass = 10.590146
        bool physics:rigidBodyEnabled = 1
        matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (18.2336, 1.6169, 0, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]

        def Cube "geom_35" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.0064835, 0, 0, 0), (0, 0.247719, 0, 0), (0, 0, 0.82422, 0), (-0.006435, -0.2485, 0.975, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Xform "wardrobe_door_left_handle" (
            prepend apiSchemas = ["PhysicsMassAPI"]
        )
        {
            point3f physics:centerOfMass = (-0.0053838952, 0, 0)
            float3 physics:diagonalInertia = (0.00009915017, 0.000092480914, 0.000008305764)
            float physics:mass = 0
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (-0.032089, -0.460513, 0.973703, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Cube "geom_36" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                float[] primvars:displayOpacity = [1]
                matrix4d xformOp:transform = ( (0.016778, 0, 0, 0), (0, 0.007541, 0, 0), (0, 0, 0.0072935, 0), (0.010421, 0, 0.059003, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }

            def Cube "geom_37" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                float[] primvars:displayOpacity = [1]
                matrix4d xformOp:transform = ( (0.007243, 0, 0, 0), (0, 0.007541, 0, 0), (0, 0, 0.065, 0), (-0.0136, 0, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }

            def Cube "geom_38" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                float[] primvars:displayOpacity = [1]
                matrix4d xformOp:transform = ( (0.016778, 0, 0, 0), (0, 0.007541, 0, 0), (0, 0, 0.0072935, 0), (0.010421, 0, -0.059003, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }
        }
    }

    def Xform "wardrobe_door_right" (
        prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMassAPI"]
    )
    {
        point3f physics:centerOfMass = (-0.006435, 0.2485, 0.975)
        float3 physics:diagonalInertia = (2.614719, 2.3982468, 0.21676879)
        float physics:mass = 10.590146
        bool physics:rigidBodyEnabled = 1
        matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (18.2336, 0.6169, 0, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]

        def Cube "geom_39" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.0064835, 0, 0, 0), (0, 0.247719, 0, 0), (0, 0, 0.82422, 0), (-0.006435, 0.2485, 0.975, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Xform "wardrobe_door_right_handle" (
            prepend apiSchemas = ["PhysicsMassAPI"]
        )
        {
            point3f physics:centerOfMass = (-0.0053838952, 0, 0)
            float3 physics:diagonalInertia = (0.00009915017, 0.000092480914, 0.000008305764)
            float physics:mass = 0
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (-0.032089, 0.460513, 0.973703, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Cube "geom_40" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                float[] primvars:displayOpacity = [1]
                matrix4d xformOp:transform = ( (0.016778, 0, 0, 0), (0, 0.007541, 0, 0), (0, 0, 0.0072935, 0), (0.010421, 0, 0.059003, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }

            def Cube "geom_41" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                float[] primvars:displayOpacity = [1]
                matrix4d xformOp:transform = ( (0.007243, 0, 0, 0), (0, 0.007541, 0, 0), (0, 0, 0.065, 0), (-0.0136, 0, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }

            def Cube "geom_42" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                float[] primvars:displayOpacity = [1]
                matrix4d xformOp:transform = ( (0.016778, 0, 0, 0), (0, 0.007541, 0, 0), (0, 0, 0.0072935, 0), (0.010421, 0, -0.059003, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }
        }
    }

    def Xform "coffee_table_drawer" (
        prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMassAPI"]
    )
    {
        point3f physics:centerOfMass = (-0.07177201, 0, 0.19392212)
        float3 physics:diagonalInertia = (0.9082973, 0.7072666, 0.41989917)
        float physics:mass = 14.796905
        bool physics:rigidBodyEnabled = 1
        matrix4d xformOp:transform = ( (-0.000004242642374308048, 0.9999999999910001, 0, 0), (-0.9999999999910001, -0.000004242642374308048, 0, 0), (0, 0, 1, 0), (16.653399999999998, 2.77957, 0, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]

        def Cube "geom_51" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.0107, 0, 0, 0), (0, 0.198, 0, 0), (0, 0, 0.157845, 0), (-0.338806, 0, 0.21892, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_52" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.27605, 0, 0, 0), (0, 0.1727, 0, 0), (0, 0, 0.01072, 0), (-0.051066, 0, 0.107979, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_53" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.0107, 0, 0, 0), (0, 0.1743, 0, 0), (0, 0, 0.1199, 0), (0.207974, 0, 0.238907, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_54" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.27605, 0, 0, 0), (0, 0.0107, 0, 0), (0, 0, 0.132125, 0), (-0.051066, -0.186206, 0.226597, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_55" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.27605, 0, 0, 0), (0, 0.0107, 0, 0), (0, 0, 0.132125, 0), (-0.051066, 0.186206, 0.226597, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }
    }

    def Xform "cabinet1_door" (
        prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMassAPI"]
    )
    {
        point3f physics:centerOfMass = (0, -0.285091, 0)
        float3 physics:diagonalInertia = (0.90749264, 0.61585784, 0.2922263)
        float physics:mass = 9.831172
        bool physics:rigidBodyEnabled = 1
        matrix4d xformOp:transform = ( (-1, 0, 0, 0), (0, -1, 0, 0), (0, 0, 1, 0), (0.564632, 1.18676, 1.79141, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]

        def Cube "geom_66" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.0095, 0, 0, 0), (0, 0.298468, 0, 0), (0, 0, 0.433405, 0), (0, -0.285091, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Xform "cabinet1_door_handle" (
            prepend apiSchemas = ["PhysicsMassAPI"]
        )
        {
            point3f physics:centerOfMass = (0.0030978445, 0, 0)
            float3 physics:diagonalInertia = (0.000118450924, 0.000116826224, 0.000002638771)
            float physics:mass = 0
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 2.220446049250313e-16, 0.9999999999999998, 0), (0, -0.9999999999999998, 2.220446049250313e-16, 0), (-0.0359888, -0.463156, -0.389834, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Cube "geom_67" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                float[] primvars:displayOpacity = [1]
                matrix4d xformOp:transform = ( (0.01, 0, 0, 0), (0, 0.0065, 0, 0), (0, 0, 0.0065, 0), (0.0164985, 0, 0.08, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }

            def Cube "geom_68" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                float[] primvars:displayOpacity = [1]
                matrix4d xformOp:transform = ( (0.01, 0, 0, 0), (0, 0.0065, 0, 0), (0, 0, 0.0065, 0), (0.0164985, 0, -0.08, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }

            def Cube "geom_69" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                float[] primvars:displayOpacity = [1]
                matrix4d xformOp:transform = ( (0.0065, 0, 0, 0), (0, 0.0065, 0, 0), (0, 0, 0.086516, 0), (0, 0, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }
        }
    }

    def Xform "cabinet1_drawer1" (
        prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMassAPI"]
    )
    {
        point3f physics:centerOfMass = (-0.014827849, -0.0062597604, -0.05992383)
        float3 physics:diagonalInertia = (0.7126139, 0.43631372, 0.36751172)
        float physics:mass = 10.163532
        bool physics:rigidBodyEnabled = 1
        matrix4d xformOp:transform = ( (-1, 0, 0, 0), (0, -1, 0, 0), (0, 0, 1, 0), (0.3314222, 1.4779801000000001, 0.6278249999999999, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]

        def Cube "geom_70" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.0095, 0, 0, 0), (0, 0.298468, 0, 0), (0, 0, 0.131486, 0), (-0.233977, 0, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_71" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.24585, 0, 0, 0), (0, 0.0079221, 0, 0), (0, 0, 0.0111962, 0), (0.021336, -0.26865, 0.0412455, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_72" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.24585, 0, 0, 0), (0, 0.0079221, 0, 0), (0, 0, 0.0111962, 0), (0.021336, 0.26865, 0.0412455, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_73" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.24585, 0, 0, 0), (0, 0.0079221, 0, 0), (0, 0, 0.041748, 0), (0.021336, -0.26865, -0.078968, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_74" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.24585, 0, 0, 0), (0, 0.0079221, 0, 0), (0, 0, 0.026549, 0), (0.021336, 0.26865, -0.0941, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_75" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.24578, 0, 0, 0), (0, 0.26182, 0, 0), (0, 0, 0.008, 0), (0.021399, 0, -0.114232, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_76" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.00932692, 0, 0, 0), (0, 0.26182, 0, 0), (0, 0, 0.084435, 0), (0.26, 0, -0.038, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Xform "cabinet1_drawer1_handle" (
            prepend apiSchemas = ["PhysicsMassAPI"]
        )
        {
            point3f physics:centerOfMass = (0.0030978445, 0, 0)
            float3 physics:diagonalInertia = (0.000118450924, 0.000116826224, 0.000002638771)
            float physics:mass = 0
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 2.220446049250313e-16, 0.9999999999999998, 0), (0, -0.9999999999999998, 2.220446049250313e-16, 0), (-0.268318, 0.00091816, 0.0840143, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Cube "geom_77" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                float[] primvars:displayOpacity = [1]
                matrix4d xformOp:transform = ( (0.01, 0, 0, 0), (0, 0.0065, 0, 0), (0, 0, 0.0065, 0), (0.0164985, 0, 0.08, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }

            def Cube "geom_78" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                float[] primvars:displayOpacity = [1]
                matrix4d xformOp:transform = ( (0.01, 0, 0, 0), (0, 0.0065, 0, 0), (0, 0, 0.0065, 0), (0.0164985, 0, -0.08, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }

            def Cube "geom_79" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                float[] primvars:displayOpacity = [1]
                matrix4d xformOp:transform = ( (0.0065, 0, 0, 0), (0, 0.0065, 0, 0), (0, 0, 0.086516, 0), (0, 0, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }
        }
    }

    def Xform "cabinet1_drawer2" (
        prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMassAPI"]
    )
    {
        point3f physics:centerOfMass = (-0.045866054, 0, -0.08160529)
        float3 physics:diagonalInertia = (0.8442696, 0.56226474, 0.4777437)
        float physics:mass = 11.722216
        bool physics:rigidBodyEnabled = 1
        matrix4d xformOp:transform = ( (-1, 0, 0, 0), (0, -1, 0, 0), (0, 0, 1, 0), (0.330632, 1.47776, 0.29840999999999995, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]

        def Cube "geom_80" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.0095, 0, 0, 0), (0, 0.298468, 0, 0), (0, 0, 0.19714, 0), (-0.233977, 0, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_81" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.24585, 0, 0, 0), (0, 0.0079221, 0, 0), (0, 0, 0.0111962, 0), (0.021336, -0.26865, -0.0084109, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_82" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.24585, 0, 0, 0), (0, 0.0079221, 0, 0), (0, 0, 0.0111962, 0), (0.021336, 0.26865, -0.0084109, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_83" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.24585, 0, 0, 0), (0, 0.0079221, 0, 0), (0, 0, 0.041751, 0), (0.021336, -0.26865, -0.12854, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_84" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.24585, 0, 0, 0), (0, 0.0079221, 0, 0), (0, 0, 0.041751, 0), (0.021336, 0.26865, -0.12854, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_85" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.24578, 0, 0, 0), (0, 0.26182, 0, 0), (0, 0, 0.008, 0), (0.021399, 0, -0.16226, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_86" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.00932692, 0, 0, 0), (0, 0.26182, 0, 0), (0, 0, 0.0758612, 0), (0.26, 0, -0.0797358, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Xform "cabinet1_drawer2_handle" (
            prepend apiSchemas = ["PhysicsMassAPI"]
        )
        {
            point3f physics:centerOfMass = (0.0030978445, 0, 0)
            float3 physics:diagonalInertia = (0.000118450924, 0.000116826224, 0.000002638771)
            float physics:mass = 0
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 2.220446049250313e-16, 0.9999999999999998, 0), (0, -0.9999999999999998, 2.220446049250313e-16, 0), (-0.269483, -0.00145845, 0.150606, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Cube "geom_87" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                float[] primvars:displayOpacity = [1]
                matrix4d xformOp:transform = ( (0.01, 0, 0, 0), (0, 0.0065, 0, 0), (0, 0, 0.0065, 0), (0.0164985, 0, 0.08, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }

            def Cube "geom_88" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                float[] primvars:displayOpacity = [1]
                matrix4d xformOp:transform = ( (0.01, 0, 0, 0), (0, 0.0065, 0, 0), (0, 0, 0.0065, 0), (0.0164985, 0, -0.08, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }

            def Cube "geom_89" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                float[] primvars:displayOpacity = [1]
                matrix4d xformOp:transform = ( (0.0065, 0, 0, 0), (0, 0.0065, 0, 0), (0, 0, 0.086516, 0), (0, 0, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }
        }
    }

    def Xform "oven_door" (
        prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMassAPI"]
    )
    {
        point3f physics:centerOfMass = (-0.226757, 0.005395, -0.002993)
        float3 physics:diagonalInertia = (0.30075586, 0.49068347, 0.19227901)
        float physics:mass = 10.3068285
        bool physics:rigidBodyEnabled = 1
        matrix4d xformOp:transform = ( (0, 0, -1, 0), (-1, 0, 0, 0), (0, 1, 0, 0), (0.5585910000000001, 1.4791197, 0.7717379999999999, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]

        def Cube "geom_95" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.235848, 0, 0, 0), (0, 0.018499, 0, 0), (0, 0, 0.295294, 0), (-0.226757, 0.005395, -0.002993, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }
    }

    def Xform "cabinet2_door" (
        prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMassAPI"]
    )
    {
        point3f physics:centerOfMass = (-0.000653, -0.185074, 0)
        float3 physics:diagonalInertia = (6.2222447, 6.0124903, 0.21071756)
        float physics:mass = 16.010284
        bool physics:rigidBodyEnabled = 1
        matrix4d xformOp:transform = ( (-1, 0, 0, 0), (0, -1, 0, 0), (0, 0, 1, 0), (0.56423, 1.79048, 1.16344865, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]

        def Cube "geom_103" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.0095, 0, 0, 0), (0, 0.198479, 0, 0), (0, 0, 1.06138, 0), (-0.000653, -0.185074, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Xform "cabinet2_door_handle" (
            prepend apiSchemas = ["PhysicsMassAPI"]
        )
        {
            point3f physics:centerOfMass = (0.0030978445, 0, 0)
            float3 physics:diagonalInertia = (0.000118450924, 0.000116826224, 0.000002638771)
            float physics:mass = 0
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 2.220446049250313e-16, 0.9999999999999998, 0), (0, -0.9999999999999998, 2.220446049250313e-16, 0), (-0.0218499, -0.25886, -0.105189, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Cube "geom_104" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                float[] primvars:displayOpacity = [1]
                matrix4d xformOp:transform = ( (0.01, 0, 0, 0), (0, 0.0065, 0, 0), (0, 0, 0.0065, 0), (0.0164985, 0, 0.08, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }

            def Cube "geom_105" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                float[] primvars:displayOpacity = [1]
                matrix4d xformOp:transform = ( (0.01, 0, 0, 0), (0, 0.0065, 0, 0), (0, 0, 0.0065, 0), (0.0164985, 0, -0.08, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }

            def Cube "geom_106" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                float[] primvars:displayOpacity = [1]
                matrix4d xformOp:transform = ( (0.0065, 0, 0, 0), (0, 0.0065, 0, 0), (0, 0, 0.086516, 0), (0, 0, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }
        }
    }

    def Xform "cabinet2_drawer1" (
        prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMassAPI"]
    )
    {
        point3f physics:centerOfMass = (-0.0050890497, 0, -0.022978414)
        float3 physics:diagonalInertia = (0.2824591, 0.1857112, 0.10695561)
        float physics:mass = 6.6622405
        bool physics:rigidBodyEnabled = 1
        matrix4d xformOp:transform = ( (-1, 0, 0, 0), (0, -1, 0, 0), (0, 0, 1, 0), (0.28455675, 1.97570462, 1.742852, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]

        def Cube "geom_108" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.0085, 0, 0, 0), (0, 0.180981, 0, 0), (0, 0, 0.050495, 0), (-0.242975, 0, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_109" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.008064, 0, 0, 0), (0, 0.180981, 0, 0), (0, 0, 0.050495, 0), (0.235441, 0, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_110" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.247489, 0, 0, 0), (0, 0.008, 0, 0), (0, 0, 0.050495, 0), (-0.003984, 0.170578, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_111" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.247489, 0, 0, 0), (0, 0.008, 0, 0), (0, 0, 0.050495, 0), (-0.003984, -0.170578, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_112" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.247489, 0, 0, 0), (0, 0.180981, 0, 0), (0, 0, 0.010749, 0), (-0.003984, 0, -0.039746, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }
    }

    def Xform "cabinet2_drawer2" (
        prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMassAPI"]
    )
    {
        point3f physics:centerOfMass = (-0.0015619948, 0, -0.046544746)
        float3 physics:diagonalInertia = (0.35132062, 0.2510061, 0.13944209)
        float physics:mass = 7.648554
        bool physics:rigidBodyEnabled = 1
        matrix4d xformOp:transform = ( (-1, 0, 0, 0), (0, -1, 0, 0), (0, 0, 1, 0), (0.28455675, 1.97839538, 1.585139, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]

        def Cube "geom_113" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.006898, 0, 0, 0), (0, 0.180981, 0, 0), (0, 0, 0.049, 0), (-0.242374, 0, -0.042, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_114" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.006898, 0, 0, 0), (0, 0.180981, 0, 0), (0, 0, 0.010149, 0), (-0.242374, 0, 0.060843, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_115" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.008393, 0, 0, 0), (0, 0.032441, 0, 0), (0, 0, 0.09099, 0), (-0.242869, 0.148428, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_116" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.008393, 0, 0, 0), (0, 0.032441, 0, 0), (0, 0, 0.09099, 0), (-0.242869, -0.148428, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_117" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.008064, 0, 0, 0), (0, 0.180981, 0, 0), (0, 0, 0.090879, 0), (0.235441, 0, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_118" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.247489, 0, 0, 0), (0, 0.008, 0, 0), (0, 0, 0.011649, 0), (-0.003984, 0.170578, 0.075342, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_119" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.247489, 0, 0, 0), (0, 0.008, 0, 0), (0, 0, 0.011649, 0), (-0.003984, -0.170578, 0.075342, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_120" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.247489, 0, 0, 0), (0, 0.008, 0, 0), (0, 0, 0.043553, 0), (-0.003984, 0.170578, -0.043743, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_121" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.247489, 0, 0, 0), (0, 0.008, 0, 0), (0, 0, 0.043553, 0), (-0.003984, -0.170578, -0.043743, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_122" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.247489, 0, 0, 0), (0, 0.180981, 0, 0), (0, 0, 0.010749, 0), (-0.003984, 0, -0.080242, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }
    }

    def Xform "cabinet2_drawer3" (
        prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMassAPI"]
    )
    {
        point3f physics:centerOfMass = (-0.0015619948, 0, -0.046544746)
        float3 physics:diagonalInertia = (0.35132062, 0.2510061, 0.13944209)
        float physics:mass = 7.648554
        bool physics:rigidBodyEnabled = 1
        matrix4d xformOp:transform = ( (-1, 0, 0, 0), (0, -1, 0, 0), (0, 0, 1, 0), (0.28455675, 1.97839538, 1.305287, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]

        def Cube "geom_123" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.006898, 0, 0, 0), (0, 0.180981, 0, 0), (0, 0, 0.049, 0), (-0.242374, 0, -0.042, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_124" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.006898, 0, 0, 0), (0, 0.180981, 0, 0), (0, 0, 0.010149, 0), (-0.242374, 0, 0.060843, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_125" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.008393, 0, 0, 0), (0, 0.032441, 0, 0), (0, 0, 0.09099, 0), (-0.242869, 0.148428, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_126" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.008393, 0, 0, 0), (0, 0.032441, 0, 0), (0, 0, 0.09099, 0), (-0.242869, -0.148428, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_127" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.008064, 0, 0, 0), (0, 0.180981, 0, 0), (0, 0, 0.090879, 0), (0.235441, 0, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_128" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.247489, 0, 0, 0), (0, 0.008, 0, 0), (0, 0, 0.011649, 0), (-0.003984, 0.170578, 0.075342, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_129" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.247489, 0, 0, 0), (0, 0.008, 0, 0), (0, 0, 0.011649, 0), (-0.003984, -0.170578, 0.075342, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_130" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.247489, 0, 0, 0), (0, 0.008, 0, 0), (0, 0, 0.043553, 0), (-0.003984, 0.170578, -0.043743, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_131" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.247489, 0, 0, 0), (0, 0.008, 0, 0), (0, 0, 0.043553, 0), (-0.003984, -0.170578, -0.043743, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_132" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.247489, 0, 0, 0), (0, 0.180981, 0, 0), (0, 0, 0.010749, 0), (-0.003984, 0, -0.080242, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }
    }

    def Xform "cabinet2_drawer4" (
        prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMassAPI"]
    )
    {
        point3f physics:centerOfMass = (-0.0015619948, 0, -0.046544746)
        float3 physics:diagonalInertia = (0.35132062, 0.2510061, 0.13944209)
        float physics:mass = 7.648554
        bool physics:rigidBodyEnabled = 1
        matrix4d xformOp:transform = ( (-1, 0, 0, 0), (0, -1, 0, 0), (0, 0, 1, 0), (0.28455675, 1.97570462, 0.919953, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]

        def Cube "geom_133" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.006898, 0, 0, 0), (0, 0.180981, 0, 0), (0, 0, 0.049, 0), (-0.242374, 0, -0.042, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_134" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.006898, 0, 0, 0), (0, 0.180981, 0, 0), (0, 0, 0.010149, 0), (-0.242374, 0, 0.060843, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_135" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.008393, 0, 0, 0), (0, 0.032441, 0, 0), (0, 0, 0.09099, 0), (-0.242869, 0.148428, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_136" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.008393, 0, 0, 0), (0, 0.032441, 0, 0), (0, 0, 0.09099, 0), (-0.242869, -0.148428, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_137" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.008064, 0, 0, 0), (0, 0.180981, 0, 0), (0, 0, 0.090879, 0), (0.235441, 0, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_138" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.247489, 0, 0, 0), (0, 0.008, 0, 0), (0, 0, 0.011649, 0), (-0.003984, 0.170578, 0.075342, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_139" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.247489, 0, 0, 0), (0, 0.008, 0, 0), (0, 0, 0.011649, 0), (-0.003984, -0.170578, 0.075342, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_140" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.247489, 0, 0, 0), (0, 0.008, 0, 0), (0, 0, 0.043553, 0), (-0.003984, 0.170578, -0.043743, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_141" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.247489, 0, 0, 0), (0, 0.008, 0, 0), (0, 0, 0.043553, 0), (-0.003984, -0.170578, -0.043743, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_142" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.247489, 0, 0, 0), (0, 0.180981, 0, 0), (0, 0, 0.010749, 0), (-0.003984, 0, -0.080242, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }
    }

    def Xform "cabinet2_drawer5" (
        prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMassAPI"]
    )
    {
        point3f physics:centerOfMass = (-0.0015619948, 0, -0.046544746)
        float3 physics:diagonalInertia = (0.35132062, 0.2510061, 0.13944209)
        float physics:mass = 7.648554
        bool physics:rigidBodyEnabled = 1
        matrix4d xformOp:transform = ( (-1, 0, 0, 0), (0, -1, 0, 0), (0, 0, 1, 0), (0.28455675, 1.97570462, 0.644294, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]

        def Cube "geom_143" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.006898, 0, 0, 0), (0, 0.180981, 0, 0), (0, 0, 0.049, 0), (-0.242374, 0, -0.042, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_144" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.006898, 0, 0, 0), (0, 0.180981, 0, 0), (0, 0, 0.010149, 0), (-0.242374, 0, 0.060843, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_145" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.008393, 0, 0, 0), (0, 0.032441, 0, 0), (0, 0, 0.09099, 0), (-0.242869, 0.148428, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_146" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.008393, 0, 0, 0), (0, 0.032441, 0, 0), (0, 0, 0.09099, 0), (-0.242869, -0.148428, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_147" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.008064, 0, 0, 0), (0, 0.180981, 0, 0), (0, 0, 0.090879, 0), (0.235441, 0, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_148" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.247489, 0, 0, 0), (0, 0.008, 0, 0), (0, 0, 0.011649, 0), (-0.003984, 0.170578, 0.075342, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_149" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.247489, 0, 0, 0), (0, 0.008, 0, 0), (0, 0, 0.011649, 0), (-0.003984, -0.170578, 0.075342, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_150" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.247489, 0, 0, 0), (0, 0.008, 0, 0), (0, 0, 0.043553, 0), (-0.003984, 0.170578, -0.043743, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_151" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.247489, 0, 0, 0), (0, 0.008, 0, 0), (0, 0, 0.043553, 0), (-0.003984, -0.170578, -0.043743, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_152" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.247489, 0, 0, 0), (0, 0.180981, 0, 0), (0, 0, 0.010749, 0), (-0.003984, 0, -0.080242, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }
    }

    def Xform "cabinet2_drawer6" (
        prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMassAPI"]
    )
    {
        point3f physics:centerOfMass = (-0.0015619948, 0, -0.046544746)
        float3 physics:diagonalInertia = (0.35132062, 0.2510061, 0.13944209)
        float physics:mass = 7.648554
        bool physics:rigidBodyEnabled = 1
        matrix4d xformOp:transform = ( (-1, 0, 0, 0), (0, -1, 0, 0), (0, 0, 1, 0), (0.28455675, 1.97570462, 0.207198, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]

        def Cube "geom_153" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.006898, 0, 0, 0), (0, 0.180981, 0, 0), (0, 0, 0.049, 0), (-0.242374, 0, -0.042, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_154" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.006898, 0, 0, 0), (0, 0.180981, 0, 0), (0, 0, 0.010149, 0), (-0.242374, 0, 0.060843, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_155" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.008393, 0, 0, 0), (0, 0.032441, 0, 0), (0, 0, 0.09099, 0), (-0.242869, 0.148428, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_156" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.008393, 0, 0, 0), (0, 0.032441, 0, 0), (0, 0, 0.09099, 0), (-0.242869, -0.148428, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_157" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.008064, 0, 0, 0), (0, 0.180981, 0, 0), (0, 0, 0.090879, 0), (0.235441, 0, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_158" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.247489, 0, 0, 0), (0, 0.008, 0, 0), (0, 0, 0.011649, 0), (-0.003984, 0.170578, 0.075342, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_159" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.247489, 0, 0, 0), (0, 0.008, 0, 0), (0, 0, 0.011649, 0), (-0.003984, -0.170578, 0.075342, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_160" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.247489, 0, 0, 0), (0, 0.008, 0, 0), (0, 0, 0.043553, 0), (-0.003984, 0.170578, -0.043743, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_161" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.247489, 0, 0, 0), (0, 0.008, 0, 0), (0, 0, 0.043553, 0), (-0.003984, -0.170578, -0.043743, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_162" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.247489, 0, 0, 0), (0, 0.180981, 0, 0), (0, 0, 0.010749, 0), (-0.003984, 0, -0.080242, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }
    }

    def Xform "fridge_door1" (
        prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMassAPI"]
    )
    {
        point3f physics:centerOfMass = (0.020935092, -0.29642624, 0.07202574)
        float3 physics:diagonalInertia = (4.2479267, 3.4663935, 0.7953591)
        float physics:mass = 28.48304
        bool physics:rigidBodyEnabled = 1
        matrix4d xformOp:transform = ( (-1, 0, 0, 0), (0, -1, 0, 0), (0, 0, 1, 0), (0.572244, 2.1807550000000004, 1.4196199999999999, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]

        def Cube "geom_174" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.009277, 0, 0, 0), (0, 0.298246, 0, 0), (0, 0, 0.668339, 0), (0.006948, -0.297325, 0.139709, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_175" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.0125, 0, 0, 0), (0, 0.276867, 0, 0), (0, 0, 0.494447, 0), (0.03605, -0.295455, -0.001115, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Xform "fridge_door1_handle" (
            prepend apiSchemas = ["PhysicsMassAPI"]
        )
        {
            point3f physics:centerOfMass = (0.0030978445, 0, 0)
            float3 physics:diagonalInertia = (0.000118450924, 0.000116826224, 0.000002638771)
            float physics:mass = 0
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 2.220446049250313e-16, 0.9999999999999998, 0), (0, -0.9999999999999998, 2.220446049250313e-16, 0), (-0.027991, -0.465343, -0.3616, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Cube "geom_176" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                float[] primvars:displayOpacity = [1]
                matrix4d xformOp:transform = ( (0.01, 0, 0, 0), (0, 0.0065, 0, 0), (0, 0, 0.0065, 0), (0.0164985, 0, 0.08, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }

            def Cube "geom_177" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                float[] primvars:displayOpacity = [1]
                matrix4d xformOp:transform = ( (0.01, 0, 0, 0), (0, 0.0065, 0, 0), (0, 0, 0.0065, 0), (0.0164985, 0, -0.08, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }

            def Cube "geom_178" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                float[] primvars:displayOpacity = [1]
                matrix4d xformOp:transform = ( (0.0065, 0, 0, 0), (0, 0.0065, 0, 0), (0, 0, 0.086516, 0), (0, 0, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }
        }

        def Xform "fridge_door_tray1" (
            prepend apiSchemas = ["PhysicsMassAPI"]
        )
        {
            point3f physics:centerOfMass = (0, 0, -0.014739217)
            float3 physics:diagonalInertia = (0.0062140855, 0.0059009767, 0.0009047668)
            float physics:mass = 0
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0.103791, -0.297261, -0.0156525, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Cube "geom_179" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                float[] primvars:displayOpacity = [1]
                matrix4d xformOp:transform = ( (0.001, 0, 0, 0), (0, 0.210927, 0, 0), (0, 0, 0.047787, 0), (0.054273, 0, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }

            def Cube "geom_180" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                float[] primvars:displayOpacity = [1]
                matrix4d xformOp:transform = ( (0.001, 0, 0, 0), (0, 0.210927, 0, 0), (0, 0, 0.047787, 0), (-0.054273, 0, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }

            def Cube "geom_181" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                float[] primvars:displayOpacity = [1]
                matrix4d xformOp:transform = ( (0.05471, 0, 0, 0), (0, 0.001, 0, 0), (0, 0, 0.047787, 0), (0, 0.209978, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }

            def Cube "geom_182" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                float[] primvars:displayOpacity = [1]
                matrix4d xformOp:transform = ( (0.05471, 0, 0, 0), (0, 0.001, 0, 0), (0, 0, 0.047787, 0), (0, -0.209978, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }

            def Cube "geom_183" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                float[] primvars:displayOpacity = [1]
                matrix4d xformOp:transform = ( (0.05471, 0, 0, 0), (0, 0.210927, 0, 0), (0, 0, 0.001, 0), (0, 0, -0.047166, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }
        }

        def Xform "fridge_door_tray2" (
            prepend apiSchemas = ["PhysicsMassAPI"]
        )
        {
            point3f physics:centerOfMass = (0, 0, -0.011598332)
            float3 physics:diagonalInertia = (0.004150598, 0.003830189, 0.00044448595)
            float physics:mass = 0
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0.101769, -0.298471, 0.223872, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Cube "geom_184" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                float[] primvars:displayOpacity = [1]
                matrix4d xformOp:transform = ( (0.001, 0, 0, 0), (0, 0.210977, 0, 0), (0, 0, 0.026901, 0), (0.054019, 0, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }

            def Cube "geom_185" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                float[] primvars:displayOpacity = [1]
                matrix4d xformOp:transform = ( (0.001, 0, 0, 0), (0, 0.210977, 0, 0), (0, 0, 0.026901, 0), (-0.054019, 0, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }

            def Cube "geom_186" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                float[] primvars:displayOpacity = [1]
                matrix4d xformOp:transform = ( (0.054994, 0, 0, 0), (0, 0.001, 0, 0), (0, 0, 0.026901, 0), (0, 0.209978, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }

            def Cube "geom_187" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                float[] primvars:displayOpacity = [1]
                matrix4d xformOp:transform = ( (0.054994, 0, 0, 0), (0, 0.001, 0, 0), (0, 0, 0.026901, 0), (0, -0.209978, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }

            def Cube "geom_188" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                float[] primvars:displayOpacity = [1]
                matrix4d xformOp:transform = ( (0.054994, 0, 0, 0), (0, 0.210977, 0, 0), (0, 0, 0.001, 0), (0, 0, -0.025903, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }

            def Xform "fridge_egg_tray"
            {
                matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (-0.00226576, 0.0853089, 0.00069855, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }
        }
    }

    def Xform "fridge_door2" (
        prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMassAPI"]
    )
    {
        point3f physics:centerOfMass = (0.021429172, -0.2963945, -0.0045853895)
        float3 physics:diagonalInertia = (1.2137349, 0.7399972, 0.48236674)
        float physics:mass = 17.313404
        bool physics:rigidBodyEnabled = 1
        matrix4d xformOp:transform = ( (-1, 0, 0, 0), (0, -1, 0, 0), (0, 0, 1, 0), (0.572244, 2.18081, 0.5248719999999999, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]

        def Cube "geom_189" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.009277, 0, 0, 0), (0, 0.298246, 0, 0), (0, 0, 0.39297, 0), (0.006948, -0.297325, -0.028308, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_190" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.0125, 0, 0, 0), (0, 0.276867, 0, 0), (0, 0, 0.311166, 0), (0.03605, -0.295455, 0.019366, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Xform "fridge_door2_handle" (
            prepend apiSchemas = ["PhysicsMassAPI"]
        )
        {
            point3f physics:centerOfMass = (0.0030978445, 0, 0)
            float3 physics:diagonalInertia = (0.000118450924, 0.000116826224, 0.000002638771)
            float physics:mass = 0
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 2.220446049250313e-16, 0.9999999999999998, 0), (0, -0.9999999999999998, 2.220446049250313e-16, 0), (0.0280466, -0.465383, 0.317868, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Cube "geom_191" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                float[] primvars:displayOpacity = [1]
                matrix4d xformOp:transform = ( (0.01, 0, 0, 0), (0, 0.0065, 0, 0), (0, 0, 0.0065, 0), (0.0164985, 0, 0.08, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }

            def Cube "geom_192" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                float[] primvars:displayOpacity = [1]
                matrix4d xformOp:transform = ( (0.01, 0, 0, 0), (0, 0.0065, 0, 0), (0, 0, 0.0065, 0), (0.0164985, 0, -0.08, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }

            def Cube "geom_193" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                float[] primvars:displayOpacity = [1]
                matrix4d xformOp:transform = ( (0.0065, 0, 0, 0), (0, 0.0065, 0, 0), (0, 0, 0.086516, 0), (0, 0, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }
        }
    }

    def Xform "fridge_drawer1" (
        prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMassAPI"]
    )
    {
        point3f physics:centerOfMass = (0.0068898783, 0, -0.011209241)
        float3 physics:diagonalInertia = (0.16029479, 0.12929626, 0.04823735)
        float physics:mass = 3.142092
        bool physics:rigidBodyEnabled = 1
        matrix4d xformOp:transform = ( (-1, 0, 0, 0), (0, -1, 0, 0), (0, 0, 1, 0), (0.306256, 2.48058901, 1.1914432, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]

        def Cube "geom_207" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.0025, 0, 0, 0), (0, 0.227117, 0, 0), (0, 0, 0.011921, 0), (-0.169309, 0, 0.070506, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_208" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.001448, 0, 0, 0), (0, 0.227117, 0, 0), (0, 0, 0.047864, 0), (-0.169309, 0, -0.034598, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_209" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.002123, 0, 0, 0), (0, 0.227117, 0, 0), (0, 0, 0.082076, 0), (0.16468, 0, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_210" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.171761, 0, 0, 0), (0, 0.00983, 0, 0), (0, 0, 0.082076, 0), (0, 0.217307, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_211" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.171761, 0, 0, 0), (0, 0.00983, 0, 0), (0, 0, 0.082076, 0), (0, -0.217307, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_212" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.171761, 0, 0, 0), (0, 0.227117, 0, 0), (0, 0, 0.001372, 0), (0, 0, -0.080999, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }
    }

    def Xform "fridge_drawer2" (
        prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMassAPI"]
    )
    {
        point3f physics:centerOfMass = (0.007575962, 0, -0.010531914)
        float3 physics:diagonalInertia = (0.13585941, 0.107581794, 0.038809072)
        float physics:mass = 2.6945992
        bool physics:rigidBodyEnabled = 1
        matrix4d xformOp:transform = ( (-1, 0, 0, 0), (0, -1, 0, 0), (0, 0, 1, 0), (0.30964929999999996, 2.4848130700000004, 1.0315736999999998, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]

        def Cube "geom_213" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.0025, 0, 0, 0), (0, 0.227117, 0, 0), (0, 0, 0.011801, 0), (-0.169309, 0, 0.057007, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_214" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.001448, 0, 0, 0), (0, 0.227117, 0, 0), (0, 0, 0.032111, 0), (-0.169309, 0, -0.036775, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_215" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.002123, 0, 0, 0), (0, 0.227117, 0, 0), (0, 0, 0.068941, 0), (0.16468, 0, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_216" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.171761, 0, 0, 0), (0, 0.00983, 0, 0), (0, 0, 0.068941, 0), (0, 0.217307, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_217" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.171761, 0, 0, 0), (0, 0.00983, 0, 0), (0, 0, 0.068941, 0), (0, -0.217307, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_218" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.171761, 0, 0, 0), (0, 0.227117, 0, 0), (0, 0, 0.001372, 0), (0, 0, -0.066161, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }
    }

    def Xform "fridge_drawer3" (
        prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMassAPI"]
    )
    {
        point3f physics:centerOfMass = (0.0034357386, 0, -0.0102474885)
        float3 physics:diagonalInertia = (0.105790734, 0.08745922, 0.035538755)
        float physics:mass = 2.4148602
        bool physics:rigidBodyEnabled = 1
        matrix4d xformOp:transform = ( (-1, 0, 0, 0), (0, -1, 0, 0), (0, 0, 1, 0), (0.32682289999999997, 2.4803059700000003, 0.7250101999999998, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]

        def Cube "geom_219" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.001, 0, 0, 0), (0, 0.204478, 0, 0), (0, 0, 0.012462, 0), (-0.165482, 0, 0.083453, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_220" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.001, 0, 0, 0), (0, 0.204478, 0, 0), (0, 0, 0.05887, 0), (-0.165482, 0, -0.037113, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_221" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.001555, 0, 0, 0), (0, 0.204478, 0, 0), (0, 0, 0.095915, 0), (0.154928, 0, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_222" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.161445, 0, 0, 0), (0, 0.00732, 0, 0), (0, 0, 0.095915, 0), (-0.004962, 0.197083, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_223" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.161445, 0, 0, 0), (0, 0.00732, 0, 0), (0, 0, 0.095915, 0), (-0.004962, -0.197083, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_224" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.161445, 0, 0, 0), (0, 0.204478, 0, 0), (0, 0, 0.000911, 0), (-0.004962, 0, -0.095072, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }
    }

    def Xform "fridge_drawer4" (
        prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMassAPI"]
    )
    {
        point3f physics:centerOfMass = (0.0024329952, 0, -0.010229487)
        float3 physics:diagonalInertia = (0.09185484, 0.07392936, 0.027638033)
        float physics:mass = 2.0992687
        bool physics:rigidBodyEnabled = 1
        matrix4d xformOp:transform = ( (-1, 0, 0, 0), (0, -1, 0, 0), (0, 0, 1, 0), (0.3230181, 2.4777432800000003, 0.5481881999999999, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]

        def Cube "geom_225" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.001, 0, 0, 0), (0, 0.204478, 0, 0), (0, 0, 0.012462, 0), (-0.165482, 0, 0.063456, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_226" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.001, 0, 0, 0), (0, 0.204478, 0, 0), (0, 0, 0.04, 0), (-0.165482, 0, -0.035978, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_227" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.001, 0, 0, 0), (0, 0.204478, 0, 0), (0, 0, 0.075917, 0), (0.155483, 0, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_228" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.166408, 0, 0, 0), (0, 0.008, 0, 0), (0, 0, 0.075917, 0), (0, 0.196311, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_229" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.166408, 0, 0, 0), (0, 0.008, 0, 0), (0, 0, 0.075917, 0), (0, -0.196311, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_230" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.166408, 0, 0, 0), (0, 0.204478, 0, 0), (0, 0, 0.001, 0), (0, 0, -0.074992, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }
    }

    def Xform "fridge_drawer5" (
        prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMassAPI"]
    )
    {
        point3f physics:centerOfMass = (0.016699292, 0, -0.011124831)
        float3 physics:diagonalInertia = (0.06421872, 0.056843203, 0.016664702)
        float physics:mass = 1.79857
        bool physics:rigidBodyEnabled = 1
        matrix4d xformOp:transform = ( (-1, 0, 0, 0), (0, -1, 0, 0), (0, 0, 1, 0), (0.3589736, 2.4828249600000003, 0.3683991999999999, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]

        def Cube "geom_231" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.001, 0, 0, 0), (0, 0.204404, 0, 0), (0, 0, 0.012499, 0), (-0.120488, 0, 0.08099, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_232" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.001, 0, 0, 0), (0, 0.204404, 0, 0), (0, 0, 0.055353, 0), (-0.118669, 0, -0.03813, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_233" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.003217, 0, 0, 0), (0, 0.204404, 0, 0), (0, 0, 0.075917, 0), (0.108269, 0, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_234" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.120421, 0, 0, 0), (0, 0.007461, 0, 0), (0, 0, 0.075917, 0), (0, 0.196942, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_235" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.120421, 0, 0, 0), (0, 0.007461, 0, 0), (0, 0, 0.075917, 0), (0, -0.196942, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_236" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.120421, 0, 0, 0), (0, 0.204404, 0, 0), (0, 0, 0.001, 0), (0, 0, -0.09249, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }
    }

    def Xform "cabinet5_drawer1" (
        prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMassAPI"]
    )
    {
        point3f physics:centerOfMass = (-0.005516589, 0, -0.028824784)
        float3 physics:diagonalInertia = (0.49581128, 0.26221275, 0.24609382)
        float physics:mass = 7.5245004
        bool physics:rigidBodyEnabled = 1
        matrix4d xformOp:transform = ( (-1, 0, 0, 0), (0, -1, 0, 0), (0, 0, 1, 0), (0.327393, 3.08512026, 0.825985, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]

        def Cube "geom_256" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.245507, 0, 0, 0), (0, 0.008, 0, 0), (0, 0, 0.042633, 0), (0.021031, 0.270267, -0.01336, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_257" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.245507, 0, 0, 0), (0, 0.008, 0, 0), (0, 0, 0.042633, 0), (0.021031, -0.270267, -0.01336, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_258" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.0095, 0, 0, 0), (0, 0.298468, 0, 0), (0, 0, 0.064993, 0), (-0.233977, 0, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_259" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.008, 0, 0, 0), (0, 0.269804, 0, 0), (0, 0, 0.042633, 0), (0.260372, 0, -0.01336, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_260" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.245507, 0, 0, 0), (0, 0.269804, 0, 0), (0, 0, 0.0075, 0), (0.021031, 0, -0.047595, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Xform "cabinet5_drawer1_handle" (
            prepend apiSchemas = ["PhysicsMassAPI"]
        )
        {
            point3f physics:centerOfMass = (0.0030978445, 0, 0)
            float3 physics:diagonalInertia = (0.000118450924, 0.000116826224, 0.000002638771)
            float physics:mass = 0
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 2.220446049250313e-16, 0.9999999999999998, 0), (0, -0.9999999999999998, 2.220446049250313e-16, 0), (-0.269809, 0.00142363, 0.0167695, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Cube "geom_261" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                float[] primvars:displayOpacity = [1]
                matrix4d xformOp:transform = ( (0.01, 0, 0, 0), (0, 0.0065, 0, 0), (0, 0, 0.0065, 0), (0.0164985, 0, 0.08, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }

            def Cube "geom_262" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                float[] primvars:displayOpacity = [1]
                matrix4d xformOp:transform = ( (0.01, 0, 0, 0), (0, 0.0065, 0, 0), (0, 0, 0.0065, 0), (0.0164985, 0, -0.08, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }

            def Cube "geom_263" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                float[] primvars:displayOpacity = [1]
                matrix4d xformOp:transform = ( (0.0065, 0, 0, 0), (0, 0.0065, 0, 0), (0, 0, 0.086516, 0), (0, 0, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }
        }
    }

    def Xform "cabinet5_drawer2" (
        prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMassAPI"]
    )
    {
        point3f physics:centerOfMass = (-0.018631164, 0, -0.060455143)
        float3 physics:diagonalInertia = (0.7337725, 0.42946243, 0.39441088)
        float physics:mass = 10.356275
        bool physics:rigidBodyEnabled = 1
        matrix4d xformOp:transform = ( (-1, 0, 0, 0), (0, -1, 0, 0), (0, 0, 1, 0), (0.32780360000000003, 3.08491152, 0.627932, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]

        def Cube "geom_264" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.245507, 0, 0, 0), (0, 0.008, 0, 0), (0, 0, 0.011649, 0), (0.021031, 0.270267, 0.041246, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_265" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.245507, 0, 0, 0), (0, 0.008, 0, 0), (0, 0, 0.011649, 0), (0.021031, -0.270267, 0.041246, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_266" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.245507, 0, 0, 0), (0, 0.008, 0, 0), (0, 0, 0.041748, 0), (0.021031, 0.270267, -0.078968, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_267" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.245507, 0, 0, 0), (0, 0.008, 0, 0), (0, 0, 0.041748, 0), (0.021031, -0.270267, -0.078968, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_268" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.0095, 0, 0, 0), (0, 0.298468, 0, 0), (0, 0, 0.131375, 0), (-0.233977, 0, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_269" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.008, 0, 0, 0), (0, 0.269804, 0, 0), (0, 0, 0.084491, 0), (0.260372, 0, -0.037996, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_270" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.245507, 0, 0, 0), (0, 0.269804, 0, 0), (0, 0, 0.008, 0), (0.021031, 0, -0.113735, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Xform "cabinet5_drawer2_handle" (
            prepend apiSchemas = ["PhysicsMassAPI"]
        )
        {
            point3f physics:centerOfMass = (0.0030978445, 0, 0)
            float3 physics:diagonalInertia = (0.000118450924, 0.000116826224, 0.000002638771)
            float physics:mass = 0
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 2.220446049250313e-16, 0.9999999999999998, 0), (0, -0.9999999999999998, 2.220446049250313e-16, 0), (-0.270711, 0.00106413, 0.0850084, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Cube "geom_271" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                float[] primvars:displayOpacity = [1]
                matrix4d xformOp:transform = ( (0.01, 0, 0, 0), (0, 0.0065, 0, 0), (0, 0, 0.0065, 0), (0.0164985, 0, 0.08, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }

            def Cube "geom_272" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                float[] primvars:displayOpacity = [1]
                matrix4d xformOp:transform = ( (0.01, 0, 0, 0), (0, 0.0065, 0, 0), (0, 0, 0.0065, 0), (0.0164985, 0, -0.08, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }

            def Cube "geom_273" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                float[] primvars:displayOpacity = [1]
                matrix4d xformOp:transform = ( (0.0065, 0, 0, 0), (0, 0.0065, 0, 0), (0, 0, 0.086516, 0), (0, 0, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }
        }
    }

    def Xform "cabinet5_drawer3" (
        prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMassAPI"]
    )
    {
        point3f physics:centerOfMass = (-0.046187673, 0, -0.08432029)
        float3 physics:diagonalInertia = (0.86253, 0.5673577, 0.4925794)
        float physics:mass = 11.856377
        bool physics:rigidBodyEnabled = 1
        matrix4d xformOp:transform = ( (-1, 0, 0, 0), (0, -1, 0, 0), (0, 0, 1, 0), (0.32821690000000003, 3.08487551, 0.29854, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]

        def Cube "geom_274" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.245507, 0, 0, 0), (0, 0.008, 0, 0), (0, 0, 0.011638, 0), (0.021031, 0.270267, -0.00926, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_275" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.245507, 0, 0, 0), (0, 0.008, 0, 0), (0, 0, 0.011638, 0), (0.021031, -0.270267, -0.00926, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_276" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.245507, 0, 0, 0), (0, 0.008, 0, 0), (0, 0, 0.041711, 0), (0.021031, 0.270267, -0.129424, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_277" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.245507, 0, 0, 0), (0, 0.008, 0, 0), (0, 0, 0.041711, 0), (0.021031, -0.270267, -0.129424, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_278" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.0095, 0, 0, 0), (0, 0.298468, 0, 0), (0, 0, 0.197867, 0), (-0.233977, 0, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_279" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.008, 0, 0, 0), (0, 0.269804, 0, 0), (0, 0, 0.084105, 0), (0.260372, 0, -0.088821, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_280" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.245507, 0, 0, 0), (0, 0.269804, 0, 0), (0, 0, 0.008, 0), (0.021031, 0, -0.164582, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Xform "cabinet5_drawer3_handle" (
            prepend apiSchemas = ["PhysicsMassAPI"]
        )
        {
            point3f physics:centerOfMass = (0.0030978445, 0, 0)
            float3 physics:diagonalInertia = (0.000118450924, 0.000116826224, 0.000002638771)
            float physics:mass = 0
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 2.220446049250313e-16, 0.9999999999999998, 0), (0, -0.9999999999999998, 2.220446049250313e-16, 0), (-0.268882, 0.00102875, 0.15027, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Cube "geom_281" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                float[] primvars:displayOpacity = [1]
                matrix4d xformOp:transform = ( (0.01, 0, 0, 0), (0, 0.0065, 0, 0), (0, 0, 0.0065, 0), (0.0164985, 0, 0.08, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }

            def Cube "geom_282" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                float[] primvars:displayOpacity = [1]
                matrix4d xformOp:transform = ( (0.01, 0, 0, 0), (0, 0.0065, 0, 0), (0, 0, 0.0065, 0), (0.0164985, 0, -0.08, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }

            def Cube "geom_283" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                float[] primvars:displayOpacity = [1]
                matrix4d xformOp:transform = ( (0.0065, 0, 0, 0), (0, 0.0065, 0, 0), (0, 0, 0.086516, 0), (0, 0, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }
        }
    }

    def Xform "cabinet6_drawer1" (
        prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMassAPI"]
    )
    {
        point3f physics:centerOfMass = (-0.0035305356, 0, -0.027514048)
        float3 physics:diagonalInertia = (0.2538217, 0.17313506, 0.08977516)
        float physics:mass = 5.444076
        bool physics:rigidBodyEnabled = 1
        matrix4d xformOp:transform = ( (-1, 0, 0, 0), (0, -1, 0, 0), (0, 0, 1, 0), (0.328062, 3.58416649, 0.825985, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]

        def Cube "geom_289" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.245507, 0, 0, 0), (0, 0.008, 0, 0), (0, 0, 0.042633, 0), (0.021031, 0.170562, -0.01336, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_290" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.245507, 0, 0, 0), (0, 0.008, 0, 0), (0, 0, 0.042633, 0), (0.021031, -0.170562, -0.01336, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_291" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.0095, 0, 0, 0), (0, 0.198867, 0, 0), (0, 0, 0.064993, 0), (-0.233977, 0, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_292" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.008, 0, 0, 0), (0, 0.178822, 0, 0), (0, 0, 0.042633, 0), (0.260372, 0, -0.01336, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_293" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.245507, 0, 0, 0), (0, 0.178822, 0, 0), (0, 0, 0.0075, 0), (0.021031, 0, -0.047595, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Xform "cabinet6_drawer1_handle" (
            prepend apiSchemas = ["PhysicsMassAPI"]
        )
        {
            point3f physics:centerOfMass = (0.0030978445, 0, 0)
            float3 physics:diagonalInertia = (0.000118450924, 0.000116826224, 0.000002638771)
            float physics:mass = 0
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 2.220446049250313e-16, 0.9999999999999998, 0), (0, -0.9999999999999998, 2.220446049250313e-16, 0), (-0.266623, -0.00124599, 0.0172039, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Cube "geom_294" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                float[] primvars:displayOpacity = [1]
                matrix4d xformOp:transform = ( (0.01, 0, 0, 0), (0, 0.0065, 0, 0), (0, 0, 0.0065, 0), (0.0164985, 0, 0.08, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }

            def Cube "geom_295" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                float[] primvars:displayOpacity = [1]
                matrix4d xformOp:transform = ( (0.01, 0, 0, 0), (0, 0.0065, 0, 0), (0, 0, 0.0065, 0), (0.0164985, 0, -0.08, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }

            def Cube "geom_296" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                float[] primvars:displayOpacity = [1]
                matrix4d xformOp:transform = ( (0.0065, 0, 0, 0), (0, 0.0065, 0, 0), (0, 0, 0.086516, 0), (0, 0, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }
        }
    }

    def Xform "cabinet6_drawer2" (
        prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMassAPI"]
    )
    {
        point3f physics:centerOfMass = (-0.01591734, 0, -0.059783634)
        float3 physics:diagonalInertia = (0.38261616, 0.29911613, 0.14706522)
        float physics:mass = 7.4402804
        bool physics:rigidBodyEnabled = 1
        matrix4d xformOp:transform = ( (-1, 0, 0, 0), (0, -1, 0, 0), (0, 0, 1, 0), (0.32782290000000003, 3.5845839699999997, 0.627176, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]

        def Cube "geom_297" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.245507, 0, 0, 0), (0, 0.008, 0, 0), (0, 0, 0.011649, 0), (0.021031, 0.170562, 0.041246, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_298" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.245507, 0, 0, 0), (0, 0.008, 0, 0), (0, 0, 0.011649, 0), (0.021031, -0.170562, 0.041246, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_299" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.245507, 0, 0, 0), (0, 0.008, 0, 0), (0, 0, 0.041748, 0), (0.021031, 0.170562, -0.078968, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_300" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.245507, 0, 0, 0), (0, 0.008, 0, 0), (0, 0, 0.041748, 0), (0.021031, -0.170562, -0.078968, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_301" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.0095, 0, 0, 0), (0, 0.198867, 0, 0), (0, 0, 0.131375, 0), (-0.233977, 0, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_302" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.008, 0, 0, 0), (0, 0.178822, 0, 0), (0, 0, 0.084491, 0), (0.260372, 0, -0.037996, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_303" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.245507, 0, 0, 0), (0, 0.178822, 0, 0), (0, 0, 0.008, 0), (0.021031, 0, -0.113735, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Xform "cabinet6_drawer2_handle" (
            prepend apiSchemas = ["PhysicsMassAPI"]
        )
        {
            point3f physics:centerOfMass = (0.0030978445, 0, 0)
            float3 physics:diagonalInertia = (0.000118450924, 0.000116826224, 0.000002638771)
            float physics:mass = 0
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 2.220446049250313e-16, 0.9999999999999998, 0), (0, -0.9999999999999998, 2.220446049250313e-16, 0), (-0.266862, -0.00397854, 0.0854179, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Cube "geom_304" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                float[] primvars:displayOpacity = [1]
                matrix4d xformOp:transform = ( (0.01, 0, 0, 0), (0, 0.0065, 0, 0), (0, 0, 0.0065, 0), (0.0164985, 0, 0.08, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }

            def Cube "geom_305" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                float[] primvars:displayOpacity = [1]
                matrix4d xformOp:transform = ( (0.01, 0, 0, 0), (0, 0.0065, 0, 0), (0, 0, 0.0065, 0), (0.0164985, 0, -0.08, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }

            def Cube "geom_306" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                float[] primvars:displayOpacity = [1]
                matrix4d xformOp:transform = ( (0.0065, 0, 0, 0), (0, 0.0065, 0, 0), (0, 0, 0.086516, 0), (0, 0, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }
        }
    }

    def Xform "cabinet6_drawer3" (
        prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMassAPI"]
    )
    {
        point3f physics:centerOfMass = (-0.042035118, 0, -0.08542842)
        float3 physics:diagonalInertia = (0.45296973, 0.3925219, 0.19643138)
        float physics:mass = 8.439307
        bool physics:rigidBodyEnabled = 1
        matrix4d xformOp:transform = ( (-1, 0, 0, 0), (0, -1, 0, 0), (0, 0, 1, 0), (0.3275636, 3.58453453, 0.297298, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]

        def Cube "geom_307" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.245507, 0, 0, 0), (0, 0.008, 0, 0), (0, 0, 0.011638, 0), (0.021031, 0.170562, -0.00926, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_308" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.245507, 0, 0, 0), (0, 0.008, 0, 0), (0, 0, 0.011638, 0), (0.021031, -0.170562, -0.00926, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_309" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.245507, 0, 0, 0), (0, 0.008, 0, 0), (0, 0, 0.041711, 0), (0.021031, 0.170562, -0.129424, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_310" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.245507, 0, 0, 0), (0, 0.008, 0, 0), (0, 0, 0.041711, 0), (0.021031, -0.170562, -0.129424, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_311" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.0095, 0, 0, 0), (0, 0.198867, 0, 0), (0, 0, 0.197867, 0), (-0.233977, 0, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_312" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.008, 0, 0, 0), (0, 0.178822, 0, 0), (0, 0, 0.084105, 0), (0.260372, 0, -0.088821, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_313" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.245507, 0, 0, 0), (0, 0.178822, 0, 0), (0, 0, 0.008, 0), (0.021031, 0, -0.164582, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Xform "cabinet6_drawer3_handle" (
            prepend apiSchemas = ["PhysicsMassAPI"]
        )
        {
            point3f physics:centerOfMass = (0.0030978445, 0, 0)
            float3 physics:diagonalInertia = (0.000118450924, 0.000116826224, 0.000002638771)
            float physics:mass = 0
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 2.220446049250313e-16, 0.9999999999999998, 0), (0, -0.9999999999999998, 2.220446049250313e-16, 0), (-0.267122, -0.00402777, 0.151166, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Cube "geom_314" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                float[] primvars:displayOpacity = [1]
                matrix4d xformOp:transform = ( (0.01, 0, 0, 0), (0, 0.0065, 0, 0), (0, 0, 0.0065, 0), (0.0164985, 0, 0.08, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }

            def Cube "geom_315" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                float[] primvars:displayOpacity = [1]
                matrix4d xformOp:transform = ( (0.01, 0, 0, 0), (0, 0.0065, 0, 0), (0, 0, 0.0065, 0), (0.0164985, 0, -0.08, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }

            def Cube "geom_316" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                float[] primvars:displayOpacity = [1]
                matrix4d xformOp:transform = ( (0.0065, 0, 0, 0), (0, 0.0065, 0, 0), (0, 0, 0.086516, 0), (0, 0, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }
        }
    }

    def Xform "counter_sink_tap_switch" (
        prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMassAPI"]
    )
    {
        point3f physics:centerOfMass = (0, 0, 0)
        float3 physics:diagonalInertia = (0.000001, 0.000001, 0.000001)
        float physics:mass = 0.000001
        bool physics:rigidBodyEnabled = 1
        matrix4d xformOp:transform = ( (-1, 0, 0, 0), (0, -1, 0, 0), (0, 0, 1, 0), (2.7543469000000003, 3.3144028, 1.0133155, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]

        def Cube "geom_336" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.0005, 0, 0, 0), (0, 0.0005, 0, 0), (0, 0, 0.0005, 0), (0, 0, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def PhysicsRevoluteJoint "counter_sink_switch_joint"
        {
            uniform token physics:axis = "Z"
            rel physics:body0 = </world/counter_sink_tap_switch>
            rel physics:body1 = </world/counter_sink_tap>
            bool physics:collisionEnabled = 0
            point3f physics:localPos0 = (0, 0, 0)
            point3f physics:localPos1 = (0, 0, 0)
            quatf physics:localRot0 = (0.7071068, 0, -0.7071068, 0)
            quatf physics:localRot1 = (0.7071068, 0, -0.7071068, 0)
            float physics:lowerLimit = 0
            float physics:upperLimit = 22.499996
        }
    }

    def Xform "counter_sink_tap" (
        prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMassAPI"]
    )
    {
        point3f physics:centerOfMass = (0, 0.008052248, 0.005014871)
        float3 physics:diagonalInertia = (0.000020433023, 0.0000175283, 0.0000068525537)
        float physics:mass = 0.042960588
        bool physics:rigidBodyEnabled = 1
        matrix4d xformOp:transform = ( (-1, 0, 0, 0), (0, -1, 0, 0), (0, 0, 1, 0), (2.7543469000000003, 3.3144028, 1.0133155, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]

        def Cylinder "geom_337" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            float3[] extent = [(-0.022432, -0.022432, -0.012197), (0.022432, 0.022432, 0.012197)]
            double height = 0.024394
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            double radius = 0.022432
            matrix4d xformOp:transform = ( (0, 0, -1, 0), (-1, 0, 0, 0), (0, 1, 0, 0), (0, 0.007501, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cylinder "geom_338" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            float3[] extent = [(-0.005, -0.005, -0.027997), (0.005, 0.005, 0.027997)]
            double height = 0.055994
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            double radius = 0.005
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0.012886, 0.048989, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }
    }

    def Xform "dishwasher_front" (
        prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMassAPI"]
    )
    {
        point3f physics:centerOfMass = (-0.02315755, -0.33193436, -0.0088299345)
        float3 physics:diagonalInertia = (1.5394965, 0.9375141, 0.6135113)
        float physics:mass = 20.86699
        bool physics:rigidBodyEnabled = 1
        matrix4d xformOp:transform = ( (1, 0, -0, 0), (-0, -2.220446049250313e-16, -1.0000000000000002, 0), (0, 1.0000000000000002, -2.220446049250313e-16, 0), (2.3480688, 3.96386149, 0.16955045, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]

        def Cube "geom_346" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.009444, 0, 0, 0), (0, 0.397179, 0, 0), (0, 0, 0.304987, 0), (-0.04, -0.329015, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_347" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.015, 0, 0, 0), (0, 0.339603, 0, 0), (0, 0, 0.287469, 0), (-0.01, -0.334215, -0.015728, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Xform "dishwasher_front_handle" (
            prepend apiSchemas = ["PhysicsMassAPI"]
        )
        {
            point3f physics:centerOfMass = (0.0030978445, 0, 0)
            float3 physics:diagonalInertia = (0.000118450924, 0.000116826224, 0.000002638771)
            float physics:mass = 0
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (-0.0749352, -0.678848, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Cube "geom_348" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                float[] primvars:displayOpacity = [1]
                matrix4d xformOp:transform = ( (0.01, 0, 0, 0), (0, 0.0065, 0, 0), (0, 0, 0.0065, 0), (0.0164985, 0, 0.08, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }

            def Cube "geom_349" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                float[] primvars:displayOpacity = [1]
                matrix4d xformOp:transform = ( (0.01, 0, 0, 0), (0, 0.0065, 0, 0), (0, 0, 0.0065, 0), (0.0164985, 0, -0.08, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }

            def Cube "geom_350" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                float[] primvars:displayOpacity = [1]
                matrix4d xformOp:transform = ( (0.0065, 0, 0, 0), (0, 0.0065, 0, 0), (0, 0, 0.086516, 0), (0, 0, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }
        }
    }

    def Xform "dishwasher_tray1" (
        prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMassAPI"]
    )
    {
        point3f physics:centerOfMass = (-0.039918017, 0, -0.08405755)
        float3 physics:diagonalInertia = (0.54334205, 0.34717, 0.2871763)
        float physics:mass = 8.319219
        bool physics:rigidBodyEnabled = 1
        matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (2.6182040000000004, 3.97090926, 0.38939999999999997, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]

        def Cube "geom_351" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.242135, 0, 0, 0), (0, 0.269203, 0, 0), (0, 0, 0.007112, 0), (-0.03859, 0, -0.144673, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_352" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.242135, 0, 0, 0), (0, 0.005448, 0, 0), (0, 0, 0.116486, 0), (-0.03859, 0.255159, -0.035299, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_353" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.242135, 0, 0, 0), (0, 0.005448, 0, 0), (0, 0, 0.116486, 0), (-0.03859, -0.255159, -0.035299, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_354" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.004289, 0, 0, 0), (0, 0.269203, 0, 0), (0, 0, 0.116486, 0), (0.193489, 0, -0.035299, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_355" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.004289, 0, 0, 0), (0, 0.269203, 0, 0), (0, 0, 0.116486, 0), (-0.280937, 0, -0.035299, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }
    }

    def Xform "dishwasher_tray2" (
        prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMassAPI"]
    )
    {
        point3f physics:centerOfMass = (0, 0, -0.020925377)
        float3 physics:diagonalInertia = (0.5338731, 0.33038017, 0.25427186)
        float physics:mass = 10.238738
        bool physics:rigidBodyEnabled = 1
        matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (2.6016100000000004, 3.9709079800000002, 0.564592, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]

        def Cube "geom_356" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.231314, 0, 0, 0), (0, 0.23732, 0, 0), (0, 0, 0.013794, 0), (0, 0, -0.051928, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_357" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.231314, 0, 0, 0), (0, 0.008574, 0, 0), (0, 0, 0.087812, 0), (0, -0.243352, 0.023995, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_358" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.231314, 0, 0, 0), (0, 0.008574, 0, 0), (0, 0, 0.087812, 0), (0, 0.243352, 0.023995, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_359" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.004182, 0, 0, 0), (0, 0.23732, 0, 0), (0, 0, 0.087812, 0), (-0.225859, 0, 0.023995, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_360" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.004182, 0, 0, 0), (0, 0.23732, 0, 0), (0, 0, 0.087812, 0), (0.225859, 0, 0.023995, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }
    }

    def Xform "dishwasher_tray3" (
        prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMassAPI"]
    )
    {
        point3f physics:centerOfMass = (0, 0, 0)
        float3 physics:diagonalInertia = (0.42309526, 0.28338647, 0.6917011)
        float physics:mass = 17.1072
        bool physics:rigidBodyEnabled = 1
        matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (2.622062, 3.9766752000000003, 0.773578, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]

        def Cube "geom_361" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.22, 0, 0, 0), (0, 0.27, 0, 0), (0, 0, 0.036, 0), (0, 0, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }
    }

    def Xform "sink_drawer1" (
        prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMassAPI"]
    )
    {
        point3f physics:centerOfMass = (-0.047511898, 0.0057254746, -0.14469011)
        float3 physics:diagonalInertia = (2.3191626, 1.9621296, 1.6542627)
        float physics:mass = 35.039906
        bool physics:rigidBodyEnabled = 1
        matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (2.5418138, 3.37245535, 0.497681, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]

        def Cube "geom_367" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.009388, 0, 0, 0), (0, 0.298258, 0, 0), (0, 0, 0.397013, 0), (-0.233976, 0, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_368" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.009017, 0, 0, 0), (0, 0.269754, 0, 0), (0, 0, 0.084742, 0), (0.259483, 0, -0.288887, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_369" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.249028, 0, 0, 0), (0, 0.0075, 0, 0), (0, 0, 0.042, 0), (0.025012, -0.268047, -0.08949, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_370" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.249028, 0, 0, 0), (0, 0.0075, 0, 0), (0, 0, 0.042, 0), (0.025012, 0.268047, -0.08949, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_371" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.249028, 0, 0, 0), (0, 0.0075, 0, 0), (0, 0, 0.011648, 0), (0.025012, -0.268047, -0.208727, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_372" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.249028, 0, 0, 0), (0, 0.0075, 0, 0), (0, 0, 0.011648, 0), (0.025012, 0.268047, -0.208727, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_373" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.249028, 0, 0, 0), (0, 0.0075, 0, 0), (0, 0, 0.043609, 0), (0.025012, -0.268047, -0.33085, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_374" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.249028, 0, 0, 0), (0, 0.0075, 0, 0), (0, 0, 0.043609, 0), (0.025012, 0.268047, -0.33085, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_375" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.249028, 0, 0, 0), (0, 0.031012, 0, 0), (0, 0, 0.008, 0), (0.025012, -0.246033, -0.04, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_376" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.249028, 0, 0, 0), (0, 0.031012, 0, 0), (0, 0, 0.008, 0), (0.025012, 0.246033, -0.04, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_377" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.010504, 0, 0, 0), (0, 0.277046, 0, 0), (0, 0, 0.008, 0), (-0.213959, 0, -0.04, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_378" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.058653, 0, 0, 0), (0, 0.277046, 0, 0), (0, 0, 0.008, 0), (0.21583, 0, -0.04, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_379" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.074789, 0, 0, 0), (0, 0.008426, 0, 0), (0, 0, 0.173305, 0), (0.086505, 0.00535, -0.198155, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_380" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.074789, 0, 0, 0), (0, 0.008426, 0, 0), (0, 0, 0.173305, 0), (0.086505, 0.211412, -0.198155, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_381" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.008356, 0, 0, 0), (0, 0.109826, 0, 0), (0, 0, 0.173305, 0), (0.152938, 0.109826, -0.198155, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_382" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.008356, 0, 0, 0), (0, 0.109826, 0, 0), (0, 0, 0.173305, 0), (0.02, 0.109826, -0.198155, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_383" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.074789, 0, 0, 0), (0, 0.109826, 0, 0), (0, 0, 0.00085, 0), (0.086505, 0.109826, -0.372315, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_384" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.074789, 0, 0, 0), (0, 0.008426, 0, 0), (0, 0, 0.173305, 0), (0.086505, -0.00535, -0.198155, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_385" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.074789, 0, 0, 0), (0, 0.008426, 0, 0), (0, 0, 0.173305, 0), (0.086505, -0.211412, -0.198155, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_386" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.008426, 0, 0, 0), (0, 0.109826, 0, 0), (0, 0, 0.173305, 0), (0.152938, -0.109826, -0.198155, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_387" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.008426, 0, 0, 0), (0, 0.109826, 0, 0), (0, 0, 0.173305, 0), (0.02, -0.109826, -0.198155, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_388" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.074789, 0, 0, 0), (0, 0.109826, 0, 0), (0, 0, 0.00085, 0), (0.086505, -0.109826, -0.372315, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_389" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.109729, 0, 0, 0), (0, 0.008426, 0, 0), (0, 0, 0.173305, 0), (-0.098209, 0.221355, -0.198155, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_390" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.109729, 0, 0, 0), (0, 0.008426, 0, 0), (0, 0, 0.173305, 0), (-0.098209, 0.088435, -0.198155, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_391" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.008426, 0, 0, 0), (0, 0.074691, 0, 0), (0, 0, 0.173305, 0), (0.003041, 0.155, -0.198155, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_392" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.008426, 0, 0, 0), (0, 0.074691, 0, 0), (0, 0, 0.173305, 0), (-0.199821, 0.155, -0.198155, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_393" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.109729, 0, 0, 0), (0, 0.074691, 0, 0), (0, 0, 0.00085, 0), (-0.098209, 0.155, -0.372315, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_394" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.109729, 0, 0, 0), (0, 0.008426, 0, 0), (0, 0, 0.173305, 0), (-0.098209, -0.221355, -0.198155, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_395" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.109729, 0, 0, 0), (0, 0.008426, 0, 0), (0, 0, 0.173305, 0), (-0.098209, 0.071323, -0.198155, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_396" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.008426, 0, 0, 0), (0, 0.154749, 0, 0), (0, 0, 0.173305, 0), (0.003041, -0.075302, -0.198155, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_397" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.008426, 0, 0, 0), (0, 0.154749, 0, 0), (0, 0, 0.173305, 0), (-0.199821, -0.075302, -0.198155, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_398" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.109729, 0, 0, 0), (0, 0.154749, 0, 0), (0, 0, 0.00085, 0), (-0.098209, -0.075302, -0.372315, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Xform "sink_drawer1_handle" (
            prepend apiSchemas = ["PhysicsMassAPI"]
        )
        {
            point3f physics:centerOfMass = (0.0030978445, 0, 0)
            float3 physics:diagonalInertia = (0.000118450924, 0.000116826224, 0.000002638771)
            float physics:mass = 0
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 2.220446049250313e-16, 0.9999999999999998, 0), (0, -0.9999999999999998, 2.220446049250313e-16, 0), (-0.269002, 0.00331339, 0.350717, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Cube "geom_399" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                float[] primvars:displayOpacity = [1]
                matrix4d xformOp:transform = ( (0.01, 0, 0, 0), (0, 0.0065, 0, 0), (0, 0, 0.0065, 0), (0.0164985, 0, 0.08, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }

            def Cube "geom_400" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                float[] primvars:displayOpacity = [1]
                matrix4d xformOp:transform = ( (0.01, 0, 0, 0), (0, 0.0065, 0, 0), (0, 0, 0.0065, 0), (0.0164985, 0, -0.08, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }

            def Cube "geom_401" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                float[] primvars:displayOpacity = [1]
                matrix4d xformOp:transform = ( (0.0065, 0, 0, 0), (0, 0.0065, 0, 0), (0, 0, 0.086516, 0), (0, 0, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }
        }
    }

    def Xform "sink_drawer2" (
        prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMassAPI"]
    )
    {
        point3f physics:centerOfMass = (-0.005551788, 0, -0.02087666)
        float3 physics:diagonalInertia = (0.3143591, 0.20704637, 0.114606805)
        float physics:mass = 6.025122
        bool physics:rigidBodyEnabled = 1
        matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (2.5196852, 3.37374344, 0.6588579999999999, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]

        def Cube "geom_402" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.188013, 0, 0, 0), (0, 0.008, 0, 0), (0, 0, 0.041105, 0), (0.002535, 0.270604, -0.000733, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_403" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.188013, 0, 0, 0), (0, 0.008, 0, 0), (0, 0, 0.041105, 0), (0.002535, -0.270604, -0.000733, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_404" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.0085, 0, 0, 0), (0, 0.032497, 0, 0), (0, 0, 0.049661, 0), (-0.191981, 0.248473, 0.000834, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_405" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.0085, 0, 0, 0), (0, 0.032497, 0, 0), (0, 0, 0.049661, 0), (-0.191981, -0.248473, 0.000834, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_406" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.0085, 0, 0, 0), (0, 0.216977, 0, 0), (0, 0, 0.049, 0), (-0.191981, 0, -0.0015, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_407" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.008, 0, 0, 0), (0, 0.278678, 0, 0), (0, 0, 0.0415, 0), (0.184382, 0, -0.0024, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_408" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.188013, 0, 0, 0), (0, 0.278678, 0, 0), (0, 0, 0.008, 0), (0.002535, 0, -0.036496, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }
    }

    def Xform "cabinet9_drawer1" (
        prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMassAPI"]
    )
    {
        point3f physics:centerOfMass = (-0.005516589, 0, -0.028824784)
        float3 physics:diagonalInertia = (0.49581128, 0.26221275, 0.24609382)
        float physics:mass = 7.5245004
        bool physics:rigidBodyEnabled = 1
        matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (2.5420841000000003, 2.77093636, 0.826152, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]

        def Cube "geom_414" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.245507, 0, 0, 0), (0, 0.008, 0, 0), (0, 0, 0.042633, 0), (0.021031, 0.270267, -0.01336, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_415" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.245507, 0, 0, 0), (0, 0.008, 0, 0), (0, 0, 0.042633, 0), (0.021031, -0.270267, -0.01336, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_416" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.0095, 0, 0, 0), (0, 0.298468, 0, 0), (0, 0, 0.064993, 0), (-0.233977, 0, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_417" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.008, 0, 0, 0), (0, 0.269804, 0, 0), (0, 0, 0.042633, 0), (0.260372, 0, -0.01336, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_418" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.245507, 0, 0, 0), (0, 0.269804, 0, 0), (0, 0, 0.0075, 0), (0.021031, 0, -0.047595, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Xform "cabinet9_drawer1_handle" (
            prepend apiSchemas = ["PhysicsMassAPI"]
        )
        {
            point3f physics:centerOfMass = (0.0030978445, 0, 0)
            float3 physics:diagonalInertia = (0.000118450924, 0.000116826224, 0.000002638771)
            float physics:mass = 0
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 2.220446049250313e-16, 0.9999999999999998, 0), (0, -0.9999999999999998, 2.220446049250313e-16, 0), (-0.269809, 0.00142363, 0.0167695, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Cube "geom_419" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                float[] primvars:displayOpacity = [1]
                matrix4d xformOp:transform = ( (0.01, 0, 0, 0), (0, 0.0065, 0, 0), (0, 0, 0.0065, 0), (0.0164985, 0, 0.08, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }

            def Cube "geom_420" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                float[] primvars:displayOpacity = [1]
                matrix4d xformOp:transform = ( (0.01, 0, 0, 0), (0, 0.0065, 0, 0), (0, 0, 0.0065, 0), (0.0164985, 0, -0.08, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }

            def Cube "geom_421" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                float[] primvars:displayOpacity = [1]
                matrix4d xformOp:transform = ( (0.0065, 0, 0, 0), (0, 0.0065, 0, 0), (0, 0, 0.086516, 0), (0, 0, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }
        }
    }

    def Xform "cabinet9_drawer2" (
        prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMassAPI"]
    )
    {
        point3f physics:centerOfMass = (-0.018631164, 0, -0.060455143)
        float3 physics:diagonalInertia = (0.7337725, 0.42946243, 0.39441088)
        float physics:mass = 10.356275
        bool physics:rigidBodyEnabled = 1
        matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (2.5421270000000002, 2.77203804, 0.629013, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]

        def Cube "geom_422" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.245507, 0, 0, 0), (0, 0.008, 0, 0), (0, 0, 0.011649, 0), (0.021031, 0.270267, 0.041246, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_423" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.245507, 0, 0, 0), (0, 0.008, 0, 0), (0, 0, 0.011649, 0), (0.021031, -0.270267, 0.041246, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_424" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.245507, 0, 0, 0), (0, 0.008, 0, 0), (0, 0, 0.041748, 0), (0.021031, 0.270267, -0.078968, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_425" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.245507, 0, 0, 0), (0, 0.008, 0, 0), (0, 0, 0.041748, 0), (0.021031, -0.270267, -0.078968, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_426" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.0095, 0, 0, 0), (0, 0.298468, 0, 0), (0, 0, 0.131375, 0), (-0.233977, 0, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_427" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.008, 0, 0, 0), (0, 0.269804, 0, 0), (0, 0, 0.084491, 0), (0.260372, 0, -0.037996, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_428" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.245507, 0, 0, 0), (0, 0.269804, 0, 0), (0, 0, 0.008, 0), (0.021031, 0, -0.113735, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Xform "cabinet9_drawer2_handle" (
            prepend apiSchemas = ["PhysicsMassAPI"]
        )
        {
            point3f physics:centerOfMass = (0.0030978445, 0, 0)
            float3 physics:diagonalInertia = (0.000118450924, 0.000116826224, 0.000002638771)
            float physics:mass = 0
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 2.220446049250313e-16, 0.9999999999999998, 0), (0, -0.9999999999999998, 2.220446049250313e-16, 0), (-0.270711, 0.00106413, 0.0850084, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Cube "geom_429" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                float[] primvars:displayOpacity = [1]
                matrix4d xformOp:transform = ( (0.01, 0, 0, 0), (0, 0.0065, 0, 0), (0, 0, 0.0065, 0), (0.0164985, 0, 0.08, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }

            def Cube "geom_430" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                float[] primvars:displayOpacity = [1]
                matrix4d xformOp:transform = ( (0.01, 0, 0, 0), (0, 0.0065, 0, 0), (0, 0, 0.0065, 0), (0.0164985, 0, -0.08, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }

            def Cube "geom_431" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                float[] primvars:displayOpacity = [1]
                matrix4d xformOp:transform = ( (0.0065, 0, 0, 0), (0, 0.0065, 0, 0), (0, 0, 0.086516, 0), (0, 0, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }
        }
    }

    def Xform "cabinet9_drawer3" (
        prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMassAPI"]
    )
    {
        point3f physics:centerOfMass = (-0.046187673, 0, -0.08432029)
        float3 physics:diagonalInertia = (0.86253, 0.5673577, 0.4925794)
        float physics:mass = 11.856377
        bool physics:rigidBodyEnabled = 1
        matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (2.5424277, 2.77101937, 0.29795499999999997, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]

        def Cube "geom_432" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.245507, 0, 0, 0), (0, 0.008, 0, 0), (0, 0, 0.011638, 0), (0.021031, 0.270267, -0.00926, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_433" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.245507, 0, 0, 0), (0, 0.008, 0, 0), (0, 0, 0.011638, 0), (0.021031, -0.270267, -0.00926, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_434" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.245507, 0, 0, 0), (0, 0.008, 0, 0), (0, 0, 0.041711, 0), (0.021031, 0.270267, -0.129424, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_435" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.245507, 0, 0, 0), (0, 0.008, 0, 0), (0, 0, 0.041711, 0), (0.021031, -0.270267, -0.129424, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_436" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.0095, 0, 0, 0), (0, 0.298468, 0, 0), (0, 0, 0.197867, 0), (-0.233977, 0, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_437" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.008, 0, 0, 0), (0, 0.269804, 0, 0), (0, 0, 0.084105, 0), (0.260372, 0, -0.088821, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_438" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.245507, 0, 0, 0), (0, 0.269804, 0, 0), (0, 0, 0.008, 0), (0.021031, 0, -0.164582, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Xform "cabinet9_drawer3_handle" (
            prepend apiSchemas = ["PhysicsMassAPI"]
        )
        {
            point3f physics:centerOfMass = (0.0030978445, 0, 0)
            float3 physics:diagonalInertia = (0.000118450924, 0.000116826224, 0.000002638771)
            float physics:mass = 0
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 2.220446049250313e-16, 0.9999999999999998, 0), (0, -0.9999999999999998, 2.220446049250313e-16, 0), (-0.268882, 0.00102875, 0.15027, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Cube "geom_439" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                float[] primvars:displayOpacity = [1]
                matrix4d xformOp:transform = ( (0.01, 0, 0, 0), (0, 0.0065, 0, 0), (0, 0, 0.0065, 0), (0.0164985, 0, 0.08, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }

            def Cube "geom_440" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                float[] primvars:displayOpacity = [1]
                matrix4d xformOp:transform = ( (0.01, 0, 0, 0), (0, 0.0065, 0, 0), (0, 0, 0.0065, 0), (0.0164985, 0, -0.08, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }

            def Cube "geom_441" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                float[] primvars:displayOpacity = [1]
                matrix4d xformOp:transform = ( (0.0065, 0, 0, 0), (0, 0.0065, 0, 0), (0, 0, 0.086516, 0), (0, 0, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }
        }
    }

    def Xform "cabinet10_drawer1" (
        prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMassAPI"]
    )
    {
        point3f physics:centerOfMass = (-0.0035305356, 0, -0.027514048)
        float3 physics:diagonalInertia = (0.2538217, 0.17313506, 0.08977516)
        float physics:mass = 5.444076
        bool physics:rigidBodyEnabled = 1
        matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (2.5420328, 2.2725445900000003, 0.8267720000000001, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]

        def Cube "geom_447" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.245507, 0, 0, 0), (0, 0.008, 0, 0), (0, 0, 0.042633, 0), (0.021031, 0.170562, -0.01336, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_448" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.245507, 0, 0, 0), (0, 0.008, 0, 0), (0, 0, 0.042633, 0), (0.021031, -0.170562, -0.01336, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_449" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.0095, 0, 0, 0), (0, 0.198867, 0, 0), (0, 0, 0.064993, 0), (-0.233977, 0, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_450" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.008, 0, 0, 0), (0, 0.178822, 0, 0), (0, 0, 0.042633, 0), (0.260372, 0, -0.01336, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_451" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.245507, 0, 0, 0), (0, 0.178822, 0, 0), (0, 0, 0.0075, 0), (0.021031, 0, -0.047595, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Xform "cabinet10_drawer1_handle" (
            prepend apiSchemas = ["PhysicsMassAPI"]
        )
        {
            point3f physics:centerOfMass = (0.0030978445, 0, 0)
            float3 physics:diagonalInertia = (0.000118450924, 0.000116826224, 0.000002638771)
            float physics:mass = 0
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 2.220446049250313e-16, 0.9999999999999998, 0), (0, -0.9999999999999998, 2.220446049250313e-16, 0), (-0.266623, -0.00124599, 0.0172039, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Cube "geom_452" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                float[] primvars:displayOpacity = [1]
                matrix4d xformOp:transform = ( (0.01, 0, 0, 0), (0, 0.0065, 0, 0), (0, 0, 0.0065, 0), (0.0164985, 0, 0.08, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }

            def Cube "geom_453" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                float[] primvars:displayOpacity = [1]
                matrix4d xformOp:transform = ( (0.01, 0, 0, 0), (0, 0.0065, 0, 0), (0, 0, 0.0065, 0), (0.0164985, 0, -0.08, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }

            def Cube "geom_454" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                float[] primvars:displayOpacity = [1]
                matrix4d xformOp:transform = ( (0.0065, 0, 0, 0), (0, 0.0065, 0, 0), (0, 0, 0.086516, 0), (0, 0, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }
        }
    }

    def Xform "cabinet10_drawer2" (
        prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMassAPI"]
    )
    {
        point3f physics:centerOfMass = (-0.01591734, 0, -0.059783634)
        float3 physics:diagonalInertia = (0.38261616, 0.29911613, 0.14706522)
        float physics:mass = 7.4402804
        bool physics:rigidBodyEnabled = 1
        matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (2.5422762, 2.27185139, 0.6291720000000001, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]

        def Cube "geom_455" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.245507, 0, 0, 0), (0, 0.008, 0, 0), (0, 0, 0.011649, 0), (0.021031, 0.170562, 0.041246, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_456" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.245507, 0, 0, 0), (0, 0.008, 0, 0), (0, 0, 0.011649, 0), (0.021031, -0.170562, 0.041246, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_457" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.245507, 0, 0, 0), (0, 0.008, 0, 0), (0, 0, 0.041748, 0), (0.021031, 0.170562, -0.078968, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_458" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.245507, 0, 0, 0), (0, 0.008, 0, 0), (0, 0, 0.041748, 0), (0.021031, -0.170562, -0.078968, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_459" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.0095, 0, 0, 0), (0, 0.198867, 0, 0), (0, 0, 0.131375, 0), (-0.233977, 0, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_460" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.008, 0, 0, 0), (0, 0.178822, 0, 0), (0, 0, 0.084491, 0), (0.260372, 0, -0.037996, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_461" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.245507, 0, 0, 0), (0, 0.178822, 0, 0), (0, 0, 0.008, 0), (0.021031, 0, -0.113735, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Xform "cabinet10_drawer2_handle" (
            prepend apiSchemas = ["PhysicsMassAPI"]
        )
        {
            point3f physics:centerOfMass = (0.0030978445, 0, 0)
            float3 physics:diagonalInertia = (0.000118450924, 0.000116826224, 0.000002638771)
            float physics:mass = 0
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 2.220446049250313e-16, 0.9999999999999998, 0), (0, -0.9999999999999998, 2.220446049250313e-16, 0), (-0.266862, -0.00397854, 0.0854179, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Cube "geom_462" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                float[] primvars:displayOpacity = [1]
                matrix4d xformOp:transform = ( (0.01, 0, 0, 0), (0, 0.0065, 0, 0), (0, 0, 0.0065, 0), (0.0164985, 0, 0.08, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }

            def Cube "geom_463" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                float[] primvars:displayOpacity = [1]
                matrix4d xformOp:transform = ( (0.01, 0, 0, 0), (0, 0.0065, 0, 0), (0, 0, 0.0065, 0), (0.0164985, 0, -0.08, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }

            def Cube "geom_464" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                float[] primvars:displayOpacity = [1]
                matrix4d xformOp:transform = ( (0.0065, 0, 0, 0), (0, 0.0065, 0, 0), (0, 0, 0.086516, 0), (0, 0, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }
        }
    }

    def Xform "cabinet10_drawer3" (
        prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMassAPI"]
    )
    {
        point3f physics:centerOfMass = (-0.042035118, 0, -0.08542842)
        float3 physics:diagonalInertia = (0.45296973, 0.3925219, 0.19643138)
        float physics:mass = 8.439307
        bool physics:rigidBodyEnabled = 1
        matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (2.5425869, 2.27155079, 0.297153, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]

        def Cube "geom_465" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.245507, 0, 0, 0), (0, 0.008, 0, 0), (0, 0, 0.011638, 0), (0.021031, 0.170562, -0.00926, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_466" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.245507, 0, 0, 0), (0, 0.008, 0, 0), (0, 0, 0.011638, 0), (0.021031, -0.170562, -0.00926, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_467" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.245507, 0, 0, 0), (0, 0.008, 0, 0), (0, 0, 0.041711, 0), (0.021031, 0.170562, -0.129424, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_468" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.245507, 0, 0, 0), (0, 0.008, 0, 0), (0, 0, 0.041711, 0), (0.021031, -0.170562, -0.129424, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_469" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.0095, 0, 0, 0), (0, 0.198867, 0, 0), (0, 0, 0.197867, 0), (-0.233977, 0, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_470" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.008, 0, 0, 0), (0, 0.178822, 0, 0), (0, 0, 0.084105, 0), (0.260372, 0, -0.088821, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_471" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.245507, 0, 0, 0), (0, 0.178822, 0, 0), (0, 0, 0.008, 0), (0.021031, 0, -0.164582, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Xform "cabinet10_drawer3_handle" (
            prepend apiSchemas = ["PhysicsMassAPI"]
        )
        {
            point3f physics:centerOfMass = (0.0030978445, 0, 0)
            float3 physics:diagonalInertia = (0.000118450924, 0.000116826224, 0.000002638771)
            float physics:mass = 0
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 2.220446049250313e-16, 0.9999999999999998, 0), (0, -0.9999999999999998, 2.220446049250313e-16, 0), (-0.267122, -0.00402777, 0.151166, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Cube "geom_472" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                float[] primvars:displayOpacity = [1]
                matrix4d xformOp:transform = ( (0.01, 0, 0, 0), (0, 0.0065, 0, 0), (0, 0, 0.0065, 0), (0.0164985, 0, 0.08, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }

            def Cube "geom_473" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                float[] primvars:displayOpacity = [1]
                matrix4d xformOp:transform = ( (0.01, 0, 0, 0), (0, 0.0065, 0, 0), (0, 0, 0.0065, 0), (0.0164985, 0, -0.08, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }

            def Cube "geom_474" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                float[] primvars:displayOpacity = [1]
                matrix4d xformOp:transform = ( (0.0065, 0, 0, 0), (0, 0.0065, 0, 0), (0, 0, 0.086516, 0), (0, 0, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }
        }
    }

    def Xform "cabinet11_drawer1" (
        prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMassAPI"]
    )
    {
        point3f physics:centerOfMass = (-0.005669564, 0, -0.030092966)
        float3 physics:diagonalInertia = (1.1668279, 0.8221582, 0.36244574)
        float physics:mass = 10.883354
        bool physics:rigidBodyEnabled = 1
        matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (2.5421176, 1.6221993899999998, 0.8280129999999999, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]

        def Cube "geom_480" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.245507, 0, 0, 0), (0, 0.008, 0, 0), (0, 0, 0.042633, 0), (0.021031, 0.418233, -0.01336, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_481" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.245507, 0, 0, 0), (0, 0.008, 0, 0), (0, 0, 0.042633, 0), (0.021031, -0.418233, -0.01336, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_482" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.0095, 0, 0, 0), (0, 0.448341, 0, 0), (0, 0, 0.064993, 0), (-0.233977, 0, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_483" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.008, 0, 0, 0), (0, 0.419788, 0, 0), (0, 0, 0.042633, 0), (0.260372, 0, -0.01336, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_484" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.245507, 0, 0, 0), (0, 0.419788, 0, 0), (0, 0, 0.0075, 0), (0.021031, 0, -0.047595, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Xform "cabinet11_drawer1_handle" (
            prepend apiSchemas = ["PhysicsMassAPI"]
        )
        {
            point3f physics:centerOfMass = (0.0030978445, 0, 0)
            float3 physics:diagonalInertia = (0.000118450924, 0.000116826224, 0.000002638771)
            float physics:mass = 0
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 2.220446049250313e-16, 0.9999999999999998, 0), (0, -0.9999999999999998, 2.220446049250313e-16, 0), (-0.266623, -0.00124599, 0.0172039, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Cube "geom_485" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                float[] primvars:displayOpacity = [1]
                matrix4d xformOp:transform = ( (0.01, 0, 0, 0), (0, 0.0065, 0, 0), (0, 0, 0.0065, 0), (0.0164985, 0, 0.08, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }

            def Cube "geom_486" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                float[] primvars:displayOpacity = [1]
                matrix4d xformOp:transform = ( (0.01, 0, 0, 0), (0, 0.0065, 0, 0), (0, 0, 0.0065, 0), (0.0164985, 0, -0.08, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }

            def Cube "geom_487" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                float[] primvars:displayOpacity = [1]
                matrix4d xformOp:transform = ( (0.0065, 0, 0, 0), (0, 0.0065, 0, 0), (0, 0, 0.086516, 0), (0, 0, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }
        }
    }

    def Xform "cabinet11_drawer2" (
        prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMassAPI"]
    )
    {
        point3f physics:centerOfMass = (-0.018797433, 0, -0.061578933)
        float3 physics:diagonalInertia = (1.6846324, 1.1801573, 0.63624376)
        float physics:mass = 15.020325
        bool physics:rigidBodyEnabled = 1
        matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (2.5426312, 1.6220198, 0.629022, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]

        def Cube "geom_488" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.245507, 0, 0, 0), (0, 0.008, 0, 0), (0, 0, 0.011649, 0), (0.021031, 0.418233, 0.041246, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_489" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.245507, 0, 0, 0), (0, 0.008, 0, 0), (0, 0, 0.011649, 0), (0.021031, -0.418233, 0.041246, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_490" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.245507, 0, 0, 0), (0, 0.008, 0, 0), (0, 0, 0.041748, 0), (0.021031, 0.418233, -0.078968, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_491" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.245507, 0, 0, 0), (0, 0.008, 0, 0), (0, 0, 0.041748, 0), (0.021031, -0.418233, -0.078968, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_492" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.0095, 0, 0, 0), (0, 0.448341, 0, 0), (0, 0, 0.131375, 0), (-0.233977, 0, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_493" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.008, 0, 0, 0), (0, 0.419788, 0, 0), (0, 0, 0.084491, 0), (0.260372, 0, -0.037996, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_494" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.245507, 0, 0, 0), (0, 0.419788, 0, 0), (0, 0, 0.008, 0), (0.021031, 0, -0.113735, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Xform "cabinet11_drawer2_handle" (
            prepend apiSchemas = ["PhysicsMassAPI"]
        )
        {
            point3f physics:centerOfMass = (0.0030978445, 0, 0)
            float3 physics:diagonalInertia = (0.000118450924, 0.000116826224, 0.000002638771)
            float physics:mass = 0
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 2.220446049250313e-16, 0.9999999999999998, 0), (0, -0.9999999999999998, 2.220446049250313e-16, 0), (-0.266862, -0.00397854, 0.0854179, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Cube "geom_495" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                float[] primvars:displayOpacity = [1]
                matrix4d xformOp:transform = ( (0.01, 0, 0, 0), (0, 0.0065, 0, 0), (0, 0, 0.0065, 0), (0.0164985, 0, 0.08, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }

            def Cube "geom_496" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                float[] primvars:displayOpacity = [1]
                matrix4d xformOp:transform = ( (0.01, 0, 0, 0), (0, 0.0065, 0, 0), (0, 0, 0.0065, 0), (0.0164985, 0, -0.08, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }

            def Cube "geom_497" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                float[] primvars:displayOpacity = [1]
                matrix4d xformOp:transform = ( (0.0065, 0, 0, 0), (0, 0.0065, 0, 0), (0, 0, 0.086516, 0), (0, 0, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }
        }
    }

    def Xform "cabinet11_drawer3" (
        prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMassAPI"]
    )
    {
        point3f physics:centerOfMass = (-0.047191128, 0, -0.08447895)
        float3 physics:diagonalInertia = (1.962062, 1.4117073, 0.84335864)
        float physics:mass = 17.274088
        bool physics:rigidBodyEnabled = 1
        matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (2.5421649, 1.6230235199999998, 0.29653599999999997, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]

        def Cube "geom_498" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.245507, 0, 0, 0), (0, 0.008, 0, 0), (0, 0, 0.011638, 0), (0.021031, 0.418233, -0.00926, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_499" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.245507, 0, 0, 0), (0, 0.008, 0, 0), (0, 0, 0.011638, 0), (0.021031, -0.418233, -0.00926, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_500" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.245507, 0, 0, 0), (0, 0.008, 0, 0), (0, 0, 0.041711, 0), (0.021031, 0.418233, -0.129424, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_501" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.245507, 0, 0, 0), (0, 0.008, 0, 0), (0, 0, 0.041711, 0), (0.021031, -0.418233, -0.129424, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_502" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.0095, 0, 0, 0), (0, 0.448341, 0, 0), (0, 0, 0.197867, 0), (-0.233977, 0, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_503" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.008, 0, 0, 0), (0, 0.419788, 0, 0), (0, 0, 0.084105, 0), (0.260372, 0, -0.088821, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_504" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.245507, 0, 0, 0), (0, 0.419788, 0, 0), (0, 0, 0.008, 0), (0.021031, 0, -0.164582, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Xform "cabinet11_drawer3_handle" (
            prepend apiSchemas = ["PhysicsMassAPI"]
        )
        {
            point3f physics:centerOfMass = (0.0030978445, 0, 0)
            float3 physics:diagonalInertia = (0.000118450924, 0.000116826224, 0.000002638771)
            float physics:mass = 0
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 2.220446049250313e-16, 0.9999999999999998, 0), (0, -0.9999999999999998, 2.220446049250313e-16, 0), (-0.267122, -0.00402777, 0.151166, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Cube "geom_505" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                float[] primvars:displayOpacity = [1]
                matrix4d xformOp:transform = ( (0.01, 0, 0, 0), (0, 0.0065, 0, 0), (0, 0, 0.0065, 0), (0.0164985, 0, 0.08, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }

            def Cube "geom_506" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                float[] primvars:displayOpacity = [1]
                matrix4d xformOp:transform = ( (0.01, 0, 0, 0), (0, 0.0065, 0, 0), (0, 0, 0.0065, 0), (0.0164985, 0, -0.08, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }

            def Cube "geom_507" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                float[] primvars:displayOpacity = [1]
                matrix4d xformOp:transform = ( (0.0065, 0, 0, 0), (0, 0.0065, 0, 0), (0, 0, 0.086516, 0), (0, 0, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }
        }
    }
}

